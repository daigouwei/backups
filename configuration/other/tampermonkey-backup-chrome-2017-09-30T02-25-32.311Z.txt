{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"百度网盘直接下载助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link*","*://yun.baidu.com/share/link*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1503820968532,"data":{}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/23635-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B.user.js","uuid":"bcd7ca27-d077-463e-a21f-f72740def7b5","source":""},{"name":"破解VIP会员视频集合","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://*.bilibili.com/blackboard/*"],"orig_includes":[],"orig_matches":["*://*.iqiyi.com/*","*://*.youku.com/*","*://*.le.com/*","*://*.letv.com/*","*://v.qq.com/*","*://*.tudou.com/*","*://*.mgtv.com/*","*://film.sohu.com/*","*://tv.sohu.com/*","*://*.acfun.cn/v/*","*://*.bilibili.com/*","*://vip.1905.com/play/*","*://*.pptv.com/*","*://v.yinyuetai.com/video/*","*://v.yinyuetai.com/playlist/*","*://*.fun.tv/vplay/*","*://*.wasu.cn/Play/show/*","*://*.56.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1503821313792,"data":{}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/27530-%E7%A0%B4%E8%A7%A3vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88/code/%E7%A0%B4%E8%A7%A3VIP%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88.user.js","uuid":"8b0d9131-9889-4958-a525-2923dcc6922a","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnoLTop6NWSVDkvJrlkZjop4bpopHpm4blkIgKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vdGFtcGVybW9ua2V5Lm5ldC8KLy8gQHZlcnNpb24gICAgICAzLjEuMAovLyBAZGVzY3JpcHRpb24gIOegtOino1vkvJjphbd86IW+6K6vfOS5kOinhnzniLHlpYfoibp86IqS5p6cfEFC56uZfOmfs+aCpuWPsF3nrYlWSVDmiJbkvJrlkZjop4bpopHvvIzop6PmnpDmjqXlj6PotLXnsr7kuI3otLXlpJrvvIznu53lr7nlpJ/nlKjjgILmnInnm7TmjqXot7PovazvvIvlpIfnlKjmjqXlj6PliJfooajjgILor6bnu4bmlrnms5XnnIvor7TmmI7ov5jmnInlm77niYfjgILljIXlkKvkuoZb44CQ56iz5a6a44CR5YWo572RVklQ6KeG6aKR5Zyo57q/6Kej5p6Q4pa2dHRtc2p4XVtWSVDkvJrlkZjop4bpopHop6PmnpDilrbpvpnovaldW+mFt+e7mC3noLTop6NWSVDkvJrlkZjop4bpopHilrZhaHVpYWJjMjAwM13ku6Xlj4pbVklQ6KeG6aKR56C06Kej4pa2aG9vdGhpbl3nmoTpg6jliIbmjqXlj6PjgIIKLy8gQGF1dGhvciAgICAgICDpu4Tnm5AKLy8gQG1hdGNoICAgICAgICAqOi8vKi5pcWl5aS5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnlvdWt1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoubGUuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5sZXR2LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovL3YucXEuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi50dWRvdS5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLm1ndHYuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vZmlsbS5zb2h1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovL3R2LnNvaHUuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5hY2Z1bi5jbi92LyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5iaWxpYmlsaS5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly92aXAuMTkwNS5jb20vcGxheS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoucHB0di5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly92Lnlpbnl1ZXRhaS5jb20vdmlkZW8vKgovLyBAbWF0Y2ggICAgICAgICo6Ly92Lnlpbnl1ZXRhaS5jb20vcGxheWxpc3QvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLmZ1bi50di92cGxheS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoud2FzdS5jbi9QbGF5L3Nob3cvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLjU2LmNvbS8qCi8vIEBleGNsdWRlICAgICAgKjovLyouYmlsaWJpbGkuY29tL2JsYWNrYm9hcmQvKgovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICAgR01fZ2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIHVuc2FmZVdpbmRvdwovLyBAZ3JhbnQgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vIEBncmFudCAgICAgICAgR01fb3BlbkluVGFiCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgdmFyIHJlcGxhY2VSYXc9R01fZ2V0VmFsdWUoInJlcGxhY2VSYXciKTsKICAgIHZhciBlcGlzb2Rlcz1HTV9nZXRWYWx1ZSgiZXBpc29kZXMiKTsKICAgIEdNX2FkZFN0eWxlKCcjVE1hbmF5c3t6LWluZGV4Ojk5OTk5OTsgcG9zaXRpb246YWJzb2x1dGU7IGxlZnQ6MHB4OyB0b3A6MHB4OyB3aWR0aDoxMDBweDsgaGVpZ2h0OmF1dG87IGJvcmRlcjowOyBtYXJnaW46MDt9JysKICAgICAgICAgICAgICAgICcjcGFyc2VVbHtwb3NpdGlvbjpmaXhlZDt0b3A6ODBweDsgbGVmdDowcHg7fScrCiAgICAgICAgICAgICAgICAnI3BhcnNlVWwgbGl7bGlzdC1zdHlsZTpub25lO30nKwogICAgICAgICAgICAgICAgJy5UTTF7b3BhY2l0eTowLjM7IHBvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6IDAgN3B4IDAgMDsgbWluLXdpZHRoOiAxOXB4OyBjdXJzb3I6cG9pbnRlcjt9JysKICAgICAgICAgICAgICAgICcuVE0xOmhvdmVye29wYWNpdHk6MTt9JysKICAgICAgICAgICAgICAgICcuVE0xIHNwYW57ZGlzcGxheTpibG9jazsgYm9yZGVyLXJhZGl1czowIDVweCA1cHggMDsgYmFja2dyb3VuZC1jb2xvcjojZmZmZjAwOyBib3JkZXI6MDsgZm9udDpib2xkIDE1cHggIuW+rui9r+mbhem7kSIgIWltcG9ydGFudDsgY29sb3I6I2ZmMDAwMDsgbWFyZ2luOjA7IHBhZGRpbmc6MTVweCAycHg7fScrCiAgICAgICAgICAgICAgICAnLlRNM3twb3NpdGlvbjphYnNvbHV0ZTsgdG9wOjA7IGxlZnQ6MTlweDsgZGlzcGxheTpub25lOyBib3JkZXItcmFkaXVzOjVweDsgbWFyZ2luOjA7IHBhZGRpbmc6MDt9JysKICAgICAgICAgICAgICAgICcuVE0zIGxpe2Zsb2F0Om5vbmU7IHdpZHRoOjgwcHg7IG1hcmdpbjowOyBmb250LXNpemU6MTRweDsgcGFkZGluZzozcHggMTBweCAycHggMTVweDsgY3Vyc29yOnBvaW50ZXI7IGNvbG9yOiMzYTNhM2EgIWltcG9ydGFudDsgYmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMCwwLjgpfScrCiAgICAgICAgICAgICAgICAnLlRNMyBsaTpob3Zlcntjb2xvcjp3aGl0ZSAhaW1wb3J0YW50OyBiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMC44KTt9JysKICAgICAgICAgICAgICAgICcuVE0zIGxpOmxhc3QtY2hpbGR7Ym9yZGVyLXJhZGl1czogMCAwIDVweCA1cHg7fScrCiAgICAgICAgICAgICAgICAnLlRNMyBsaTpmaXJzdC1jaGlsZHtib3JkZXItcmFkaXVzOiA1cHggNXB4IDAgMDt9JysKICAgICAgICAgICAgICAgICcuVE0xOmhvdmVyIC5UTTN7ZGlzcGxheTpibG9ja30nKTsKICAgIHZhciBhcGlzPVsKICAgICAgICB7Im5hbWUiOiJ2UGFyc2Vb6IW+XSIsInVybCI6Imh0dHBzOi8vYXBpLnZwYXJzZS5vcmcvP3VybD0iLCJ0aXRsZSI6IuaUr+aMgeiFvuiuryJ9LAogICAgICAgIC8veyJuYW1lIjoiRkxWU1Bb6IW+6K6vXSIsInVybCI6Imh0dHBzOi8vYXBpLmZsdnNwLmNvbS8/dXJsPSIsInRpdGxlIjoi5pSv5oyB6IW+6K6vIn0sLy/op6PmnpDmupDlkIzkuIoKICAgICAgICB7Im5hbWUiOiLlmZflmZfnlLXlvbEiLCJ1cmwiOiJodHRwOi8vcHVwdWR5LmNvbS9wbGF5P21ha2U9dXJsJmlkPSIsInRpdGxlIjoi57u85ZCI5o6l5Y+j77yM56iz5a6awrflhajnvZFWSVAq44CQ5L2c6ICFdHRtc2p444CR6ISa5pys55qE5o6l5Y+jIn0sCiAgICAgICAgeyJuYW1lIjoi6YW357uYIiwidXJsIjoiaHR0cDovL2FwcGFwaS5zdmlwdi5rdXVodWkuY29tL3N2aXBqeC9saXVsYW5xaWNoYWppYW4vYnJvd3NlcnBsdWdpbi9xaGp4L3FoangucGhwP2lkPSIsInRpdGxlIjoi57u85ZCI5o6l5Y+j77yM6YW357uYKuOAkOS9nOiAhWFodWlhYmMyMDAz44CR6ISa5pys55qE5o6l5Y+jIn0sCiAgICAgICAgeyJuYW1lIjoi55m+5Z+f6ZiBIiwidXJsIjoiaHR0cDovL2FwaS5iYWl5dWcuY24vdmlwL2luZGV4LnBocD91cmw9IiwidGl0bGUiOiLovazlnIjlnIjlsLHmjaLnur/ot68ifSwKICAgICAgICB7Im5hbWUiOiLml4vpo47op6PmnpAiLCJ1cmwiOiJodHRwOi8vYXBpLnhmc3ViLmNvbS9pbmRleC5waHA/dXJsPSIsInRpdGxlIjoiMTkwNeS8mOWFiOS9v+eUqCJ9LAogICAgICAgIHsibmFtZSI6Iuefs+WktOino+aekCIsInVybCI6Imh0dHBzOi8vamlleGkuMDcxODExLmNjL2p4LnBocD91cmw9IiwidGl0bGUiOiLmiYvliqjngrnmkq3mlL4ifSwKICAgICAgICB7Im5hbWUiOiLml6DlkI3lsI/nq5kiLCJ1cmwiOiJodHRwOi8vd3d3LnNmc2Z0LmNvbS9hZG1pbi5waHA/dXJsPSIsInRpdGxlIjoi5peg5ZCN5bCP56uZ5ZCM5rqQIn0sCiAgICAgICAgeyJuYW1lIjoiVklQ55yL55yLIiwidXJsIjoiaHR0cDovL3Euei52aXAudG90di43MmR1LmNvbS8/dXJsPSIsInRpdGxlIjoi5pu05o2i57q/6Lev5oiQ5Yqf546H5Lya5o+Q6auYIn0sCiAgICAgICAgeyJuYW1lIjoiT0RGTFYiLCJ1cmwiOiJodHRwOi8vYWlrYW4tdHYuY29tLz91cmw9IiwidGl0bGUiOiLkuI3nqLPlrprvvIzlub/lkYrov4fmu6Tova/ku7blj6/og73mnInlvbHlk40ifSwKICAgICAgICB7Im5hbWUiOiIxNjPkuroiLCJ1cmwiOiJodHRwOi8vanguYXBpLjE2M3Jlbi5jb20vdm9kLnBocD91cmw9IiwidGl0bGUiOiLlgbblsJTmlK/mjIHohb7orq8ifSwKICAgICAgICB7Im5hbWUiOiJDS0ZMViIsInVybCI6Imh0dHA6Ly93d3cuMDMzNWhhaWJvLmNvbS90b25nLnBocD91cmw9IiwidGl0bGUiOiJDS0ZMVuS6kSzpg6jliIbnq5nngrnkuI3mlK/mjIEifSwKICAgICAgICB7Im5hbWUiOiLoiJ7liqjnp4vlpKkiLCJ1cmwiOiJodHRwOi8vcXR6ci5uZXQvcy8/cXQ9IiwidGl0bGUiOiJxdHpyLm5ldCJ9LAogICAgICAgIHsibmFtZSI6IuaXoOWQjeWwj+ermTIiLCJ1cmwiOiJodHRwOi8vd3d3LndteHoud2FuZy92aWRlby5waHA/dXJsPSIsInRpdGxlIjoi6L2s5ZyI5ZyI5bCx5o2i57q/6LevIn0sCiAgICAgICAgeyJuYW1lIjoi55y8552b5Lya5LiL6ZuoIiwidXJsIjoiaHR0cDovL3d3dy52aXBqaWV4aS5jb20veXVuLnBocD91cmw9IiwidGl0bGUiOiJ3d3cudmlwamlleGkuY29tIn0sCiAgICAgICAgeyJuYW1lIjoi5Lq65Lq65Y+R5biDIiwidXJsIjoiaHR0cDovL3YucmVucmVuZmFidS5jb20vamlleGkucGhwP3VybD0iLCJ0aXRsZSI6Iue7vOWQiO+8jOWkmue6v+i3ryJ9CiAgICBdOwogICAgdmFyIGRlZmF1bHRhcGk9eyJ0aXRsZSI6Ium+mei9qeiEmuacrOeahOaOpeWPo++8jOm7mOiupOeUqOa1ruepuuino+aekO+8jOWkseaViOivt+abtOaNouaOpeWPoyIsInVybCI6Imh0dHA6Ly9pZmtqeC5jb20vP3VybD0ifTsKICAgIC8v5bWM5YWl6aG16Z2i5pKt5pS+CiAgICBmdW5jdGlvbiBvcGVuSW5UYWIoZXZ0KXsKICAgICAgICB2YXIgaWZyYW1lPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlmcmFtZSIpOwogICAgICAgIGlmcmFtZS5pZD0iVE1pZnJhbWUiOwogICAgICAgIHZhciB2aWRlbzsKICAgICAgICAvL2lmcmFtZS5zdHlsZS5jc3NUZXh0PSJ3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3RleHQtYWxpZ246Y2VudGVyO2JvcmRlcjpub25lOyI7CiAgICAgICAgaWZyYW1lLnN0eWxlLmJvcmRlcj0ibm9uZSI7CiAgICAgICAgaWZyYW1lLnRleHRBbGlnbj0iY2VudGVyIjsKICAgICAgICBpZnJhbWUuc3JjPWV2dC50YXJnZXQuZGF0YXNldC51cmwrbG9jYXRpb24uaHJlZjsKICAgICAgICB2YXIgdGltZXI9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0t5qOA5rWL6KeG6aKR5YWD57Sg5oCd6Lev5YCf6Ym05LuW5Lq6IExpY2Vuc2UgTUlUIEJlZ2luLS0tLS0tLS0tLS0tLS0KICAgICAgICAgICAgW10uZXZlcnkuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCJvYmplY3QsZW1iZWQsdmlkZW8iKSxmdW5jdGlvbihpdGVtKXsgICAgICAgICAgICAgICAgLy9MSU5LOmh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvemgtQ04vc2NyaXB0cy8yNjU1Ni12aXDop4bpopHnoLTop6MKICAgICAgICAgICAgICAgIHZhciBzdHlsZT1nZXRDb21wdXRlZFN0eWxlKGl0ZW0sIG51bGwpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9Ib21lcGFnZTogaHR0cDovL2hvb3RoaW4uY29tCiAgICAgICAgICAgICAgICBpZihzdHlsZS53aWR0aC5yZXBsYWNlKCJweCIsIiIpPjEwMCAmJiBzdHlsZS5oZWlnaHQucmVwbGFjZSgicHgiLCIiKT4xMDApeyAgICAgICAgICAgICAgIC8vRW1haWw6IHJpeGl4aUBnbWFpbC5jb20KICAgICAgICAgICAgICAgICAgICB2aWRlbz1pdGVtOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsvL+acieaSreaUvueqlwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZih2aWRlb3x8ZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI1RNaWZyYW1lIikpewogICAgICAgICAgICAgICAgaWYoZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI1RNaWZyYW1lIikpe3ZpZGVvPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNUTWlmcmFtZSIpO30KICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpOwogICAgICAgICAgICAgICAgdmFyIHZpZGVvU3R5bGU9Z2V0Q29tcHV0ZWRTdHlsZSh2aWRlbywgbnVsbCk7CiAgICAgICAgICAgICAgICBpZnJhbWUud2lkdGg9dmlkZW9TdHlsZS53aWR0aDsKICAgICAgICAgICAgICAgIGlmcmFtZS5oZWlnaHQ9dmlkZW9TdHlsZS5oZWlnaHQ7CiAgICAgICAgICAgICAgICB2YXIgdmlkZW9QYXJlbnQ9dmlkZW8ucGFyZW50Tm9kZTsKICAgICAgICAgICAgICAgIGlmcmFtZS5zdHlsZS5saW5lSGVpZ2h0PWdldENvbXB1dGVkU3R5bGUodmlkZW9QYXJlbnQpLmhlaWdodDsKICAgICAgICAgICAgICAgIGlmKHZpZGVvLnBhcmVudE5vZGUpe3ZpZGVvLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGlmcmFtZSx2aWRlbyk7fQogICAgICAgICAgICB9CiAgICAgICAgfSw1MDApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0t5qOA5rWL6KeG6aKR5YWD57Sg5oCd6Lev5YCf6Ym05LuW5Lq6ICBFbmQtLS0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIGlmKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoInlvdWt1IikhPS0xKXsKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiLnZwYWN0aW9udjVfaWZyYW1lX3dyYXAiKS5zdHlsZS5kaXNwbGF5PSJub25lIjsKICAgICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBub05ld1RhYkNoZWNrKCl7CiAgICAgICAgdmFyIHgsIGFycj1kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCIuVE00IGxpIik7CiAgICAgICAgcmVwbGFjZVJhdz1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjaW5UYWJDaGVrYngiKS5jaGVja2VkOwogICAgICAgIEdNX3NldFZhbHVlKCJyZXBsYWNlUmF3IixyZXBsYWNlUmF3KTsKICAgICAgICBmb3IoeD0wO3g8YXJyLmxlbmd0aDt4KyspewogICAgICAgICAgICBpZihyZXBsYWNlUmF3KXsKICAgICAgICAgICAgICAgIGFyclt4XS5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsb3BlbkluVGFiLGZhbHNlKTsKICAgICAgICAgICAgICAgIGFyclt4XS5vbmNsaWNrPScnOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIGFyclt4XS5yZW1vdmVFdmVudExpc3RlbmVyKCJjbGljayIsb3BlbkluVGFiLGZhbHNlKTsKICAgICAgICAgICAgICAgIGFyclt4XS5vbmNsaWNrPWZ1bmN0aW9uKCl7d2luZG93Lm9wZW4odGhpcy5kYXRhc2V0LnVybCtsb2NhdGlvbi5ocmVmKTt9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZnVuY3Rpb24gcmlnaHRFcHNMaW5rQ2hlY2soKSB7CiAgICAgICAgZXBpc29kZXM9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3JlYWxMaW5rQ2hla2J4IikuY2hlY2tlZDsKICAgICAgICBHTV9zZXRWYWx1ZSgiZXBpc29kZXMiLGVwaXNvZGVzKTsKICAgICAgICBpZihlcGlzb2Rlcyl7CiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3aWRnZXQtZHJhbWFzZXJpZXMnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIGdldExpbmsgKGUpeyAgICAgIC8vLS0tLS0tLS0tLS0tLWlxaXlp5Ymn6ZuG55yf5a6e5pKt5pS+6aG16Z2i5pa55rOVICBCZWdpbi0tLS0tLS0tLS0tLS0tLS0tLS8vSG9tZXBhZ2U6IGh0dHA6Ly9ob290aGluLmNvbSAgICBFbWFpbDogcml4aXhpQGdtYWlsLmNvbQogICAgICAgICAgICAgICAgdmFyIHRhcmdldD1lLnRhcmdldC5wYXJlbnROb2RlLnRhZ05hbWU9PSJMSSI/ZS50YXJnZXQucGFyZW50Tm9kZTooZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnRhZ05hbWU9PSJMSSI/ZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlOmUudGFyZ2V0LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlKTsKICAgICAgICAgICAgICAgIGlmKHRhcmdldC50YWdOYW1lIT0iTEkiKXJldHVybjsKICAgICAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgICAgICAgICAgICAgIHVybDogImh0dHA6Ly9jYWNoZS52aWRlby5xaXlpLmNvbS9qcC92aS8iK3RhcmdldC5kYXRhc2V0LnZpZGVvbGlzdFR2aWQrIi8iK3RhcmdldC5kYXRhc2V0LnZpZGVvbGlzdFZpZCsiLz9jYWxsYmFjaz1jcmFja0lxaXlpIiwKICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JhY2tJcWl5aT1mdW5jdGlvbihkKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWY9ZC52dTsKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChyZXN1bHQucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0taXFpeWnliafpm4bnnJ/lrp7mkq3mlL7pobXpnaLmlrnms5UgIEVuZC0tLS0tLS0tLS0tLS0tLS0tLQogICAgICAgIH0KICAgICAgICBlbHNle2RvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3aWRnZXQtZHJhbWFzZXJpZXMnKS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGdldExpbmspO30KICAgIH0KCiAgICBpZih0b3AubG9jYXRpb249PWxvY2F0aW9uKXsvL+WPquWcqOmhtuWxgumhtemdoui/kOihjO+8jOWcqGlmcmFtZeS4reS4jei1t+S9nOeUqAogICAgICAgIHZhciBkaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgZGl2LmlkPSJUTWFuYXlzIjsKICAgICAgICB2YXIgdHh0PScnLGk9MDsKICAgICAgICBmb3IgKGkgaW4gYXBpcykgewogICAgICAgICAgICB0eHQgKz0nPGxpIGRhdGEtb3JkZXI9JytpKycgZGF0YS11cmw9IicrYXBpc1tpXS51cmwrJyIgdGl0bGU9IicrYXBpc1tpXS50aXRsZSsnIiBvbmNsaWNrPSJ3aW5kb3cub3Blbih0aGlzLmRhdGFzZXQudXJsK2xvY2F0aW9uLmhyZWYpIj4nK2FwaXNbaV0ubmFtZSsnPC9saT4nOwogICAgICAgIH0KICAgICAgICBkaXYuaW5uZXJIVE1MPSc8dWwgaWQ9InBhcnNlVWwiPicrCiAgICAgICAgICAgICc8bGkgY2xhc3M9IlRNMSI+PHNwYW4gaWQ9IlRNTGlzdCIgIHRpdGxlPSInK2RlZmF1bHRhcGkudGl0bGUrJyIgb25jbGljaz0id2luZG93Lm9wZW4oXCcnK2RlZmF1bHRhcGkudXJsKydcJyt3aW5kb3cubG9jYXRpb24uaHJlZikiPuKWtjwvc3Bhbj48dWwgY2xhc3M9IlRNMyBUTTQiPicrdHh0Kyc8L3VsPjwvbGk+JysKICAgICAgICAgICAgJzxsaSBjbGFzcz0iVE0xIj48c3BhbiBpZD0iVE1TZXQiPuKWozwvc3Bhbj48dWwgY2xhc3M9IlRNMyI+PGxpPjxsYWJlbD48aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJpblRhYkNoZWtieCI+5pys6aG16Kej5p6QPC9sYWJlbD48L2xpPjxsaT48bGFiZWw+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0icmVhbExpbmtDaGVrYngiPueIseWlh+iJuuato+ehrumAiembhjwvbGFiZWw+PC9saT48L3VsPjwvbGk+JysKICAgICAgICAgICAgJzwvdWw+JzsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7CiAgICAgICAgY29uc29sZS5sb2coZGl2LnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnRhZ05hbWUpOwogICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNpblRhYkNoZWtieCIpLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIixub05ld1RhYkNoZWNrLGZhbHNlKTsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjaW5UYWJDaGVrYngiKS5jaGVja2VkPXJlcGxhY2VSYXc7CiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI3JlYWxMaW5rQ2hla2J4IikuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLHJpZ2h0RXBzTGlua0NoZWNrLGZhbHNlKTsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjcmVhbExpbmtDaGVrYngiKS5jaGVja2VkPWVwaXNvZGVzOwoKICAgICAgICBpZihlcGlzb2RlcyAmJiB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCJpcWl5aSIpIT0tMSl7CiAgICAgICAgICAgIHJpZ2h0RXBzTGlua0NoZWNrKCk7CiAgICAgICAgfQogICAgICAgIGlmKHJlcGxhY2VSYXcgJiYgd2luZG93LmxvY2F0aW9uLnByb3RvY29sIT0iaHR0cHM6Iil7bm9OZXdUYWJDaGVjaygpO2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJUTVNldCIpLmNsaWNrKCk7fSAgICAvL2h0dHBz5ZKMaHR0cOmhtemdouS4jeiDvemVtuW1jOOAggogICAgfQp9KSgpOwoKLy8g6LWE5rqQ5Y+C6ICDaHR0cDovL3d3dy41aWZ4dy5jb20vdmlwLwovLyDotYTmupDlj4LogINodHRwOi8vbGl2ZS5nb3BhcnRvb2suY29tLwovLyDotYTmupDlj4LogINodHRwOi8vdHYuZHNxbmRoLmNvbQovLyDotYTmupDlj4LogINodHRwOi8vNTEucnV5by5uZXQvcC8zMTI3Lmh0bWwKLy/mnInmlYjmgKfmnKrnn6V8fOS4jeiDveebtOaOpeW8leeUqOaOpeWPowovL2h0dHA6Ly93d3cueXlkeTguY29tL2NvbW1vbi8/dXJsPQovL2hyZWY9Imh0dHA6Ly9tdDJ0LmNvbS95dW4/dXJsPQovL2h0dHBzOi8vYXBpLjQ3a3MuY29tL3dlYmNsb3VkLz92PQovL2h0dHA6Ly93d3cuZ3VxaWFua3VuLmNvbS90b29scy92aXB2aWRlbwovL+i/h+acn+aOpeWPowovL3sibmFtZSI6IjY1WVciLCJ1cmwiOiJodHRwOi8vd3d3LjY1eXcuY29tLzY1eXcvP3ZpZD0iLCJ0aXRsZSI6IuaWsOaOpeWPo++8jOeos+WumuaAp+acquefpSJ9LAovL3sibmFtZSI6Iue0q+eLkCIsInVybCI6Imh0dHA6Ly95dW4uemlodS50di9wbGF5Lmh0bWw/dXJsPSIsInRpdGxlIjoi5pWI5p6c5Y+v6IO95LiN56iz5a6aIn0sCi8veyJuYW1lIjoi5LqR6Kej5p6QIiwidXJsIjoiaHR0cDovL3d3dy5lZnVuZmlsbS5jb20veXVucGFyc2UvaW5kZXgucGhwP3VybD0iLCJ0aXRsZSI6IuaWsOaOpeWPo++8jOeos+WumuaAp+acquefpSJ9LAovL3sibmFtZSI6IuWmueWEv+S6kSIsInVybCI6Imh0dHBzOi8vd3d3Lnl5bWVpZXIuY29tL2FwaS5waHA/dXJsPSIsInRpdGxlIjoi5LiN56iz5a6aIn0KLy97Im5hbWUiOiJW5LqRW+iFvuiur10iLCJ1cmwiOiJodHRwOi8vd3d3LnZpeXVuLm1lL2ppZXhpLnBocD91cmw9IiwidGl0bGUiOiLohb7orq/pppbpgIkifSwKCi8vaHR0cHPljY/orq7pobXpnaLvvJpmaWxtLnNvaHUuY29t"},{"name":"论坛网盘链接免密提取","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_prototypes":true,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http*://www.52pojie.cn/forum*","http*://www.52pojie.cn/thread*","*://pan.baidu.com/share/init?*","http*://bbs.zhiyoo.com/forum.php*","http*://www.right.com.cn/forum/*","http*://bbs.ydss.cn/thread-*","http*://bbs.ydss.cn/forum.php?mod=*","http*://www.zdfans.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1503821392886,"data":{}},"enabled":true,"position":3,"file_url":"https://greasyfork.org/scripts/30883-%E8%AE%BA%E5%9D%9B%E7%BD%91%E7%9B%98%E9%93%BE%E6%8E%A5%E5%85%8D%E5%AF%86%E6%8F%90%E5%8F%96/code/%E8%AE%BA%E5%9D%9B%E7%BD%91%E7%9B%98%E9%93%BE%E6%8E%A5%E5%85%8D%E5%AF%86%E6%8F%90%E5%8F%96.user.js","uuid":"695b2c1b-5000-4c04-95b3-49c9c33b0a85","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIOiuuuWdm+e9keebmOmTvuaOpeWFjeWvhuaPkOWPlgovLyBAbmFtZXNwYWNlICAgaHR0cDovL3hodW50ZXIudmljcC5pbwovLyBAZGVzY3JpcHRpb24g5r+A5rS7572R55uY6ZO+5o6lLOWQjOaXtuiHquWKqOWhq+WGmeWvhueggSzmlK/mjIHnu53lpKflpJrmlbBEaXNjdXrorrrlnZssemQ0MjPnvZHnq5kKLy8gQGluY2x1ZGUgICAgIGh0dHAqOi8vd3d3LjUycG9qaWUuY24vZm9ydW0qCi8vIEBpbmNsdWRlICAgICBodHRwKjovL3d3dy41MnBvamllLmNuL3RocmVhZCoKLy8gQGluY2x1ZGUgICAgICo6Ly9wYW4uYmFpZHUuY29tL3NoYXJlL2luaXQ/KgovLyBAaW5jbHVkZSAgICAgaHR0cCo6Ly9iYnMuemhpeW9vLmNvbS9mb3J1bS5waHAqCi8vIEBpbmNsdWRlICAgICBodHRwKjovL3d3dy5yaWdodC5jb20uY24vZm9ydW0vKgovLyBAaW5jbHVkZSAgICAgaHR0cCo6Ly9iYnMueWRzcy5jbi90aHJlYWQtKgovLyBAaW5jbHVkZSAgICAgaHR0cCo6Ly9iYnMueWRzcy5jbi9mb3J1bS5waHA/bW9kPSoKLy8gQGluY2x1ZGUgICAgIGh0dHAqOi8vd3d3LnpkZmFucy5jb20vKgovLyBAdmVyc2lvbiAgICAgMS4wLjUKLy8gQGF1dGhvciAgICAgIGh1bnRlcgovLyBAcmVxdWlyZSAgICAgaHR0cDovL2Nkbi5ib290Y3NzLmNvbS9qcXVlcnkvMi4yLjQvanF1ZXJ5Lm1pbi5qcwovLyA9PS9Vc2VyU2NyaXB0PT0KKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gYWN0aXZpdGVMaW5rKCRkb20sIGxpbmtMaXN0KSB7CiAgICAgICAgdmFyIGRvY3UgPSAkZG9tLmh0bWwoKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmtMaXN0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGRvY3UgPSBkb2N1LnJlcGxhY2UobmV3IFJlZ0V4cChsaW5rTGlzdFtpXS51cmwrIig/PVteI10pIiwgImdtIiksIjxhIHRhcmdldD0nX2JsYW5rJyBjbGFzcz0nYnRuIGJ0bi11cmwnIGNvbG9yOmJsdWUnIGhyZWY9JyIgKyBsaW5rTGlzdFtpXS51cmwgKyAnIycgKyBsaW5rTGlzdFtpXS5wYXNzd29yZCArICInPuS4gOmUruaPkOWPljwvYT4gIik7CiAgICAgICAgfQogICAgICAgICRkb20uaHRtbChkb2N1KTsKICAgIH0KICAgIGZ1bmN0aW9uIExpbmsoKSB7CiAgICAgICAgdGhpcy51cmwgPSBudWxsOwogICAgICAgIHRoaXMucGFzc3dvcmQgPSBudWxsOwogICAgICAgIHRoaXMuYWRkTGluayA9IGZ1bmN0aW9uKGxpbmssIHBhc3N3b3JkKSB7CiAgICAgICAgICAgIHRoaXMudXJsID0gbGluazsKICAgICAgICAgICAgdGhpcy5wYXNzd29yZCA9IHBhc3N3b3JkOwogICAgICAgIH07CiAgICB9CiAgICB2YXIgbGlua0xpc3QgPSBuZXcgQXJyYXkoKTsKICAgIHZhciB1cmxFeHAgPSAvKCg/Omh0dHBzPzpcL1wvKT8oPzp5dW58cGFufGV5dW4pLmJhaWR1LmNvbVwvKD86c1wvXHcqfHNoYXJlXC9cdyopKS9nOwogICAgdmFyIGlzSW5TaGFyZVBhZ2UgPSBsb2NhdGlvbi5ocmVmLm1hdGNoKHVybEV4cCk7CiAgICBpZiAoaXNJblNoYXJlUGFnZSkgewogICAgICAgIGlzSW5TaGFyZVBhZ2UgPSBsb2NhdGlvbi5ocmVmOwogICAgICAgIHZhciBwYXNzd29yZCA9IGlzSW5TaGFyZVBhZ2UubWF0Y2gobmV3IFJlZ0V4cCgiKCNcXHd7NH0pJCIsICJnbSIpKTsKICAgICAgICAvL+aYr+WQpuaQuuW4puWvhueggQogICAgICAgIGlmKHBhc3N3b3JkID09IG51bGwpewogICAgICAgICAgICAkKCIjdGlwIikudGV4dCgi5rKh5pyJ5Zyo5LiK5LiL5paH5om+5Yiw5a+G56CBIik7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIC8v6L2s5Li65a2X56ym5LiyCiAgICAgICAgICAgIHBhc3N3b3JkICs9IiI7CiAgICAgICAgICAgIHBhc3N3b3JkID0gcGFzc3dvcmQuc3Vic3RyaW5nKDEpOyAKICAgICAgICAgICAgJCgiI2FjY2Vzc0NvZGUiKS52YWwocGFzc3dvcmQpOwogICAgICAgICAgICAkKCIuZy1idXR0b24tcmlnaHQgOmNvbnRhaW5zKCfmj5Dlj5bmlofku7YnKSIpLmNsaWNrKCk7CiAgICAgICAgfQoKICAgIH0gZWxzZSB7CiAgICAgICAgdmFyICRkb2NIVE1MID0gJCgiYm9keSIpLmh0bWwoKTsKICAgICAgICB2YXIgJGRvY1RleHQgPSAkKCJib2R5IikudGV4dCgpOwogICAgICAgIHZhciAkc2NyaXB0ID0gJCgic2NyaXB0Iik7CiAgICAgICAgdmFyIHJlZ1J1bGVMaW5rID0gIigoPzpodHRwcz86XFwvXFwvKT8oPzp5dW58cGFufGV5dW4pLmJhaWR1LmNvbVxcLyg/OnNcXC9cXHcqfHNoYXJlXFwvXFxTKlxcZCkoI1xcd3s0fSk/KSI7CiAgICAgICAgdmFyIHJlZ1NwbGl0ID0gIlxccyoo5a+GfOWvhueggXzmj5Dlj5bnoIF86K6/6Zeu56CBfOaPkOWPluWvhueggXzorr/pl67lr4bnoIEpKFxcc3xcXDp877yaKSoo5pys5biW6ZqQ6JeP55qE5YaF5a65KT8iOwogICAgICAgIHZhciByZWdSdWxlUHdkID0gIlxcd3s0fSI7CiAgICAgICAgdmFyIHJlZ1J1bGVUb3RhbCA9IHJlZ1J1bGVMaW5rICsiKCIrIHJlZ1NwbGl0ICsgcmVnUnVsZVB3ZCsiKT8iOwogICAgICAgIHZhciByZWdFeHAgPSBuZXcgUmVnRXhwKHJlZ1J1bGVUb3RhbCwgImdtIik7CiAgICAgICAgdmFyIHNoYXJlQXJyYXkgPSAkZG9jVGV4dC5tYXRjaChyZWdFeHApOwogICAgICAgIHZhciB1cmxBcnJheSA9IG5ldyBBcnJheSgpOwogICAgICAgIHZhciB1cmxFeHAgPSBuZXcgUmVnRXhwKHJlZ1J1bGVMaW5rLCAiZ20iKTsKICAgICAgICB2YXIgcHN3RXhwID0gbmV3IFJlZ0V4cChyZWdTcGxpdCArIHJlZ1J1bGVQd2QsICJnbSIpOwogICAgICAgIHZhciBwc3dBcnIgPSBuZXcgQXJyYXkoKTsKICAgICAgICBpZiAoc2hhcmVBcnJheSAhPSBudWxsKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hhcmVBcnJheS5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgaWYgKHVybEFycmF5LmluZGV4T2Yoc2hhcmVBcnJheVtpXS5tYXRjaCh1cmxFeHApWzBdKSA9PSAtMSkgewogICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gbmV3IExpbmsoKTsKICAgICAgICAgICAgICAgICAgICBsaW5rLnVybCA9IHNoYXJlQXJyYXlbaV0ubWF0Y2godXJsRXhwKVswXTsKICAgICAgICAgICAgICAgICAgICAvL+WIpOaWreaYr+WQpuacieWvhueggQogICAgICAgICAgICAgICAgICAgIGlmKHNoYXJlQXJyYXlbaV0ubWF0Y2gocHN3RXhwKSAhPSBudWxsKXsKICAgICAgICAgICAgICAgICAgICAgICAgbGluay5wYXNzd29yZCA9IHNoYXJlQXJyYXlbaV0ubWF0Y2gocHN3RXhwKVswXTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgbGluay5wYXNzd29yZCA9ICIiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBsaW5rTGlzdC5wdXNoKGxpbmspOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciBwc3dBcnJheSA9IG5ldyBBcnJheSgpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua0xpc3QubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIGxpbmsgPSBsaW5rTGlzdFtpXTsKICAgICAgICAgICAgaWYobGluay5wYXNzd29yZCE9IiIpewogICAgICAgICAgICAgICAgbGluay5wYXNzd29yZCA9IGxpbmsucGFzc3dvcmQubWF0Y2gobmV3IFJlZ0V4cChyZWdSdWxlUHdkLCAiZ20iKSlbMF07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgJCgiLnRfZiIpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFjdGl2aXRlTGluaygkKHRoaXMpLCBsaW5rTGlzdCk7CiAgICAgICAgfSk7CiAgICAgICAgJCgiLnJhdGwiKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICBhY3Rpdml0ZUxpbmsoJCh0aGlzKSwgbGlua0xpc3QpOwogICAgICAgIH0pOwogICAgICAgICQoIi5lbnRyeSIpLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFjdGl2aXRlTGluaygkKHRoaXMpLCBsaW5rTGlzdCk7CiAgICAgICAgfSk7CiAgICB9Cn0pKCk7"},{"name":"CNKI 中国知网 PDF 全文下载（特制版）","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http://image.cnki.net/*"],"orig_includes":["http://*.cnki.net/*","http://*.cnki.net.*/*","*/kns/brief/*","*/kns55/brief/*","*/grid2008/brief/*","*/detail/detail.aspx*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1503821505289,"data":{}},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/18842-cnki-%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91-pdf-%E5%85%A8%E6%96%87%E4%B8%8B%E8%BD%BD-%E7%89%B9%E5%88%B6%E7%89%88/code/CNKI%20%E4%B8%AD%E5%9B%BD%E7%9F%A5%E7%BD%91%20PDF%20%E5%85%A8%E6%96%87%E4%B8%8B%E8%BD%BD%EF%BC%88%E7%89%B9%E5%88%B6%E7%89%88%EF%BC%89.user.js","uuid":"af059119-6e2a-43e8-9e5a-3c5ef0b5107c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQGlkICAgICAgICAgICAgIENOS0ktUERGLVNwZWNpYWwKLy8gQG5hbWUgICAgICAgICAgIENOS0kg5Lit5Zu955+l572RIFBERiDlhajmlofkuIvovb3vvIjnibnliLbniYjvvIkKLy8gQHZlcnNpb24gICAgICAgIDMuMi4wLjIwMTcwMjEwCi8vIEBuYW1lc3BhY2UgICAgICBodHRwOi8veXVlbG9uZy5pbmZvCi8vIEBhdXRob3IgICAgICAgICBZVUUgTG9uZwovLyBAZGVzY3JpcHRpb24gICAg5Y+C6KeBIGh0dHA6Ly9ibG9nLnl1ZWxvbmcuaW5mby9wb3N0L2Nua2ktcGRmLWpzLmh0bWwKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly8qLmNua2kubmV0LyoKLy8gQGluY2x1ZGUgICAgICAgIGh0dHA6Ly8qLmNua2kubmV0LiovKgovLyBAZXhjbHVkZSAgICAgICAgaHR0cDovL2ltYWdlLmNua2kubmV0LyoKLy8gQGluY2x1ZGUgICAgICAgICova25zL2JyaWVmLyoKLy8gQGluY2x1ZGUgICAgICAgICova25zNTUvYnJpZWYvKgovLyBAaW5jbHVkZSAgICAgICAgKi9ncmlkMjAwOC9icmllZi8qCi8vIEBpbmNsdWRlICAgICAgICAqL2RldGFpbC9kZXRhaWwuYXNweCoKLy8gQHJ1bi1hdCAgICAgICAgIGRvY3VtZW50LWlkbGUKLy8gQGdyYW50ICAgICAgICAgIG5vbmUKLy8gQHN1cHBvcnRVUkwgICAgIGh0dHA6Ly9ibG9nLnl1ZWxvbmcuaW5mby9wb3N0L2Nua2ktcGRmLWpzLmh0bWwKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgYWxsTGlzLCB0aGlzTGksIG5ld0xpLCBhUERGLCBiUERGLCBhbGxMaW5rcywgdGhpc0xpbmssIHBhZ2VUeXBlLCBwZlR5cGUsIG15dXJsLCBpOwp2YXIgcGFnZVR5cGUgPSB0cnVlOwp2YXIgcGZUeXBlID0gdHJ1ZTsKdmFyIG15dXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CgphbGxMaW5rcyA9IGRvY3VtZW50LmV2YWx1YXRlKAogICAgJy8vYVtAaHJlZl0nLAogICAgZG9jdW1lbnQsCiAgICBudWxsLAogICAgWFBhdGhSZXN1bHQuVU5PUkRFUkVEX05PREVfU05BUFNIT1RfVFlQRSwKICAgIG51bGwpOwoKYWxsTGlzID0gZG9jdW1lbnQuZXZhbHVhdGUoCiAgICAiLy9saVtAY2xhc3NdIiwKICAgIGRvY3VtZW50LAogICAgbnVsbCwKICAgIFhQYXRoUmVzdWx0LlVOT1JERVJFRF9OT0RFX1NOQVBTSE9UX1RZUEUsCiAgICBudWxsKTsKCmlmIChteXVybC5pbmRleE9mKCJkZXRhaWwuYXNweCIpICE9IC0xKSB7CiAgICBwYWdlVHlwZSA9IGZhbHNlOwp9IC8vZmFsc2Ug5Li66K+m5oOF6aG16Z2iCmlmIChkb2N1bWVudC50aXRsZS5pbmRleE9mKCIgLSDkuK3lm73nn6XnvZEiKSAhPSAtMSkgewogICAgcGZUeXBlID0gZmFsc2U7Cn0gLy9mYWxzZSDkuLrmlrDlubPlj7AKCmlmICgocGZUeXBlID09PSB0cnVlKSAmIChwYWdlVHlwZSA9PT0gZmFsc2UpKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbExpcy5zbmFwc2hvdExlbmd0aDsgaSsrKSB7CiAgICAgICAgdGhpc0xpID0gYWxsTGlzLnNuYXBzaG90SXRlbShpKTsKICAgICAgICBpZiAodGhpc0xpLmdldEF0dHJpYnV0ZSgiY2xhc3MiKS5pbmRleE9mKCJyZWFkb2wiKSAhPSAtMSkgewogICAgICAgICAgICBuZXdMaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICAgICAgICAgIG5ld0xpLnNldEF0dHJpYnV0ZSgiY2xhc3MiLCAicGRmIik7CiAgICAgICAgICAgIGFQREYgPSAnPGEgdGFyZ2V0PSJfYmxhbmsiIGhyZWY9IicgKyB0aGlzTGkuZmlyc3RDaGlsZC5ocmVmLnJlcGxhY2UoIiZkZmxhZz1yZWFkb25saW5lIiwgIiZkZmxhZz1wZGZkb3duIikgKyAnIj5QREbkuIvovb08L2E+JzsKICAgICAgICAgICAgbmV3TGkuaW5uZXJIVE1MID0gYVBERjsKICAgICAgICAgICAgdGhpc0xpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld0xpLCB0aGlzTGkubmV4dFNpYmxpbmcpOwogICAgICAgIH0KICAgIH0KfQoKaWYgKChwZlR5cGUgPT09IGZhbHNlKSAmIChwYWdlVHlwZSA9PT0gZmFsc2UpKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbExpbmtzLnNuYXBzaG90TGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzTGluayA9IGFsbExpbmtzLnNuYXBzaG90SXRlbShpKTsKICAgICAgICBpZiAodGhpc0xpbmsuaHJlZiAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoImRvd25sb2FkLmFzcHg/ZmlsZW5hbWU9IikgIT0gLTEgJiYgdGhpc0xpbmsuaW5uZXJIVE1MLmluZGV4T2YoIuaVtOacrCIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmlubmVySFRNTCA9IHRoaXNMaW5rLmlubmVySFRNTC5yZXBsYWNlKCLmlbTmnKwiLCAiQ0FKIik7CiAgICAgICAgICAgIGJQREYgPSB0aGlzTGluay5ocmVmOwogICAgICAgIH0KICAgICAgICBpZiAodGhpc0xpbmsuaHJlZiAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoImRvd25sb2FkLmFzcHg/ZmlsZW5hbWU9IikgIT0gLTEgJiYgdGhpc0xpbmsuaW5uZXJIVE1MLmluZGV4T2YoIuWIhumhtSIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmlubmVySFRNTCA9IHRoaXNMaW5rLmlubmVySFRNTC5yZXBsYWNlKCLliIbpobUiLCAiUERGIik7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSBiUERGLnJlcGxhY2UoIm5oZG93biIsICJwZGZkb3duIik7CiAgICAgICAgfQogICAgfQp9CgppZiAocGFnZVR5cGUgPT09IHRydWUpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsTGlua3Muc25hcHNob3RMZW5ndGg7IGkrKykgewogICAgICAgIHRoaXNMaW5rID0gYWxsTGlua3Muc25hcHNob3RJdGVtKGkpOwogICAgICAgIGlmICh0aGlzTGluay5ocmVmICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiZG93bmxvYWQuYXNweD9maWxlbmFtZT0iKSAhPSAtMSAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoIiZkZmxhZyIpID09IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSB0aGlzTGluay5ocmVmICsgIiZkZmxhZz1wZGZkb3duIjsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXNMaW5rLmhyZWYgJiYgdGhpc0xpbmsuaHJlZi5pbmRleE9mKCJkb3dubG9hZC5hc3B4P2ZpbGVuYW1lPSIpICE9IC0xICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiJmRmbGFnPW5oZG93biIpICE9IC0xKSB7CiAgICAgICAgICAgIHRoaXNMaW5rLmhyZWYgPSB0aGlzTGluay5ocmVmLnJlcGxhY2UoIm5oZG93biIsICJwZGZkb3duIik7CiAgICAgICAgfQogICAgICAgIGlmICh0aGlzTGluay5ocmVmICYmIHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiZG93bmxvYWQuYXNweD9maWxlbmFtZT0iKSAhPSAtMSAmJiB0aGlzTGluay5ocmVmLmluZGV4T2YoIiZkZmxhZz1wZGZkb3duIikgIT0gLTEgJiYgKHRoaXNMaW5rLmhyZWYuaW5kZXhPZigiPUNNRkQiKSAhPSAtMSB8fCB0aGlzTGluay5ocmVmLmluZGV4T2YoIj1DREZEIikgIT0gLTEgKSkgewogICAgICAgICAgICB0aGlzTGluay5ocmVmID0gdGhpc0xpbmsuaHJlZi5yZXBsYWNlKCJwZGZkb3duIiwgIm5oZG93biIpOwogICAgICAgIH0KICAgIH0KfQ=="},{"name":"斗鱼熊猫工具箱","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.douyu.com/*","*://*.panda.tv/*","*://*.zhanqi.tv/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"danmu_state":"n1","dmbgcolor":"n0","dmimage":"n1","dmop":"s8","dmpos":"s0","dmspeed":"s15","dmthrough":"n1","fontsize":"s14px","userfilter":"s"},"ts":1506694665833},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/29026-%E6%96%97%E9%B1%BC%E7%86%8A%E7%8C%AB%E5%B7%A5%E5%85%B7%E7%AE%B1/code/%E6%96%97%E9%B1%BC%E7%86%8A%E7%8C%AB%E5%B7%A5%E5%85%B7%E7%AE%B1.user.js","uuid":"0e6be8ba-aab3-47b5-8d57-a4ca243397cb","source":""},{"name":"视频站启用html5播放器","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["http://tv.cctv.com/live/*","https://www.panda.tv/"],"orig_includes":["*://pan.baidu.com/*","*://v.qq.com/*","*://film.qq.com/*","*://view.inews.qq.com/*","*://news.qq.com/*","*://v.youku.com/v_show/id_*","*://video.tudou.com/v/*","*://v.163.com/*.html*","*://ent.163.com/*.html*","*://news.163.com/*.html*","*://news.163.com/special/*","*://study.163.com/course/*.htm?courseId=*","*://news.sina.com.cn/*","*://video.sina.com.cn/*","*://video.sina.cn/*","*://weibo.com/*","*://www.weibo.com/*","*://*.le.com/*.html*","*://*.lesports.com/*.html*","*://tv.sohu.com/*.shtml*","*://*.tv.sohu.com/*.shtml*","*://film.sohu.com/album/*","*://www.fun.tv/vplay/*","*://m.fun.tv/*","https://www.panda.tv/*","https://*.zhanqi.tv/*","*://*.longzhu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1503821716460,"data":{}},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/30545-%E8%A7%86%E9%A2%91%E7%AB%99%E5%90%AF%E7%94%A8html5%E6%92%AD%E6%94%BE%E5%99%A8/code/%E8%A7%86%E9%A2%91%E7%AB%99%E5%90%AF%E7%94%A8html5%E6%92%AD%E6%94%BE%E5%99%A8.user.js","uuid":"1ef81520-5952-414d-a6b8-5aa2df39be9e","source":""},{"name":"Bypass Wait, Code & Login on Websites","options":{"awareOfChrome":true,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_prototypes":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["down.lepan.cc","music.baidu.com","yinyueyun.baidu.com","media.store.kugou.com","trackercdn.kugou.com","yinyuetai.com","itwusun.com","self"],"orig_excludes":[],"orig_includes":["http://localhost.cuwcl4c/*","http://jixunmoe.github.io/*","http://123564.com/*","http://m.123564.com/*","http://5xfile.com/*","http://www.5xfile.com/*","http://yun.baidu.com/*","http://pan.baidu.com/*","http://howfile.com/*","http://*.howfile.com/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://namipan.cc/*","http://*.namipan.cc/*","http://10pan.cc/*","http://*.10pan.cc/*","http://66yp.cc/*","http://*.66yp.cc/*","http://123wzwp.com/*","http://*.123wzwp.com/*","http://hiyp.cc/*","http://*.hiyp.cc/*","http://jkpan.cc/*","http://*.jkpan.cc/*","http://webhd.xuite.net/*","http://sync.hamicloud.net/*","http://www.yimuhe.com/*","http://douban.fm/*","https://douban.fm/*","http://moe.fm/*","http://music.163.com/*","https://music.163.com/*","http://www.1ting.com/*","http://www.23356.com/*","http://www.app-echo.com/*","http://web.kugou.com/*","https://jixunmoe.github.io/cuwcl4c/config/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1504441455473,"data":{}},"enabled":true,"position":7,"file_url":"https://greasyfork.org/scripts/2600-%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85-%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95/code/%E8%B7%B3%E8%BF%87%E7%BD%91%E7%AB%99%E7%AD%89%E5%BE%85%E3%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%8F%8A%E7%99%BB%E5%BD%95.user.js","uuid":"c5bc3037-c54a-49dc-801f-5f354dbc2c7a","source":""},{"name":"贴吧全能助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://tieba.baidu.com/f/fdir*","*://tieba.baidu.com/f/search*"],"orig_includes":["*://tieba.baidu.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-body","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"confVer":"s[1]","definedEvent":"sclick,click,1,0,1","modules":"s{}","repairDefinedEvent":"bfalse"},"ts":1506141041454},"enabled":true,"position":8,"file_url":"https://greasyfork.org/scripts/26992-%E8%B4%B4%E5%90%A7%E5%85%A8%E8%83%BD%E5%8A%A9%E6%89%8B/code/%E8%B4%B4%E5%90%A7%E5%85%A8%E8%83%BD%E5%8A%A9%E6%89%8B.user.js","uuid":"8c01ffd9-7144-4866-b678-239edb872197","source":""},{"name":"百度云插件+APIKey","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/(pan|yun)\\.baidu\\.com.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1504444744864,"data":{}},"enabled":true,"position":9,"file_url":"https://greasyfork.org/scripts/496-%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6-apikey/code/%E7%99%BE%E5%BA%A6%E4%BA%91%E6%8F%92%E4%BB%B6+APIKey.user.js","uuid":"d74712b4-f0c6-4bc4-93ce-fcdb30e18d83","source":""},{"name":"网盘提取工具","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://*/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1506738267345,"data":{}},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/18733-%E7%BD%91%E7%9B%98%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7/code/%E7%BD%91%E7%9B%98%E6%8F%90%E5%8F%96%E5%B7%A5%E5%85%B7.user.js","uuid":"3da30420-c0eb-406e-a3fb-dc2977b0f17e","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnvZHnm5jmj5Dlj5blt6XlhbcKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vd3d3LmZpc2hsZWUubmV0LwovLyBAdmVyc2lvbiAgICAgIDIuNgovLyBAZGVzY3JpcHRpb24gIOWwveWPr+iDveWcqOaUr+aMgeeahOe9keebmOiHquWKqOi+k+WFpeaPkOWPluegge+8jOecgeWOu+S4i+i9veeahOeDpuaBvOOAggovLyBAYXV0aG9yICAgICAgIOacqOmxvChpRmlzaCkKLy8gQG1hdGNoICAgICAgICAqOi8vKi8qCi8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vIEBpY29uICAgICAgICAgaHR0cHM6Ly9zc2wtc3RhdGljLmZpc2hsZWUubmV0L3Jlc291cmNlcy9lbW90L3hyLzIyLmdpZgovLyA9PS9Vc2VyU2NyaXB0PT0KKGZ1bmN0aW9uKHdpbmRvdywgc2VsZiwgdW5zYWZlV2luZG93KSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgdGltZVN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICB2YXIgbG9jYXRpb24gPSBzZWxmLmxvY2F0aW9uOwogICAgdmFyIGhvc3QgPSBsb2NhdGlvbi5ob3N0OwogICAgdmFyIHBhdGggPSBsb2NhdGlvbi5wYXRobmFtZTsKICAgIHZhciBjb2RlLCBpbnB1dDsKICAgIHZhciBnZXRDb2RlID0gZnVuY3Rpb24ocnVsZSkgewogICAgICAgIGNvZGUgPSBsb2NhdGlvbi5oYXNoLnNsaWNlKDEsIDUpOwogICAgICAgIGlmICgocnVsZSB8fCAvKFthLXpcZF17NH0pL2kuZXhlYyhjb2RlKSkpIHsKICAgICAgICAgICAgY29kZSA9IFJlZ0V4cC4kMTsKICAgICAgICB9IGVsc2UgY29kZSA9IG51bGw7CiAgICAgICAgcmV0dXJuIGNvZGU7CiAgICB9OwogICAgaWYgKC8ocGFufGU/eXVuKVwuYmFpZHVcLmNvbS8udGVzdChob3N0KSkgewogICAgICAgIC8v55m+5bqm5LqR55uYCiAgICAgICAgaWYgKHBhdGguaW5kZXhPZigiL3NoYXJlLyIpICE9PSAtMSAmJiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYWNjZXNzQ29kZSIpICYmIGdldENvZGUoKSkgewogICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYWNjZXNzQ29kZSIpLnZhbHVlID0gY29kZTsKICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN1Ym1pdEJ0biIpLmNsaWNrKCk7CiAgICAgICAgfQogICAgfSBlbHNlIGlmICgvXi4qXC55dW5wYW5cLmNuJC9pLnRlc3QoaG9zdCkpIHsKICAgICAgICAvLzM2MOS6keebmAogICAgICAgIGlmIChzZWxmLmxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoIi9say8iKSAhPT0gLTEpIHsKICAgICAgICAgICAgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJpbnB1dC5wd2QtaW5wdXQiKTsKICAgICAgICAgICAgaWYgKGdldENvZGUoKSAmJiBpbnB1dCkgewogICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSBjb2RlOwogICAgICAgICAgICAgICAgaW5wdXQubmV4dEVsZW1lbnRTaWJsaW5nLmNsaWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9IGVsc2UgewogICAgICAgIC8v5YW25a6D572R56uZ77yM5qOA5rWL6ZO+5o6lCiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgiYVtocmVmKj0ncGFuLmJhaWR1LmNvbSddLCBhW2hyZWYqPSd5dW5wYW4uY24nXSwgYVtocmVmKj0ndmRpc2sud2VpYm8uY29tJ10iKSkuZm9yRWFjaChmdW5jdGlvbihsaW5rKSB7CiAgICAgICAgICAgIHZhciB0eHQgPSBsaW5rLm5leHRTaWJsaW5nICYmIGxpbmsubmV4dFNpYmxpbmcubm9kZVZhbHVlOwogICAgICAgICAgICB2YXIgbGlua2NvZGUgPSAv56CBLio/KFthLXpcZF17NH0pL2kuZXhlYyh0eHQpICYmIFJlZ0V4cC4kMTsKICAgICAgICAgICAgaWYgKCFsaW5rY29kZSkgewogICAgICAgICAgICAgICAgdHh0ID0gbGluay5wYXJlbnROb2RlLmlubmVyVGV4dDsKICAgICAgICAgICAgICAgIGxpbmtjb2RlID0gL+eggS4qPyhbYS16XGRdezR9KS9pLmV4ZWModHh0KSAmJiBSZWdFeHAuJDE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGxpbmtjb2RlKSB7CiAgICAgICAgICAgICAgICB2YXIgaHJlZiA9IGxpbmsuZ2V0QXR0cmlidXRlKCJocmVmIik7CiAgICAgICAgICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgiaHJlZiIsIGhyZWYgKyAiIyIgKyBsaW5rY29kZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIHZhciB0aW1lRW5kID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICBjb25zb2xlLmxvZygiW+e9keebmOaPkOWPluW3peWFt10g6ZO+5o6l5aSE55CG5a6M5oiQ77yM6ICX5pe277yaIiArICh0aW1lRW5kIC0gdGltZVN0YXJ0KSArICLmr6vnp5IuIOWkhOeQhuaooeW8j++8mkRPTeWkhOeQhiIpOwp9KSh3aW5kb3csIHdpbmRvdy5zZWxmLCB1bnNhZmVXaW5kb3cpOwooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvL2NvbnN0cy4uLgogICAgdmFyIENPREVfUlVMRV9CQUlEVSA9IC9eKFthLXpcZF17NH0pJC9pOwogICAgdmFyIENPREVfUlVMRV9ZVU5QQU4gPSAvXihbYS16XGRdezR9KSQvaTsKICAgIHZhciBNQVhfU0VBUkNIX0NPREVfUkFOR0UgPSA1OwogICAgLy9mdW5jdGlvbnMuLi4KICAgIHZhciB0ZXh0Tm9kZXNVbmRlciA9IGZ1bmN0aW9uKGVsKSB7CiAgICAgICAgdmFyIG4sIGEgPSBbXSwKICAgICAgICAgICAgd2FsayA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoZWwsIE5vZGVGaWx0ZXIuU0hPV19URVhULCBudWxsLCBmYWxzZSk7CiAgICAgICAgd2hpbGUgKChuID0gd2Fsay5uZXh0Tm9kZSgpKSkgewogICAgICAgICAgICBpZiAobi5ub2RlTmFtZSA9PT0gJyN0ZXh0JykKICAgICAgICAgICAgICAgIGEucHVzaChuKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGE7CiAgICB9OwogICAgdmFyIGdlbmVyYWxMaW5raWZ5VGV4dCA9IGZ1bmN0aW9uKHRleHQsIGVsZXMsIGluZGV4LCB0ZXN0UmVnLCB2YWxpZGF0ZVJ1bGUpIHsKICAgICAgICB2YXIgbG9vcENvdW50ID0gMCwKICAgICAgICAgICAgb3JpZ2luYWxUZXh0LCBjb2RlLCBtYXRjaCwgdXJsLAogICAgICAgICAgICBsaW5raWZpZWRUZXh0ID0gdGV4dDsKICAgICAgICB3aGlsZSAoKG1hdGNoID0gdGVzdFJlZy5leGVjKHRleHQpKSkgewogICAgICAgICAgICBsb29wQ291bnQrKzsKICAgICAgICAgICAgdXJsID0gKG1hdGNoWzFdIHx8ICJodHRwOi8vIikgKyBtYXRjaFsyXTsKICAgICAgICAgICAgb3JpZ2luYWxUZXh0ID0gKG1hdGNoWzFdIHx8ICIiKSArIG1hdGNoWzJdOwogICAgICAgICAgICBjb2RlID0gbWF0Y2hbM10gfHwgZmluZENvZGVGcm9tRWxlbWVudHMoZWxlcywgaW5kZXgsIHZhbGlkYXRlUnVsZSkgfHwgIiI7CiAgICAgICAgICAgIGlmICghY29kZSkKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICBjb25zb2xlLmxvZygiW+e9keebmOaPkOWPluW3peWFt10g5bey5aSE55CG572R55uY5Zyw5Z2A77yMVVJMPSIgKyB1cmwgKyAi77yM5o+Q5Y+W56CBPSIgKyBjb2RlICsgIuaooeW8j++8mlRFWFROT0RFIik7CiAgICAgICAgICAgIC8vZml4IGRvdWJsZSAjCiAgICAgICAgICAgIHVybCA9IHVybC5zcGxpdCgnIycpWzBdOwogICAgICAgICAgICBsaW5raWZpZWRUZXh0ID0gbGlua2lmaWVkVGV4dC5yZXBsYWNlKG9yaWdpbmFsVGV4dCwgIjxhIGhyZWY9JyIgKyB1cmwgKyAiIyIgKyBjb2RlICsgIicgdGFyZ2V0PSdfYmxhbmsnPiIgKyB1cmwgKyAnPC9hPicpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gW2xvb3BDb3VudCwgbGlua2lmaWVkVGV4dF07CiAgICB9OwogICAgdmFyIGxpbmtpZnlUZXh0QmxvY2tCYWlkdSA9IGZ1bmN0aW9uKHRleHQsIGVsZXMsIGluZGV4KSB7CiAgICAgICAgcmV0dXJuIGdlbmVyYWxMaW5raWZ5VGV4dCh0ZXh0LCBlbGVzLCBpbmRleCwgLyhodHRwcz86XC9cLyk/KCg/OnBhbnxlP3l1bilcLmJhaWR1XC5jb21cL3NcLyg/OlthLXpcZF0rKSg/OiNbYS16XGQtX10qKT8pKD86Lio/56CBLio/KFthLXpcZF0rKSk/L2dpLCBDT0RFX1JVTEVfQkFJRFUpOwogICAgfTsKICAgIC8vdmFyIGxpbmtpZnlUZXh0QmxvY2tZdW5wYW4gPSBmdW5jdGlvbih0ZXh0LCBlbGVzLCBpbmRleCkgewogICAgLy8gICAgcmV0dXJuIGdlbmVyYWxMaW5raWZ5VGV4dCh0ZXh0LCBlbGVzLCBpbmRleCwgLyhodHRwcz86XC9cLyk/KHl1bnBhblwuY25cLyg/OlthLXpcZF0rKSkoPzouKj/noIEuKj8oW2EtelxkXSspKT8vZ2ksIENPREVfUlVMRV9ZVU5QQU4pOwogICAgLy99OwogICAgdmFyIGZpbmRDb2RlRnJvbUVsZW1lbnRzID0gZnVuY3Rpb24oZWxlcywgaW5kZXgsIHJ1bGUpIHsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE1BWF9TRUFSQ0hfQ09ERV9SQU5HRSAmJiBpIDwgZWxlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgdHh0ID0gZWxlc1tpICsgaW5kZXhdLnRleHRDb250ZW50OwogICAgICAgICAgICB2YXIgY29kZVJlZyA9IC/noIEuKj8oW2EtelxkXSspL2dpOwogICAgICAgICAgICB2YXIgY29kZU1hdGNoID0gY29kZVJlZy5leGVjKHR4dCkgJiYgUmVnRXhwLiQxOwogICAgICAgICAgICBpZiAoIWNvZGVNYXRjaCkgY29udGludWU7CiAgICAgICAgICAgIHZhciBsaW5rVGVzdFJlZyA9IC8oaHR0cHM/OnxcLihuZXR8Y258Y29tfGdvdnxjY3xtZSkpL2dpOwogICAgICAgICAgICBpZiAobGlua1Rlc3RSZWcuZXhlYyh0eHQpICYmIGxpbmtUZXN0UmVnLmxhc3RJbmRleCA8PSBjb2RlUmVnLmxhc3RJbmRleCkgewogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKHJ1bGUudGVzdChjb2RlTWF0Y2gpKSByZXR1cm4gY29kZU1hdGNoOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVsbDsKICAgIH07CiAgICB2YXIgbGlua2lmeSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHZhciBlbGVzID0gdGV4dE5vZGVzVW5kZXIoZG9jdW1lbnQuYm9keSk7CiAgICAgICAgdmFyIGVsZSwgdHh0LCBsb29wQ291bnQ7CiAgICAgICAgdmFyIHByb2Nlc3NvciA9IFsKICAgICAgICAgICAgbGlua2lmeVRleHRCbG9ja0JhaWR1CiAgICAgICAgXTsKICAgICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbihmdW4pIHsKICAgICAgICAgICAgdmFyIGRhdGEgPSBmdW4odHh0LCBlbGVzLCBpICsgMSk7CiAgICAgICAgICAgIGxvb3BDb3VudCArPSBkYXRhWzBdOwogICAgICAgICAgICB0eHQgPSBkYXRhWzFdOwogICAgICAgIH07CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGVsZSA9IGVsZXNbaV07CiAgICAgICAgICAgIGlmIChlbGUucGFyZW50Tm9kZS50YWdOYW1lID09ICdhJykgY29udGludWU7CiAgICAgICAgICAgIHR4dCA9IGVsZS50ZXh0Q29udGVudDsKICAgICAgICAgICAgbG9vcENvdW50ID0gMDsKICAgICAgICAgICAgcHJvY2Vzc29yLmZvckVhY2goY2FsbGJhY2spOwogICAgICAgICAgICBpZiAobG9vcENvdW50ID4gMCkgewogICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzcGFuIik7CiAgICAgICAgICAgICAgICBzcGFuLmlubmVySFRNTCA9IHR4dDsKICAgICAgICAgICAgICAgIGVsZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChzcGFuLCBlbGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKICAgIHZhciB0aW1lU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgIGxpbmtpZnkoKTsKICAgIHZhciB0aW1lRW5kID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7CiAgICBjb25zb2xlLmxvZygiW+e9keebmOaPkOWPluW3peWFt10g6ZO+5o6l5aSE55CG5a6M5oiQ77yM6ICX5pe277yaIiArICh0aW1lRW5kIC0gdGltZVN0YXJ0KSArICLmr6vnp5IuIOWkhOeQhuaooeW8j++8mlRFWFROT0RF5aSE55CGIik7Cn0pKCk7"},{"name":"百度网盘直接下载助手","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link*","*://yun.baidu.com/share/link*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1506738275851,"data":{}},"enabled":true,"position":11,"file_url":"https://greasyfork.org/scripts/23635-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B.user.js","uuid":"957116ad-7d02-4fdd-83a3-f2c38d45aa74","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnmb7luqbnvZHnm5jnm7TmjqXkuIvovb3liqnmiYsKLy8gQG5hbWVzcGFjZSAgICB1bmRlZmluZWQKLy8gQHZlcnNpb24gICAgICAwLjkuMjQKLy8gQGRlc2NyaXB0aW9uICDnm7TmjqXkuIvovb3nmb7luqbnvZHnm5jlkoznmb7luqbnvZHnm5jliIbkuqvnmoTmlofku7Ys6YG/5YWN5LiL6L295paH5Lu25pe26LCD55So55m+5bqm572R55uY5a6i5oi356uvLOiOt+WPlue9keebmOaWh+S7tueahOebtOaOpeS4i+i9veWcsOWdgAovLyBAYXV0aG9yICAgICAgIGl2ZXNqYXkKLy8gQG1hdGNoICAgICAgICAqOi8vcGFuLmJhaWR1LmNvbS9kaXNrL2hvbWUqCi8vIEBtYXRjaCAgICAgICAgKjovL3l1bi5iYWlkdS5jb20vZGlzay9ob21lKgovLyBAbWF0Y2ggICAgICAgICo6Ly9wYW4uYmFpZHUuY29tL3MvKgovLyBAbWF0Y2ggICAgICAgICo6Ly95dW4uYmFpZHUuY29tL3MvKgovLyBAbWF0Y2ggICAgICAgICo6Ly9wYW4uYmFpZHUuY29tL3NoYXJlL2xpbmsqCi8vIEBtYXRjaCAgICAgICAgKjovL3l1bi5iYWlkdS5jb20vc2hhcmUvbGluayoKLy8gQHJlcXVpcmUgICAgICBodHRwczovL2NvZGUuanF1ZXJ5LmNvbS9qcXVlcnktbGF0ZXN0LmpzCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gQGdyYW50ICAgICAgICB1bnNhZmVXaW5kb3cKLy8gQGdyYW50ICAgICAgICBHTV9zZXRDbGlwYm9hcmQKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CgogICAgdmFyICQgPSAkIHx8IHdpbmRvdy4kOwogICAgdmFyIGxvZ19jb3VudCA9IDE7CiAgICB2YXIgd29yZE1hcEh0dHAgPSB7CiAgICAgICAgJ2xpc3QtZ3JpZC1zd2l0Y2gnOid5dmdiOVhKJywKICAgICAgICAnbGlzdC1zd2l0Y2hlZC1vbic6J2tzYlhabScsCiAgICAgICAgJ2dyaWQtc3dpdGNoZWQtb24nOid0Y2g2VzI1JywKICAgICAgICAnbGlzdC1zd2l0Y2gnOidscmJvOWEnLAogICAgICAgICdncmlkLXN3aXRjaCc6J3hoNnBvTCcsCiAgICAgICAgJ2NoZWNrYm94JzonRU9HZXhmJywKICAgICAgICAnY29sLWl0ZW0nOidReHlmdmcnLAogICAgICAgICdjaGVjayc6J2Z5ZEdOQycsCiAgICAgICAgJ2NoZWNrZWQnOidFenViR2cnLAogICAgICAgICdsaXN0LXZpZXcnOid2ZEFmS01iJywKICAgICAgICAnaXRlbS1hY3RpdmUnOiduZ2I5TzYnLAogICAgICAgICdncmlkLXZpZXcnOidKS3ZISk1iJywKICAgICAgICAnYmFyLXNlYXJjaCc6J09GYVBhTycsCiAgICAgICAgJ2RlZmF1bHQtZG9tJzoneHBYMlBWJywKICAgICAgICAnYmFyJzoncXhuWDJHNScsCiAgICAgICAgJ2xpc3QtdG9vbHMnOidRRERPUUInCiAgICB9OwogICAgdmFyIHdvcmRNYXBIdHRwcyA9IHsKICAgICAgICAnbGlzdC1ncmlkLXN3aXRjaCc6J3FvYm1YQjFxJywKICAgICAgICAnbGlzdC1zd2l0Y2hlZC1vbic6J2V3WG0xZScsCiAgICAgICAgJ2dyaWQtc3dpdGNoZWQtb24nOidreGhrWDJFbScsCiAgICAgICAgJ2xpc3Qtc3dpdGNoJzoncnZwWG02MycsCiAgICAgICAgJ2dyaWQtc3dpdGNoJzonbXhnZEpnd3YnLAogICAgICAgICdjaGVja2JveCc6J0VPR2V4ZicsCiAgICAgICAgJ2NvbC1pdGVtJzonUXh5ZnZnJywKICAgICAgICAnY2hlY2snOidmeWRHTkMnLAogICAgICAgICdjaGVja2VkJzonRXp1YkdnJywKICAgICAgICAnbGlzdC12aWV3JzondmRBZktNYicsCiAgICAgICAgJ2l0ZW0tYWN0aXZlJzoncGNhbVhCUlgnLAogICAgICAgICdncmlkLXZpZXcnOidKS3ZISk1iJywKICAgICAgICAnYmFyLXNlYXJjaCc6J09GYVBhTycsCiAgICAgICAgJ2RlZmF1bHQtZG9tJzonbnl6dEpxV0UnLAogICAgICAgICdiYXInOidta3NlSnFLUScsCiAgICAgICAgJ2xpc3QtdG9vbHMnOidRRERPUUInCiAgICB9OwogICAgdmFyIHdvcmRNYXAgPSBsb2NhdGlvbi5wcm90b2NvbCA9PSAnaHR0cDonID8gd29yZE1hcEh0dHAgOiB3b3JkTWFwSHR0cHM7CiAgICAKICAgIC8vY29uc29sZS5sb2cod29yZE1hcCk7CgogICAgZnVuY3Rpb24gc2xvZyhjMSxjMixjMyl7CiAgICAgICAgYzEgPSBjMT9jMTonJzsKICAgICAgICBjMiA9IGMyP2MyOicnOwogICAgICAgIGMzID0gYzM/YzM6Jyc7CiAgICAgICAgY29uc29sZS5sb2coJyMnKyBsb2dfY291bnQrKyArJy1CYWlEdU5ldGRpc2tIZWxwZXItbG9nOicsYzEsYzIsYzMpOwogICAgfQoKICAgICQoZnVuY3Rpb24oKXsKICAgICAgICBzd2l0Y2goZGV0ZWN0UGFnZSgpKXsKICAgICAgICAgICAgY2FzZSAnZGlzayc6CiAgICAgICAgICAgICAgICB2YXIgcGFuSGVscGVyID0gbmV3IFBhbkhlbHBlcigpOwogICAgICAgICAgICAgICAgcGFuSGVscGVyLmluaXQoKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgY2FzZSAnc2hhcmUnOgogICAgICAgICAgICBjYXNlICdzJzoKICAgICAgICAgICAgICAgIHZhciBwYW5TaGFyZUhlbHBlciA9IG5ldyBQYW5TaGFyZUhlbHBlcigpOwogICAgICAgICAgICAgICAgcGFuU2hhcmVIZWxwZXIuaW5pdCgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgIH0pOwoKICAgIC8v572R55uY6aG16Z2i55qE5LiL6L295Yqp5omLCiAgICBmdW5jdGlvbiBQYW5IZWxwZXIoKXsKICAgICAgICB2YXIgeXVuRGF0YSxzaWduLHRpbWVzdGFtcCxiZHN0b2tlbixsb2dpZCxmaWRfbGlzdDsKICAgICAgICB2YXIgZmlsZUxpc3Q9W10sc2VsZWN0RmlsZUxpc3Q9W10sYmF0Y2hMaW5rTGlzdD1bXSxiYXRjaExpbmtMaXN0QWxsPVtdLGxpbmtMaXN0PVtdLAogICAgICAgICAgICBsaXN0X2dyaWRfc3RhdHVzPSdsaXN0JzsKICAgICAgICB2YXIgb2JzZXJ2ZXIsY3VycmVudFBhZ2UsY3VycmVudFBhdGgsY3VycmVudENhdGVnb3J5LGRpYWxvZyxzZWFyY2hLZXk7CiAgICAgICAgdmFyIHBhbkFQSVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgIi8vIiArIGxvY2F0aW9uLmhvc3QgKyAiL2FwaS8iOwogICAgICAgIHZhciByZXN0QVBJVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyAiLy9wY3MuYmFpZHUuY29tL3Jlc3QvMi4wL3Bjcy8iOwogICAgICAgIHZhciBjbGllbnRBUElVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArICIvL2QucGNzLmJhaWR1LmNvbS9yZXN0LzIuMC9wY3MvIjsKCiAgICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgeXVuRGF0YSA9IHVuc2FmZVdpbmRvdy55dW5EYXRhOwogICAgICAgICAgICBzbG9nKCd5dW5EYXRhOicseXVuRGF0YSk7CiAgICAgICAgICAgIGlmKHl1bkRhdGEgPT09IHVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICBzbG9nKCfpobXpnaLmnKrmraPluLjliqDovb3vvIzmiJbogIXnmb7luqblt7Lnu4/mm7TmlrDvvIEnKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpbml0UGFyYW1zKCk7CiAgICAgICAgICAgIHJlZ2lzdGVyRXZlbnRMaXN0ZW5lcigpOwogICAgICAgICAgICBjcmVhdGVPYnNlcnZlcigpOwogICAgICAgICAgICBhZGRCdXR0b24oKTsKICAgICAgICAgICAgY3JlYXRlSWZyYW1lKCk7CiAgICAgICAgICAgIGRpYWxvZyA9IG5ldyBEaWFsb2coe2FkZENvcHk6dHJ1ZX0pOwoKICAgICAgICAgICAgc2xvZygn572R55uY55u05o6l5LiL6L295Yqp5omL5Yqg6L295oiQ5Yqf77yBJyk7CiAgICAgICAgfTsKCiAgICAgICAgZnVuY3Rpb24gaW5pdFBhcmFtcygpewogICAgICAgICAgICBzaWduID0gZ2V0U2lnbigpOwogICAgICAgICAgICB0aW1lc3RhbXAgPSBnZXRUaW1lc3RhbXAoKTsKICAgICAgICAgICAgYmRzdG9rZW4gPSBnZXRCRFN0b2tlbigpOwogICAgICAgICAgICBsb2dpZCA9IGdldExvZ0lEKCk7CiAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gZ2V0Q3VycmVudFBhZ2UoKTsKICAgICAgICAgICAgc2xvZygnQ3VycmVudCBkaXNwbGF5IG1vZGU6JyxjdXJyZW50UGFnZSk7CgogICAgICAgICAgICBpZihjdXJyZW50UGFnZSA9PSAnbGlzdCcpCiAgICAgICAgICAgICAgICBjdXJyZW50UGF0aCA9IGdldFBhdGgoKTsKCiAgICAgICAgICAgIGlmKGN1cnJlbnRQYWdlID09ICdjYXRlZ29yeScpCiAgICAgICAgICAgICAgICBjdXJyZW50Q2F0ZWdvcnkgPSBnZXRDYXRlZ29yeSgpOwoKICAgICAgICAgICAgaWYoY3VycmVudFBhZ2UgPT0gJ3NlYXJjaCcpCiAgICAgICAgICAgICAgICBzZWFyY2hLZXkgPSBnZXRTZWFyY2hLZXkoKTsKCiAgICAgICAgICAgIHJlZnJlc2hMaXN0R3JpZFN0YXR1cygpOwogICAgICAgICAgICByZWZyZXNoRmlsZUxpc3QoKTsKICAgICAgICAgICAgcmVmcmVzaFNlbGVjdExpc3QoKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hGaWxlTGlzdCgpewogICAgICAgICAgICBpZiAoY3VycmVudFBhZ2UgPT0gJ2xpc3QnKSB7CiAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IGdldEZpbGVMaXN0KCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBhZ2UgPT0gJ2NhdGVnb3J5Jyl7CiAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IGdldENhdGVnb3J5RmlsZUxpc3QoKTsKICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZSA9PSAnc2VhcmNoJykgewogICAgICAgICAgICAgICAgZmlsZUxpc3QgPSBnZXRTZWFyY2hGaWxlTGlzdCgpOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByZWZyZXNoU2VsZWN0TGlzdCgpewogICAgICAgICAgICBzZWxlY3RGaWxlTGlzdCA9IFtdOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVmcmVzaExpc3RHcmlkU3RhdHVzKCl7CiAgICAgICAgICAgIGxpc3RfZ3JpZF9zdGF0dXMgPSBnZXRMaXN0R3JpZFN0YXR1cygpOwogICAgICAgIH0KCiAgICAgICAgLy/ojrflj5blvZPliY3nmoTop4blm77mqKHlvI8KICAgICAgICBmdW5jdGlvbiBnZXRMaXN0R3JpZFN0YXR1cygpewogICAgICAgICAgICAvL3JldHVybiAkKCdkaXYubGlzdC1ncmlkLXN3aXRjaCcpLmhhc0NsYXNzKCdsaXN0LXN3aXRjaGVkLW9uJyk/J2xpc3QnOigkKCdkaXYubGlzdC1ncmlkLXN3aXRjaCcpLmhhc0NsYXNzKCdncmlkLXN3aXRjaGVkLW9uJyk/J2dyaWQnOidsaXN0Jyk7CiAgICAgICAgICAgIC8vcmV0dXJuICQoJ2Rpdi5pdGlXelBZJykuaGFzQ2xhc3MoJ2t1ZHRXWTQ2Jyk/J2xpc3QnOigkKCdkaXYuaXRpV3pQWScpLmhhc0NsYXNzKCdueXRBTDl3Jyk/J2dyaWQnOidsaXN0Jyk7CiAgICAgICAgICAgIHJldHVybiAkKCdkaXYuJyt3b3JkTWFwWydsaXN0LWdyaWQtc3dpdGNoJ10pLmhhc0NsYXNzKHdvcmRNYXBbJ2xpc3Qtc3dpdGNoZWQtb24nXSk/J2xpc3QnOigkKCdkaXYuJyt3b3JkTWFwWydsaXN0LWdyaWQtc3dpdGNoJ10pLmhhc0NsYXNzKHdvcmRNYXBbJ2dyaWQtc3dpdGNoZWQtb24nXSk/J2dyaWQnOidsaXN0Jyk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByZWdpc3RlckV2ZW50TGlzdGVuZXIoKXsKICAgICAgICAgICAgcmVnaXN0ZXJIYXNoQ2hhbmdlKCk7CiAgICAgICAgICAgIHJlZ2lzdGVyTGlzdEdyaWRTdGF0dXMoKTsKICAgICAgICAgICAgcmVnaXN0ZXJDaGVja2JveCgpOwogICAgICAgICAgICByZWdpc3RlckFsbENoZWNrYm94KCk7CiAgICAgICAgICAgIHJlZ2lzdGVyRmlsZVNlbGVjdCgpOwogICAgICAgIH0KCiAgICAgICAgLy/nm5Hop4blnLDlnYDmoI8j5qCH562+55qE5Y+Y5YyWCiAgICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJIYXNoQ2hhbmdlKCl7CiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJyxmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgIHJlZnJlc2hMaXN0R3JpZFN0YXR1cygpOwogICAgICAgICAgICAgICAgaWYoZ2V0Q3VycmVudFBhZ2UoKSA9PSAnbGlzdCcpIHsKICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50UGFnZSA9PSBnZXRDdXJyZW50UGFnZSgpKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudFBhdGggPT0gZ2V0UGF0aCgpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoID0gZ2V0UGF0aCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2VsZWN0TGlzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSBnZXRDdXJyZW50UGFnZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGF0aCA9IGdldFBhdGgoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTZWxlY3RMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChnZXRDdXJyZW50UGFnZSgpID09ICdjYXRlZ29yeScpIHsKICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50UGFnZSA9PSBnZXRDdXJyZW50UGFnZSgpKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoY3VycmVudENhdGVnb3J5ID09IGdldENhdGVnb3J5KCkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSBnZXRDdXJyZW50UGFnZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENhdGVnb3J5ID0gZ2V0Q2F0ZWdvcnkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGaWxlTGlzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNlbGVjdExpc3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gZ2V0Q3VycmVudFBhZ2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENhdGVnb3J5ID0gZ2V0Q2F0ZWdvcnkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTZWxlY3RMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIGlmKGdldEN1cnJlbnRQYWdlKCkgPT0gJ3NlYXJjaCcpIHsKICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50UGFnZSA9PSBnZXRDdXJyZW50UGFnZSgpKXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VhcmNoS2V5ID09IGdldFNlYXJjaEtleSgpKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYWdlID0gZ2V0Q3VycmVudFBhZ2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaEtleSA9IGdldFNlYXJjaEtleSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoU2VsZWN0TGlzdCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSBnZXRDdXJyZW50UGFnZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hLZXkgPSBnZXRTZWFyY2hLZXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hTZWxlY3RMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8v55uR6KeG6KeG5Zu+5Y+Y5YyWCiAgICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJMaXN0R3JpZFN0YXR1cygpewogICAgICAgICAgICAvL3ZhciAkYV9saXN0ID0gJCgnYVtub2RlLXR5cGU9bGlzdC1zd2l0Y2hdJyk7CiAgICAgICAgICAgIC8vdmFyICRhX2xpc3QgPSAkKCdhW25vZGUtdHlwZT1lZXBXemtrXScpOwogICAgICAgICAgICB2YXIgJGFfbGlzdCA9ICQoJ2Fbbm9kZS10eXBlPScrd29yZE1hcFsnbGlzdC1zd2l0Y2gnXSsnXScpOwogICAgICAgICAgICAkYV9saXN0LmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBsaXN0X2dyaWRfc3RhdHVzID0gJ2xpc3QnOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vdmFyICRhX2dyaWQgPSAkKCdhW25vZGUtdHlwZT1ncmlkLXN3aXRjaF0nKTsKICAgICAgICAgICAgLy92YXIgJGFfZ3JpZCA9ICQoJ2Fbbm9kZS10eXBlPXl0bnZXWTdxXScpOwogICAgICAgICAgICB2YXIgJGFfZ3JpZCA9ICQoJ2Fbbm9kZS10eXBlPScrd29yZE1hcFsnZ3JpZC1zd2l0Y2gnXSsnXScpOwogICAgICAgICAgICAkYV9ncmlkLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBsaXN0X2dyaWRfc3RhdHVzID0gJ2dyaWQnOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8v5paH5Lu26YCJ5oup5qGGCiAgICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJDaGVja2JveCgpewogICAgICAgICAgICAvL3ZhciAkY2hlY2tib3ggPSAkKCdzcGFuLmNoZWNrYm94Jyk7CiAgICAgICAgICAgIC8vdmFyICRjaGVja2JveCA9ICQoJ3NwYW4uRU9HZXhmJyk7CiAgICAgICAgICAgIHZhciAkY2hlY2tib3ggPSAkKCdzcGFuLicrd29yZE1hcFsnY2hlY2tib3gnXSk7CiAgICAgICAgICAgICRjaGVja2JveC5lYWNoKGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgJChlbGVtZW50KS5iaW5kKCdjbGljaycsZnVuY3Rpb24oZSl7CiAgICAgICAgICAgICAgICAgICAgdmFyICRwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpOwogICAgICAgICAgICAgICAgICAgIHZhciBmaWxlbmFtZTsKICAgICAgICAgICAgICAgICAgICBpZihsaXN0X2dyaWRfc3RhdHVzID09ICdsaXN0JykgewogICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbGVuYW1lID0gJCgnZGl2LmZpbGUtbmFtZSBkaXYudGV4dCBhJywkcGFyZW50KS5hdHRyKCd0aXRsZScpOwogICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9ICQoJ2Rpdi5maWxlLW5hbWUgZGl2LnRleHQgYScsJHBhcmVudCkuYXR0cigndGl0bGUnKTsKICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZihsaXN0X2dyaWRfc3RhdHVzID09ICdncmlkJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vZmlsZW5hbWUgPSAkKCdkaXYuZmlsZS1uYW1lIGEnLCRwYXJlbnQpLmF0dHIoJ3RpdGxlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gJCgnZGl2LmZpbGUtbmFtZSBhJywkcGFyZW50KS5hdHRyKCd0aXRsZScpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvL2lmKCRwYXJlbnQuaGFzQ2xhc3MoJ2l0ZW0tYWN0aXZlJykpewogICAgICAgICAgICAgICAgICAgIC8vaWYoJHBhcmVudC5oYXNDbGFzcygncHJXelhBJykpewogICAgICAgICAgICAgICAgICAgIGlmKCRwYXJlbnQuaGFzQ2xhc3Mod29yZE1hcFsnaXRlbS1hY3RpdmUnXSkpewogICAgICAgICAgICAgICAgICAgICAgICBzbG9nKCflj5bmtojpgInkuK3mlofku7bvvJonK2ZpbGVuYW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7aTxzZWxlY3RGaWxlTGlzdC5sZW5ndGg7aSsrKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGVjdEZpbGVMaXN0W2ldLmZpbGVuYW1lID09IGZpbGVuYW1lKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdC5zcGxpY2UoaSwxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICBzbG9nKCfpgInkuK3mlofku7Y6JytmaWxlbmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChmaWxlTGlzdCxmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuc2VydmVyX2ZpbGVuYW1lID09IGZpbGVuYW1lKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTplbGVtZW50LnNlcnZlcl9maWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDplbGVtZW50LnBhdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzX2lkOmVsZW1lbnQuZnNfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzZGlyOmVsZW1lbnQuaXNkaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEZpbGVMaXN0LnB1c2gob2JqKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdW5yZWdpc3RlckNoZWNrYm94KCl7CiAgICAgICAgICAgIC8vdmFyICRjaGVja2JveCA9ICQoJ3NwYW4uY2hlY2tib3gnKTsKICAgICAgICAgICAgLy92YXIgJGNoZWNrYm94ID0gJCgnc3Bhbi5FT0dleGYnKTsKICAgICAgICAgICAgdmFyICRjaGVja2JveCA9ICQoJ3NwYW4uJyt3b3JkTWFwWydjaGVja2JveCddKTsKICAgICAgICAgICAgJGNoZWNrYm94LmVhY2goZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLnVuYmluZCgnY2xpY2snKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvL+WFqOmAieahhgogICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQWxsQ2hlY2tib3goKXsKICAgICAgICAgICAgLy92YXIgJGNoZWNrYm94ID0gJCgnZGl2LmNvbC1pdGVtLmNoZWNrJyk7CiAgICAgICAgICAgIC8vdmFyICRjaGVja2JveCA9ICQoJ2Rpdi5ReHlmdmcuZnlkR05DJyk7CiAgICAgICAgICAgIHZhciAkY2hlY2tib3ggPSAkKCdkaXYuJyt3b3JkTWFwWydjb2wtaXRlbSddKycuJyt3b3JkTWFwWydjaGVjayddKTsKICAgICAgICAgICAgJGNoZWNrYm94LmVhY2goZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmJpbmQoJ2NsaWNrJyxmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgICAgICB2YXIgJHBhcmVudCA9ICQodGhpcykucGFyZW50KCk7CiAgICAgICAgICAgICAgICAgICAgLy9pZigkcGFyZW50Lmhhc0NsYXNzKCdjaGVja2VkJykpewogICAgICAgICAgICAgICAgICAgIC8vaWYoJHBhcmVudC5oYXNDbGFzcygnRXp1YkdnJykpewogICAgICAgICAgICAgICAgICAgIGlmKCRwYXJlbnQuaGFzQ2xhc3Mod29yZE1hcFsnY2hlY2tlZCddKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHNsb2coJ+WPlua2iOWFqOmAiScpOwogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNsb2coJ+WFqOmDqOmAieS4rScpOwogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZmlsZUxpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOmVsZW1lbnQuc2VydmVyX2ZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ZWxlbWVudC5wYXRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzX2lkOmVsZW1lbnQuZnNfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNkaXI6ZWxlbWVudC5pc2RpcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEZpbGVMaXN0LnB1c2gob2JqKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdW5yZWdpc3RlckFsbENoZWNrYm94KCl7CiAgICAgICAgICAgIC8vdmFyICRjaGVja2JveCA9ICQoJ2Rpdi5jb2wtaXRlbS5jaGVjaycpOwogICAgICAgICAgICAvL3ZhciAkY2hlY2tib3ggPSAkKCdkaXYuUXh5ZnZnLmZ5ZEdOQycpOwogICAgICAgICAgICB2YXIgJGNoZWNrYm94ID0gJCgnZGl2Licrd29yZE1hcFsnY29sLWl0ZW0nXSsnLicrd29yZE1hcFsnY2hlY2snXSk7CiAgICAgICAgICAgICRjaGVja2JveC5lYWNoKGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgJChlbGVtZW50KS51bmJpbmQoJ2NsaWNrJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy/ljZXkuKrmlofku7bpgInkuK3vvIzngrnlh7vmlofku7bkuI3mmK/ngrnlh7vpgInkuK3moYbvvIzkvJrlj6rpgInkuK3or6Xmlofku7YKICAgICAgICBmdW5jdGlvbiByZWdpc3RlckZpbGVTZWxlY3QoKXsKICAgICAgICAgICAgLy92YXIgJGRkID0gJCgnZGl2Lmxpc3QtdmlldyBkZCcpOwogICAgICAgICAgICAvL3ZhciAkZGQgPSAkKCdkaXYudmRBZktNYiBkZCcpOwogICAgICAgICAgICB2YXIgJGRkID0gJCgnZGl2Licrd29yZE1hcFsnbGlzdC12aWV3J10rJyBkZCcpOwogICAgICAgICAgICAkZGQuZWFjaChmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICQoZWxlbWVudCkuYmluZCgnY2xpY2snLGZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgICAgIHZhciBub2RlTmFtZSA9IGUudGFyZ2V0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgaWYobm9kZU5hbWUgIT0gJ3NwYW4nICYmIG5vZGVOYW1lICE9ICdhJyAmJiBub2RlTmFtZSAhPSAnZW0nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNsb2coJ3NoaWZ0S2V5OicrZS5zaGlmdEtleSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFlLnNoaWZ0S2V5KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEZpbGVMaXN0ID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSAkKCdkaXYuZmlsZS1uYW1lIGRpdi50ZXh0IGEnLCQodGhpcykpLmF0dHIoJ3RpdGxlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG9nKCfpgInkuK3mlofku7bvvJonICsgZmlsZW5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGZpbGVMaXN0LGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuc2VydmVyX2ZpbGVuYW1lID09IGZpbGVuYW1lKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOmVsZW1lbnQuc2VydmVyX2ZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDplbGVtZW50LnBhdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmc19pZDplbGVtZW50LmZzX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNkaXI6ZWxlbWVudC5pc2RpcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdC5wdXNoKG9iaik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RmlsZUxpc3QgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyICRkZF9zZWxlY3QgPSAkKCdkaXYubGlzdC12aWV3IGRkLml0ZW0tYWN0aXZlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciAkZGRfc2VsZWN0ID0gJCgnZGl2LnZkQWZLTWIgZGQucHJXelhBJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRkX3NlbGVjdCA9ICQoJ2Rpdi4nK3dvcmRNYXBbJ2xpc3QtdmlldyddKycgZGQuJyt3b3JkTWFwWydpdGVtLWFjdGl2ZSddKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCgkZGRfc2VsZWN0LGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9ICQoJ2Rpdi5maWxlLW5hbWUgZGl2LnRleHQgYScsJChlbGVtZW50KSkuYXR0cigndGl0bGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbG9nKCfpgInkuK3mlofku7bvvJonICsgZmlsZW5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChmaWxlTGlzdCxmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC5zZXJ2ZXJfZmlsZW5hbWUgPT0gZmlsZW5hbWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTplbGVtZW50LnNlcnZlcl9maWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOmVsZW1lbnQucGF0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmc19pZDplbGVtZW50LmZzX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzZGlyOmVsZW1lbnQuaXNkaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdC5wdXNoKG9iaik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdW5yZWdpc3RlckZpbGVTZWxlY3QoKXsKICAgICAgICAgICAgLy92YXIgJGRkID0gJCgnZGl2Lmxpc3QtdmlldyBkZCcpOwogICAgICAgICAgICAvL3ZhciAkZGQgPSAkKCdkaXYudmRBZktNYiBkZCcpOwogICAgICAgICAgICB2YXIgJGRkID0gJCgnZGl2Licrd29yZE1hcFsnbGlzdC12aWV3J10rJyBkZCcpOwogICAgICAgICAgICAkZGQuZWFjaChmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICQoZWxlbWVudCkudW5iaW5kKCdjbGljaycpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8v55uR6KeG5paH5Lu25YiX6KGo5pi+56S65Y+Y5YyWCiAgICAgICAgZnVuY3Rpb24gY3JlYXRlT2JzZXJ2ZXIoKXsKICAgICAgICAgICAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcjsKICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICAnY2hpbGRMaXN0JzogdHJ1ZQogICAgICAgICAgICB9OwogICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucyl7CiAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyQ2hlY2tib3goKTsKICAgICAgICAgICAgICAgIHVucmVnaXN0ZXJBbGxDaGVja2JveCgpOwogICAgICAgICAgICAgICAgdW5yZWdpc3RlckZpbGVTZWxlY3QoKTsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ2hlY2tib3goKTsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyQWxsQ2hlY2tib3goKTsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyRmlsZVNlbGVjdCgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vdmFyIGxpc3RfdmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0LXZpZXcnKTsKICAgICAgICAgICAgLy92YXIgZ3JpZF92aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdyaWQtdmlldycpOwogICAgICAgICAgICAKICAgICAgICAgICAgLy92YXIgbGlzdF92aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnZkQWZLTWInKTsKICAgICAgICAgICAgLy92YXIgZ3JpZF92aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLkpLdkhKTWInKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBsaXN0X3ZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyt3b3JkTWFwWydsaXN0LXZpZXcnXSk7CiAgICAgICAgICAgIHZhciBncmlkX3ZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyt3b3JkTWFwWydncmlkLXZpZXcnXSk7CgogICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGxpc3RfdmlldyxvcHRpb25zKTsKICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShncmlkX3ZpZXcsb3B0aW9ucyk7CiAgICAgICAgfQoKICAgICAgICAvL+a3u+WKoOWKqeaJi+aMiemSrgogICAgICAgIGZ1bmN0aW9uIGFkZEJ1dHRvbigpewogICAgICAgICAgICAvLyQoJ2Rpdi5iYXItc2VhcmNoJykuY3NzKCd3aWR0aCcsJzE4JScpOy8v5L+u5pS55pCc57Si5qGG55qE5a695bqm77yM6YG/5YWN6YGu5oyhCiAgICAgICAgICAgIC8vJCgnZGl2Lk9GYVBhTycpLmNzcygnd2lkdGgnLCcxOCUnKTsKICAgICAgICAgICAgJCgnZGl2Licrd29yZE1hcFsnYmFyLXNlYXJjaCddKS5jc3MoJ3dpZHRoJywnMTglJyk7CiAgICAgICAgICAgIHZhciAkZHJvcGRvd25idXR0b24gPSAkKCc8c3BhbiBjbGFzcz0iZy1kcm9wZG93bi1idXR0b24iPjwvc3Bhbj4nKTsKICAgICAgICAgICAgdmFyICRkcm9wZG93bmJ1dHRvbl9hID0gJCgnPGEgY2xhc3M9ImctYnV0dG9uIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxlbSBjbGFzcz0iaWNvbiBpY29uLWRvd25sb2FkIiB0aXRsZT0i55m+5bqm572R55uY5LiL6L295Yqp5omLIj48L2VtPjxzcGFuIGNsYXNzPSJ0ZXh0IiBzdHlsZT0id2lkdGg6IGF1dG87Ij7kuIvovb3liqnmiYs8L3NwYW4+PC9zcGFuPjwvYT4nKTsKICAgICAgICAgICAgdmFyICRkcm9wZG93bmJ1dHRvbl9zcGFuID0gJCgnPHNwYW4gY2xhc3M9Im1lbnUiIHN0eWxlPSJ3aWR0aDo5NnB4Ij48L3NwYW4+Jyk7CgogICAgICAgICAgICB2YXIgJGRpcmVjdGJ1dHRvbiA9ICQoJzxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBzdHlsZT0iZGlzcGxheTpibG9jayI+PC9zcGFuPicpOwogICAgICAgICAgICB2YXIgJGRpcmVjdGJ1dHRvbl9zcGFuID0gJCgnPHNwYW4gY2xhc3M9ImctZHJvcGRvd24tYnV0dG9uIGctZHJvcGRvd24tYnV0dG9uLXNlY29uZCIgbWVudWxldmVsPSIyIj48L3NwYW4+Jyk7CiAgICAgICAgICAgIHZhciAkZGlyZWN0YnV0dG9uX2EgPSAkKCc8YSBjbGFzcz0iZy1idXR0b24iIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCI+PHNwYW4gY2xhc3M9InRleHQiIHN0eWxlPSJ3aWR0aDphdXRvIj7nm7TmjqXkuIvovb08L3NwYW4+PC9zcGFuPjwvYT4nKTsKICAgICAgICAgICAgdmFyICRkaXJlY3RidXR0b25fbWVudSA9ICQoJzxzcGFuIGNsYXNzPSJtZW51IiBzdHlsZT0id2lkdGg6MTIwcHg7bGVmdDo3OXB4Ij48L3NwYW4+Jyk7CiAgICAgICAgICAgIHZhciAkZGlyZWN0YnV0dG9uX2Rvd25sb2FkX2J1dHRvbiA9ICQoJzxhIGlkPSJkb3dubG9hZC1kaXJlY3QiIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij7kuIvovb08L2E+Jyk7CiAgICAgICAgICAgIHZhciAkZGlyZWN0YnV0dG9uX2xpbmtfYnV0dG9uID0gJCgnPGEgaWQ9ImxpbmstZGlyZWN0IiBjbGFzcz0iZy1idXR0b24tbWVudSIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyI+5pi+56S66ZO+5o6lPC9hPicpOwogICAgICAgICAgICB2YXIgJGRpcmVjdGJ1dHRvbl9iYXRjaGh0dHBsaW5rX2J1dHRvbiA9ICQoJzxhIGlkPSJiYXRjaGh0dHBsaW5rLWRpcmVjdCIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPuaJuemHj+mTvuaOpShIVFRQKTwvYT4nKTsKICAgICAgICAgICAgdmFyICRkaXJlY3RidXR0b25fYmF0Y2hodHRwc2xpbmtfYnV0dG9uID0gJCgnPGEgaWQ9ImJhdGNoaHR0cHNsaW5rLWRpcmVjdCIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPuaJuemHj+mTvuaOpShIVFRQUyk8L2E+Jyk7CiAgICAgICAgICAgICRkaXJlY3RidXR0b25fbWVudS5hcHBlbmQoJGRpcmVjdGJ1dHRvbl9kb3dubG9hZF9idXR0b24pLmFwcGVuZCgkZGlyZWN0YnV0dG9uX2xpbmtfYnV0dG9uKS5hcHBlbmQoJGRpcmVjdGJ1dHRvbl9iYXRjaGh0dHBsaW5rX2J1dHRvbikuYXBwZW5kKCRkaXJlY3RidXR0b25fYmF0Y2hodHRwc2xpbmtfYnV0dG9uKTsKICAgICAgICAgICAgJGRpcmVjdGJ1dHRvbi5hcHBlbmQoJGRpcmVjdGJ1dHRvbl9zcGFuLmFwcGVuZCgkZGlyZWN0YnV0dG9uX2EpLmFwcGVuZCgkZGlyZWN0YnV0dG9uX21lbnUpKTsKICAgICAgICAgICAgJGRpcmVjdGJ1dHRvbi5ob3ZlcihmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJGRpcmVjdGJ1dHRvbl9zcGFuLnRvZ2dsZUNsYXNzKCdidXR0b24tb3BlbicpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgJGRpcmVjdGJ1dHRvbl9kb3dubG9hZF9idXR0b24uY2xpY2soZG93bmxvYWRDbGljayk7CiAgICAgICAgICAgICRkaXJlY3RidXR0b25fbGlua19idXR0b24uY2xpY2sobGlua0NsaWNrKTsKICAgICAgICAgICAgJGRpcmVjdGJ1dHRvbl9iYXRjaGh0dHBsaW5rX2J1dHRvbi5jbGljayhiYXRjaENsaWNrKTsKICAgICAgICAgICAgJGRpcmVjdGJ1dHRvbl9iYXRjaGh0dHBzbGlua19idXR0b24uY2xpY2soYmF0Y2hDbGljayk7CgogICAgICAgICAgICB2YXIgJGFwaWJ1dHRvbiA9ICQoJzxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBzdHlsZT0iZGlzcGxheTpibG9jayI+PC9zcGFuPicpOwogICAgICAgICAgICB2YXIgJGFwaWJ1dHRvbl9zcGFuID0gJCgnPHNwYW4gY2xhc3M9ImctZHJvcGRvd24tYnV0dG9uIGctZHJvcGRvd24tYnV0dG9uLXNlY29uZCIgbWVudWxldmVsPSIyIj48L3NwYW4+Jyk7CiAgICAgICAgICAgIHZhciAkYXBpYnV0dG9uX2EgPSAkKCc8YSBjbGFzcz0iZy1idXR0b24iIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCI+PHNwYW4gY2xhc3M9InRleHQiIHN0eWxlPSJ3aWR0aDphdXRvIj5BUEnkuIvovb08L3NwYW4+PC9zcGFuPjwvYT4nKTsKICAgICAgICAgICAgdmFyICRhcGlidXR0b25fbWVudSA9ICQoJzxzcGFuIGNsYXNzPSJtZW51IiBzdHlsZT0id2lkdGg6MTIwcHg7bGVmdDo3N3B4Ij48L3NwYW4+Jyk7CiAgICAgICAgICAgIHZhciAkYXBpYnV0dG9uX2Rvd25sb2FkX2J1dHRvbiA9ICQoJzxhIGlkPSJkb3dubG9hZC1hcGkiIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij7kuIvovb08L2E+Jyk7CiAgICAgICAgICAgIHZhciAkYXBpYnV0dG9uX2xpbmtfYnV0dG9uID0gJCgnPGEgaWQ9Imh0dHBsaW5rLWFwaSIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPuaYvuekuumTvuaOpTwvYT4nKTsKICAgICAgICAgICAgdmFyICRhcGlidXR0b25fYmF0Y2hodHRwbGlua19idXR0b24gPSAkKCc8YSBpZD0iYmF0Y2hodHRwbGluay1hcGkiIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij7mibnph4/pk77mjqUoSFRUUCk8L2E+Jyk7CiAgICAgICAgICAgIHZhciAkYXBpYnV0dG9uX2JhdGNoaHR0cHNsaW5rX2J1dHRvbiA9ICQoJzxhIGlkPSJiYXRjaGh0dHBzbGluay1hcGkiIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij7mibnph4/pk77mjqUoSFRUUFMpPC9hPicpOwogICAgICAgICAgICAkYXBpYnV0dG9uX21lbnUuYXBwZW5kKCRhcGlidXR0b25fZG93bmxvYWRfYnV0dG9uKS5hcHBlbmQoJGFwaWJ1dHRvbl9saW5rX2J1dHRvbikuYXBwZW5kKCRhcGlidXR0b25fYmF0Y2hodHRwbGlua19idXR0b24pLmFwcGVuZCgkYXBpYnV0dG9uX2JhdGNoaHR0cHNsaW5rX2J1dHRvbik7CiAgICAgICAgICAgICRhcGlidXR0b24uYXBwZW5kKCRhcGlidXR0b25fc3Bhbi5hcHBlbmQoJGFwaWJ1dHRvbl9hKS5hcHBlbmQoJGFwaWJ1dHRvbl9tZW51KSk7CiAgICAgICAgICAgICRhcGlidXR0b24uaG92ZXIoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICRhcGlidXR0b25fc3Bhbi50b2dnbGVDbGFzcygnYnV0dG9uLW9wZW4nKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICRhcGlidXR0b25fZG93bmxvYWRfYnV0dG9uLmNsaWNrKGRvd25sb2FkQ2xpY2spOwogICAgICAgICAgICAkYXBpYnV0dG9uX2xpbmtfYnV0dG9uLmNsaWNrKGxpbmtDbGljayk7CiAgICAgICAgICAgICRhcGlidXR0b25fYmF0Y2hodHRwbGlua19idXR0b24uY2xpY2soYmF0Y2hDbGljayk7CiAgICAgICAgICAgICRhcGlidXR0b25fYmF0Y2hodHRwc2xpbmtfYnV0dG9uLmNsaWNrKGJhdGNoQ2xpY2spOwoKICAgICAgICAgICAgdmFyICRvdXRlcmxpbmtidXR0b24gPSAkKCc8c3BhbiBjbGFzcz0iZy1idXR0b24tbWVudSIgc3R5bGU9ImRpc3BsYXk6YmxvY2siPjwvc3Bhbj4nKTsKICAgICAgICAgICAgdmFyICRvdXRlcmxpbmtidXR0b25fc3BhbiA9ICQoJzxzcGFuIGNsYXNzPSJnLWRyb3Bkb3duLWJ1dHRvbiBnLWRyb3Bkb3duLWJ1dHRvbi1zZWNvbmQiIG1lbnVsZXZlbD0iMiI+PC9zcGFuPicpOwogICAgICAgICAgICB2YXIgJG91dGVybGlua2J1dHRvbl9hID0gJCgnPGEgY2xhc3M9ImctYnV0dG9uIiBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7Ij48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxzcGFuIGNsYXNzPSJ0ZXh0IiBzdHlsZT0id2lkdGg6YXV0byI+5aSW6ZO+5LiL6L29PC9zcGFuPjwvc3Bhbj48L2E+Jyk7CiAgICAgICAgICAgIHZhciAkb3V0ZXJsaW5rYnV0dG9uX21lbnUgPSAkKCc8c3BhbiBjbGFzcz0ibWVudSIgc3R5bGU9IndpZHRoOjEyMHB4O2xlZnQ6NzlweCI+PC9zcGFuPicpOwogICAgICAgICAgICB2YXIgJG91dGVybGlua2J1dHRvbl9kb3dubG9hZF9idXR0b24gPSAkKCc8YSBpZD0iZG93bmxvYWQtb3V0ZXJsaW5rIiBjbGFzcz0iZy1idXR0b24tbWVudSIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyI+5LiL6L29PC9hPicpOwogICAgICAgICAgICB2YXIgJG91dGVybGlua2J1dHRvbl9saW5rX2J1dHRvbiA9ICQoJzxhIGlkPSJsaW5rLW91dGVybGluayIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPuaYvuekuumTvuaOpTwvYT4nKTsKICAgICAgICAgICAgdmFyICRvdXRlcmxpbmtidXR0b25fYmF0Y2hsaW5rX2J1dHRvbiA9ICQoJzxhIGlkPSJiYXRjaGxpbmstb3V0ZXJsaW5rIiBjbGFzcz0iZy1idXR0b24tbWVudSIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyI+5om56YeP6ZO+5o6lPC9hPicpOwogICAgICAgICAgICAkb3V0ZXJsaW5rYnV0dG9uX21lbnUuYXBwZW5kKCRvdXRlcmxpbmtidXR0b25fZG93bmxvYWRfYnV0dG9uKS5hcHBlbmQoJG91dGVybGlua2J1dHRvbl9saW5rX2J1dHRvbikuYXBwZW5kKCRvdXRlcmxpbmtidXR0b25fYmF0Y2hsaW5rX2J1dHRvbik7CiAgICAgICAgICAgICRvdXRlcmxpbmtidXR0b24uYXBwZW5kKCRvdXRlcmxpbmtidXR0b25fc3Bhbi5hcHBlbmQoJG91dGVybGlua2J1dHRvbl9hKS5hcHBlbmQoJG91dGVybGlua2J1dHRvbl9tZW51KSk7CiAgICAgICAgICAgICRvdXRlcmxpbmtidXR0b24uaG92ZXIoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICRvdXRlcmxpbmtidXR0b25fc3Bhbi50b2dnbGVDbGFzcygnYnV0dG9uLW9wZW4nKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICRvdXRlcmxpbmtidXR0b25fZG93bmxvYWRfYnV0dG9uLmNsaWNrKGRvd25sb2FkQ2xpY2spOwogICAgICAgICAgICAkb3V0ZXJsaW5rYnV0dG9uX2xpbmtfYnV0dG9uLmNsaWNrKGxpbmtDbGljayk7CiAgICAgICAgICAgICRvdXRlcmxpbmtidXR0b25fYmF0Y2hsaW5rX2J1dHRvbi5jbGljayhiYXRjaENsaWNrKTsKCiAgICAgICAgICAgICRkcm9wZG93bmJ1dHRvbl9zcGFuLmFwcGVuZCgkZGlyZWN0YnV0dG9uKS5hcHBlbmQoJGFwaWJ1dHRvbikuYXBwZW5kKCRvdXRlcmxpbmtidXR0b24pOwogICAgICAgICAgICAkZHJvcGRvd25idXR0b24uYXBwZW5kKCRkcm9wZG93bmJ1dHRvbl9hKS5hcHBlbmQoJGRyb3Bkb3duYnV0dG9uX3NwYW4pOwoKICAgICAgICAgICAgJGRyb3Bkb3duYnV0dG9uLmhvdmVyKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkZHJvcGRvd25idXR0b24udG9nZ2xlQ2xhc3MoJ2J1dHRvbi1vcGVuJyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8kKCdkaXYuZGVmYXVsdC1kb20gZGl2LmJhciBkaXYubGlzdC10b29scycpLmFwcGVuZCgkZHJvcGRvd25idXR0b24pOwogICAgICAgICAgICAvLyQoJ2Rpdi5pcmhXOXBaIGRpdi55cWdSNzQ3IGRpdi5RRERPUUInKS5hcHBlbmQoJGRyb3Bkb3duYnV0dG9uKTsKICAgICAgICAgICAgJCgnZGl2Licrd29yZE1hcFsnZGVmYXVsdC1kb20nXSsnIGRpdi4nK3dvcmRNYXBbJ2JhciddKycgZGl2Licrd29yZE1hcFsnbGlzdC10b29scyddKS5hcHBlbmQoJGRyb3Bkb3duYnV0dG9uKTsKICAgICAgICB9CgogICAgICAgIC8v5pqC5pe25rKh55SoCiAgICAgICAgLy8gZnVuY3Rpb24gYWRkTG9hZGluZygpewogICAgICAgIC8vICAgICB2YXIgc2NyZWVuV2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoOwogICAgICAgIC8vICAgICB2YXIgc2NyZWVuSGVpZ2h0ID0gZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQ7CiAgICAgICAgLy8gICAgIHZhciBsZWZ0ID0gKHNjcmVlbldpZHRoLTEwKS8yOwogICAgICAgIC8vICAgICB2YXIgdG9wID0gc2NyZWVuSGVpZ2h0LzI7CiAgICAgICAgLy8gICAgIHZhciAkbG9hZGluZyA9ICQoJzxkaXYgaWQ9ImRpYWxvZy1sb2FkaW5nIiBzdHlsZT0icG9zaXRpb246YWJzb2x1dGU7bGVmdDonK2xlZnQrJ3B4O3RvcDonK3RvcCsncHg7ZGlzcGxheTpub25lO3otaW5kZXg6NTI7Y29sb3I6d2hpdGU7Zm9udC1zaXplOjE2cHgiPuWkhOeQhuS4rTwvZGl2PicpOwogICAgICAgIC8vICAgICAkKCdib2R5JykuYXBwZW5kKCRsb2FkaW5nKTsKICAgICAgICAvLyB9CgogICAgICAgIGZ1bmN0aW9uIGRvd25sb2FkQ2xpY2soZXZlbnQpewogICAgICAgICAgICBzbG9nKCfpgInkuK3mlofku7bliJfooajvvJonLHNlbGVjdEZpbGVMaXN0KTsKICAgICAgICAgICAgdmFyIGlkID0gZXZlbnQudGFyZ2V0LmlkOwogICAgICAgICAgICB2YXIgZG93bmxvYWRMaW5rOwoKICAgICAgICAgICAgaWYoaWQgPT0gJ2Rvd25sb2FkLWRpcmVjdCcpewogICAgICAgICAgICAgICAgdmFyIGRvd25sb2FkVHlwZTsKICAgICAgICAgICAgICAgIGlmKHNlbGVjdEZpbGVMaXN0Lmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCLojrflj5bpgInkuK3mlofku7blpLHotKXvvIzor7fliLfmlrDph43or5XvvIEiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdEZpbGVMaXN0Lmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdEZpbGVMaXN0WzBdLmlzZGlyID09PSAxKQogICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZFR5cGUgPSAnYmF0Y2gnOwogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdEZpbGVMaXN0WzBdLmlzZGlyID09PSAwKQogICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZFR5cGU9ICdkbGluayc7CiAgICAgICAgICAgICAgICAgICAgLy9kb3dubG9hZFR5cGUgPSBzZWxlY3RGaWxlTGlzdFswXS5pc2Rpcj09MT8nYmF0Y2gnOihzZWxlY3RGaWxlTGlzdFswXS5pc2Rpcj09PTA/J2RsaW5rJzonYmF0Y2gnKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZihzZWxlY3RGaWxlTGlzdC5sZW5ndGggPiAxKXsKICAgICAgICAgICAgICAgICAgICBkb3dubG9hZFR5cGUgPSAnYmF0Y2gnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZmlkX2xpc3QgPSBnZXRGaWRMaXN0KHNlbGVjdEZpbGVMaXN0KTsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXREb3dubG9hZExpbmtXaXRoUGFuQVBJKGRvd25sb2FkVHlwZSk7CiAgICAgICAgICAgICAgICBpZihyZXN1bHQuZXJybm8gPT09IDApewogICAgICAgICAgICAgICAgICAgIGlmKGRvd25sb2FkVHlwZSA9PSAnZGxpbmsnKQogICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZExpbmsgPSByZXN1bHQuZGxpbmtbMF0uZGxpbms7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihkb3dubG9hZFR5cGUgPT0gJ2JhdGNoJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkTGluayA9IHJlc3VsdC5kbGluazsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09PSAxKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRMaW5rID0gZG93bmxvYWRMaW5rICsgJyZ6aXBuYW1lPScgKyBlbmNvZGVVUklDb21wb25lbnQoc2VsZWN0RmlsZUxpc3RbMF0uZmlsZW5hbWUpICsgJy56aXAnOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgi5Y+R55Sf6ZSZ6K+v77yBIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYocmVzdWx0LmVycm5vID09IC0xKXsKICAgICAgICAgICAgICAgICAgICBhbGVydCgn5paH5Lu25LiN5a2Y5Zyo5oiW5bey6KKr55m+5bqm5ZKM6LCQ77yM5peg5rOV5LiL6L2977yBJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfWVsc2UgaWYocmVzdWx0LmVycm5vID09IDExMil7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoIumhtemdoui/h+acn++8jOivt+WIt+aWsOmHjeivle+8gSIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCLlj5HnlJ/plJnor6/vvIEiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoIuiOt+WPlumAieS4reaWh+S7tuWksei0pe+8jOivt+WIt+aWsOmHjeivle+8gSIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCLor6Xmlrnms5XkuI3mlK/mjIHlpJrmlofku7bkuIvovb3vvIEiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmKHNlbGVjdEZpbGVMaXN0WzBdLmlzZGlyID09IDEpewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgi6K+l5pa55rOV5LiN5pSv5oyB55uu5b2V5LiL6L2977yBIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihpZCA9PSAnZG93bmxvYWQtYXBpJyl7CiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRMaW5rID0gZ2V0RG93bmxvYWRMaW5rV2l0aFJFU1RBUElCYWlkdShzZWxlY3RGaWxlTGlzdFswXS5wYXRoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaWQgPT0gJ2Rvd25sb2FkLW91dGVybGluaycpewogICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXREb3dubG9hZExpbmtXaXRoQ2xpZW50QVBJKHNlbGVjdEZpbGVMaXN0WzBdLnBhdGgpOwogICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC5lcnJubyA9PSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRMaW5rID0gcmVzdWx0LnVybHNbMF0udXJsOwogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHJlc3VsdC5lcnJubyA9PSAxKXsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+aWh+S7tuS4jeWtmOWcqO+8gScpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYocmVzdWx0LmVycm5vID09IDIpewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgn5paH5Lu25LiN5a2Y5Zyo5oiW6ICF5bey6KKr55m+5bqm5ZKM6LCQ77yM5peg5rOV5LiL6L2977yBJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+WPkeeUn+mUmeivr++8gScpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGV4ZWNEb3dubG9hZChkb3dubG9hZExpbmspOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gbGlua0NsaWNrKGV2ZW50KXsKICAgICAgICAgICAgc2xvZygn6YCJ5Lit5paH5Lu25YiX6KGo77yaJyxzZWxlY3RGaWxlTGlzdCk7CiAgICAgICAgICAgIHZhciBpZCA9IGV2ZW50LnRhcmdldC5pZDsKICAgICAgICAgICAgdmFyIGxpbmtMaXN0LHRpcDsKCiAgICAgICAgICAgIGlmKGlkLmluZGV4T2YoJ2RpcmVjdCcpICE9IC0xKXsKICAgICAgICAgICAgICAgIHZhciBkb3dubG9hZFR5cGU7CiAgICAgICAgICAgICAgICB2YXIgZG93bmxvYWRMaW5rOwogICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoIuiOt+WPlumAieS4reaWh+S7tuWksei0pe+8jOivt+WIt+aWsOmHjeivle+8gSIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09IDEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0RmlsZUxpc3RbMF0uaXNkaXIgPT09IDEpCiAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkVHlwZSA9ICdiYXRjaCc7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc2VsZWN0RmlsZUxpc3RbMF0uaXNkaXIgPT09IDApCiAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkVHlwZT0gJ2RsaW5rJzsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZihzZWxlY3RGaWxlTGlzdC5sZW5ndGggPiAxKXsKICAgICAgICAgICAgICAgICAgICBkb3dubG9hZFR5cGUgPSAnYmF0Y2gnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZmlkX2xpc3QgPSBnZXRGaWRMaXN0KHNlbGVjdEZpbGVMaXN0KTsKICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBnZXREb3dubG9hZExpbmtXaXRoUGFuQVBJKGRvd25sb2FkVHlwZSk7CiAgICAgICAgICAgICAgICBpZihyZXN1bHQuZXJybm8gPT09IDApewogICAgICAgICAgICAgICAgICAgIGlmKGRvd25sb2FkVHlwZSA9PSAnZGxpbmsnKQogICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZExpbmsgPSByZXN1bHQuZGxpbmtbMF0uZGxpbms7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihkb3dubG9hZFR5cGUgPT0gJ2JhdGNoJyl7CiAgICAgICAgICAgICAgICAgICAgICAgIHNsb2coc2VsZWN0RmlsZUxpc3QpOwogICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZExpbmsgPSByZXN1bHQuZGxpbms7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGVjdEZpbGVMaXN0Lmxlbmd0aCA9PT0gMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkTGluayA9IGRvd25sb2FkTGluayArICcmemlwbmFtZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHNlbGVjdEZpbGVMaXN0WzBdLmZpbGVuYW1lKSArICcuemlwJzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoIuWPkeeUn+mUmeivr++8gSIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfWVsc2UgaWYocmVzdWx0LmVycm5vID09IC0xKXsKICAgICAgICAgICAgICAgICAgICBhbGVydCgn5paH5Lu25LiN5a2Y5Zyo5oiW5bey6KKr55m+5bqm5ZKM6LCQ77yM5peg5rOV5LiL6L2977yBJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfWVsc2UgaWYocmVzdWx0LmVycm5vID09IDExMil7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoIumhtemdoui/h+acn++8jOivt+WIt+aWsOmHjeivle+8gSIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCLlj5HnlJ/plJnor6/vvIEiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgaHR0cGxpbmsgPSBkb3dubG9hZExpbmsucmVwbGFjZSgvXihbQS1aYS16XSspOi8sJ2h0dHA6Jyk7CiAgICAgICAgICAgICAgICB2YXIgaHR0cHNsaW5rID0gZG93bmxvYWRMaW5rLnJlcGxhY2UoL14oW0EtWmEtel0rKTovLCdodHRwczonKTsKICAgICAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9ICcnOwogICAgICAgICAgICAgICAgJC5lYWNoKHNlbGVjdEZpbGVMaXN0LGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgICAgIGlmKHNlbGVjdEZpbGVMaXN0Lmxlbmd0aCA9PSAxKQogICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGVsZW1lbnQuZmlsZW5hbWU7CiAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaW5kZXggPT0wKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBlbGVtZW50LmZpbGVuYW1lOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lICsgJywnICsgZWxlbWVudC5maWxlbmFtZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGxpbmtMaXN0ID0gewogICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOmZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgIHVybHM6WwogICAgICAgICAgICAgICAgICAgICAgICB7dXJsOmh0dHBsaW5rLHJhbms6MX0sCiAgICAgICAgICAgICAgICAgICAgICAgIHt1cmw6aHR0cHNsaW5rLHJhbms6Mn0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdGlwID0gJ+aYvuekuuaooeaLn+eZvuW6pue9keebmOe9kemhteiOt+WPlueahOmTvuaOpe+8jOWPr+S7peS9v+eUqOWPs+mUrui/hembt+S4i+i9ve+8jOWkjeWItuWIsOS4i+i9veW3peWFt+mcgOimgeS8oOmAkmNvb2tpZe+8jOWkmuaWh+S7tuaJk+WMheS4i+i9veeahOmTvuaOpeWPr+S7peebtOaOpeWkjeWItuS9v+eUqCc7CiAgICAgICAgICAgICAgICBkaWFsb2cub3Blbih7dGl0bGU6J+S4i+i9vemTvuaOpScsdHlwZTonbGluaycsbGlzdDpsaW5rTGlzdCx0aXA6dGlwfSk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoIuiOt+WPlumAieS4reaWh+S7tuWksei0pe+8jOivt+WIt+aWsOmHjeivle+8gSIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCLor6Xmlrnms5XkuI3mlK/mjIHlpJrmlofku7bkuIvovb3vvIEiKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmKHNlbGVjdEZpbGVMaXN0WzBdLmlzZGlyID09IDEpewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgi6K+l5pa55rOV5LiN5pSv5oyB55uu5b2V5LiL6L2977yBIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihpZC5pbmRleE9mKCdhcGknKSAhPSAtMSl7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRvd25sb2FkTGluayA9IGdldERvd25sb2FkTGlua1dpdGhSRVNUQVBJQmFpZHUoc2VsZWN0RmlsZUxpc3RbMF0ucGF0aCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGh0dHBsaW5rID0gZG93bmxvYWRMaW5rLnJlcGxhY2UoL14oW0EtWmEtel0rKTovLCdodHRwOicpOwogICAgICAgICAgICAgICAgICAgIHZhciBodHRwc2xpbmsgPSBkb3dubG9hZExpbmsucmVwbGFjZSgvXihbQS1aYS16XSspOi8sJ2h0dHBzOicpOwogICAgICAgICAgICAgICAgICAgIGxpbmtMaXN0ID0gewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTpzZWxlY3RGaWxlTGlzdFswXS5maWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgdXJsczpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dXJsOmh0dHBsaW5rLHJhbms6MX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dXJsOmh0dHBzbGluayxyYW5rOjJ9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGh0dHBsaW5rID0gaHR0cGxpbmsucmVwbGFjZSgnMjUwNTI4JywnMjY2NzE5Jyk7CiAgICAgICAgICAgICAgICAgICAgaHR0cHNsaW5rID0gaHR0cHNsaW5rLnJlcGxhY2UoJzI1MDUyOCcsJzI2NjcxOScpOwogICAgICAgICAgICAgICAgICAgIGxpbmtMaXN0LnVybHMucHVzaCh7dXJsOmh0dHBsaW5rLHJhbms6M30pOwogICAgICAgICAgICAgICAgICAgIGxpbmtMaXN0LnVybHMucHVzaCh7dXJsOmh0dHBzbGluayxyYW5rOjR9KTsKICAgICAgICAgICAgICAgICAgICB0aXAgPSAn5pi+56S65qih5oufQVBQ6I635Y+W55qE6ZO+5o6lKOS9v+eUqOeZvuW6puS6kUlEKe+8jOWPr+S7peS9v+eUqOWPs+mUrui/hembt+S4i+i9ve+8jOWkjeWItuWIsOS4i+i9veW3peWFt+mcgOimgeS8oOmAkmNvb2tpZSc7CiAgICAgICAgICAgICAgICAgICAgZGlhbG9nLm9wZW4oe3RpdGxlOifkuIvovb3pk77mjqUnLHR5cGU6J2xpbmsnLGxpc3Q6bGlua0xpc3QsdGlwOnRpcH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpZC5pbmRleE9mKCdvdXRlcmxpbmsnKSAhPSAtMSl7CiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGdldERvd25sb2FkTGlua1dpdGhDbGllbnRBUEkoc2VsZWN0RmlsZUxpc3RbMF0ucGF0aCk7CiAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0LmVycm5vID09IDApewogICAgICAgICAgICAgICAgICAgICAgICBsaW5rTGlzdCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOnNlbGVjdEZpbGVMaXN0WzBdLmZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsczpyZXN1bHQudXJscwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKHJlc3VsdC5lcnJubyA9PSAxKXsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+aWh+S7tuS4jeWtmOWcqO+8gScpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYocmVzdWx0LmVycm5vID09IDIpewogICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgn5paH5Lu25LiN5a2Y5Zyo5oiW6ICF5bey6KKr55m+5bqm5ZKM6LCQ77yM5peg5rOV5LiL6L2977yBJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+WPkeeUn+mUmeivr++8gScpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHRpcCA9ICfmmL7npLrmqKHmi5/nmb7luqbnvZHnm5jlrqLmiLfnq6/ojrflj5bnmoTpk77mjqXvvIzlj6/ku6Xnm7TmjqXlpI3liLbliLDkuIvovb3lt6Xlhbfkvb/nlKjvvIzkuI3pnIDopoFjb29raWUnOwogICAgICAgICAgICAgICAgICAgIGRpYWxvZy5vcGVuKHt0aXRsZTon5LiL6L296ZO+5o6lJyx0eXBlOidsaW5rJyxsaXN0OmxpbmtMaXN0LHRpcDp0aXAsc2hvd2NvcHk6dHJ1ZSxzaG93ZWRpdDp0cnVlfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy9kaWFsb2cub3Blbih7dGl0bGU6J+S4i+i9vemTvuaOpScsdHlwZTonbGluaycsbGlzdDpsaW5rTGlzdCx0aXA6dGlwfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBiYXRjaENsaWNrKGV2ZW50KXsKICAgICAgICAgICAgc2xvZygn6YCJ5Lit5paH5Lu25YiX6KGo77yaJyxzZWxlY3RGaWxlTGlzdCk7CiAgICAgICAgICAgIGlmKHNlbGVjdEZpbGVMaXN0Lmxlbmd0aCA9PT0gMCl7CiAgICAgICAgICAgICAgICBhbGVydCgn6I635Y+W6YCJ5Lit5paH5Lu25aSx6LSl77yM6K+35Yi35paw6YeN6K+V77yBJyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlkID0gZXZlbnQudGFyZ2V0LmlkOwogICAgICAgICAgICB2YXIgbGlua1R5cGUsdGlwOwogICAgICAgICAgICBsaW5rVHlwZSA9IGlkLmluZGV4T2YoJ2h0dHBzJykgPT0gLTEgPyAoaWQuaW5kZXhPZignaHR0cCcpID09IC0xID8gbG9jYXRpb24ucHJvdG9jb2wrJzonIDogJ2h0dHA6JykgOiAnaHR0cHM6JzsKICAgICAgICAgICAgYmF0Y2hMaW5rTGlzdCA9IFtdOwogICAgICAgICAgICBiYXRjaExpbmtMaXN0QWxsID0gW107CiAgICAgICAgICAgIGlmKGlkLmluZGV4T2YoJ2RpcmVjdCcpICE9IC0xKXsKICAgICAgICAgICAgICAgIGJhdGNoTGlua0xpc3QgPSBnZXREaXJlY3RCYXRjaExpbmsobGlua1R5cGUpOwogICAgICAgICAgICAgICAgdGlwID0gJ+aYvuekuuaJgOaciemAieS4reaWh+S7tueahOebtOaOpeS4i+i9vemTvuaOpe+8jOaWh+S7tuWkueaYvuekuuS4uuaJk+WMheS4i+i9veeahOmTvuaOpSc7CiAgICAgICAgICAgICAgICBpZihiYXRjaExpbmtMaXN0Lmxlbmd0aCA9PT0gMCl7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+ayoeaciemTvuaOpeWPr+S7peaYvuekuu+8jEFQSemTvuaOpeS4jeimgeWFqOmDqOmAieS4reaWh+S7tuWkue+8gScpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGRpYWxvZy5vcGVuKHt0aXRsZTon5om56YeP6ZO+5o6lJyx0eXBlOidiYXRjaCcsbGlzdDpiYXRjaExpbmtMaXN0LHRpcDp0aXAsc2hvd2NvcHk6dHJ1ZX0pOwogICAgICAgICAgICB9IGVsc2UgaWYoaWQuaW5kZXhPZignYXBpJykgIT0gLTEpewogICAgICAgICAgICAgICAgYmF0Y2hMaW5rTGlzdCA9IGdldEFQSUJhdGNoTGluayhsaW5rVHlwZSk7CiAgICAgICAgICAgICAgICB0aXAgPSAn5pi+56S65omA5pyJ6YCJ5Lit5paH5Lu255qEQVBJ5LiL6L296ZO+5o6l77yM5LiN5pi+56S65paH5Lu25aS5JzsKICAgICAgICAgICAgICAgIGlmKGJhdGNoTGlua0xpc3QubGVuZ3RoID09PSAwKXsKICAgICAgICAgICAgICAgICAgICBhbGVydCgn5rKh5pyJ6ZO+5o6l5Y+v5Lul5pi+56S677yMQVBJ6ZO+5o6l5LiN6KaB5YWo6YOo6YCJ5Lit5paH5Lu25aS577yBJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGlhbG9nLm9wZW4oe3RpdGxlOifmibnph4/pk77mjqUnLHR5cGU6J2JhdGNoJyxsaXN0OmJhdGNoTGlua0xpc3QsdGlwOnRpcCxzaG93Y29weTp0cnVlfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZihpZC5pbmRleE9mKCdvdXRlcmxpbmsnKSAhPSAtMSl7CiAgICAgICAgICAgICAgICBiYXRjaExpbmtMaXN0QWxsID0gZ2V0T3V0ZXJsaW5rQmF0Y2hMaW5rQWxsKCk7CiAgICAgICAgICAgICAgICBiYXRjaExpbmtMaXN0ID0gZ2V0T3V0ZXJsaW5rQmF0Y2hMaW5rRmlyc3QoYmF0Y2hMaW5rTGlzdEFsbCk7CiAgICAgICAgICAgICAgICB0aXAgPSAn5pi+56S65omA5pyJ6YCJ5Lit5paH5Lu255qE5aSW6YOo5LiL6L296ZO+5o6l77yM5LiN5pi+56S65paH5Lu25aS5JzsKICAgICAgICAgICAgICAgIGlmKGJhdGNoTGlua0xpc3QubGVuZ3RoID09PSAwKXsKICAgICAgICAgICAgICAgICAgICBhbGVydCgn5rKh5pyJ6ZO+5o6l5Y+v5Lul5pi+56S677yMQVBJ6ZO+5o6l5LiN6KaB5YWo6YOo6YCJ5Lit5paH5Lu25aS577yBJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGRpYWxvZy5vcGVuKHt0aXRsZTon5om56YeP6ZO+5o6lJyx0eXBlOidiYXRjaCcsbGlzdDpiYXRjaExpbmtMaXN0LHRpcDp0aXAsc2hvd2NvcHk6dHJ1ZSxhbGxsaXN0OmJhdGNoTGlua0xpc3RBbGwsc2hvd2FsbDp0cnVlfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vZGlhbG9nLm9wZW4oe3RpdGxlOifmibnph4/pk77mjqUnLHR5cGU6J2JhdGNoJyxsaXN0OmJhdGNoTGlua0xpc3QsdGlwOnRpcCxzaG93Y29weTp0cnVlfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXREaXJlY3RCYXRjaExpbmsobGlua1R5cGUpewogICAgICAgICAgICB2YXIgbGlzdCA9IFtdOwogICAgICAgICAgICAkLmVhY2goc2VsZWN0RmlsZUxpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICB2YXIgZG93bmxvYWRUeXBlLGRvd25sb2FkTGluayxyZXN1bHQ7CiAgICAgICAgICAgICAgICBpZihlbGVtZW50LmlzZGlyID09IDApCiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRUeXBlID0gJ2RsaW5rJzsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBkb3dubG9hZFR5cGUgPSAnYmF0Y2gnOwogICAgICAgICAgICAgICAgZmlkX2xpc3QgPSBnZXRGaWRMaXN0KFtlbGVtZW50XSk7CiAgICAgICAgICAgICAgICByZXN1bHQgPSBnZXREb3dubG9hZExpbmtXaXRoUGFuQVBJKGRvd25sb2FkVHlwZSk7CiAgICAgICAgICAgICAgICBpZihyZXN1bHQuZXJybm8gPT0gMCl7CiAgICAgICAgICAgICAgICAgICAgaWYoZG93bmxvYWRUeXBlID09ICdkbGluaycpCiAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkTGluayA9IHJlc3VsdC5kbGlua1swXS5kbGluazsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGRvd25sb2FkVHlwZSA9PSAnYmF0Y2gnKQogICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZExpbmsgPSByZXN1bHQuZGxpbms7CiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRMaW5rID0gZG93bmxvYWRMaW5rLnJlcGxhY2UoL14oW0EtWmEtel0rKTovLGxpbmtUeXBlKTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIGRvd25sb2FkTGluayA9ICdlcnJvcic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBsaXN0LnB1c2goe2ZpbGVuYW1lOmVsZW1lbnQuZmlsZW5hbWUsZG93bmxvYWRsaW5rOmRvd25sb2FkTGlua30pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGxpc3Q7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRBUElCYXRjaExpbmsobGlua1R5cGUpewogICAgICAgICAgICB2YXIgbGlzdCA9IFtdOwogICAgICAgICAgICAkLmVhY2goc2VsZWN0RmlsZUxpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICBpZihlbGVtZW50LmlzZGlyID09IDEpCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgdmFyIGRvd25sb2FkTGluazsKICAgICAgICAgICAgICAgIGRvd25sb2FkTGluayA9IGdldERvd25sb2FkTGlua1dpdGhSRVNUQVBJQmFpZHUoZWxlbWVudC5wYXRoKTsKICAgICAgICAgICAgICAgIGRvd25sb2FkTGluayA9IGRvd25sb2FkTGluay5yZXBsYWNlKC9eKFtBLVphLXpdKyk6LyxsaW5rVHlwZSk7CiAgICAgICAgICAgICAgICBsaXN0LnB1c2goe2ZpbGVuYW1lOmVsZW1lbnQuZmlsZW5hbWUsZG93bmxvYWRsaW5rOmRvd25sb2FkTGlua30pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGxpc3Q7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRPdXRlcmxpbmtCYXRjaExpbmtBbGwoKXsKICAgICAgICAgICAgdmFyIGxpc3QgPSBbXTsKICAgICAgICAgICAgJC5lYWNoKHNlbGVjdEZpbGVMaXN0LGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuaXNkaXIgPT0gMSkKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICByZXN1bHQgPSBnZXREb3dubG9hZExpbmtXaXRoQ2xpZW50QVBJKGVsZW1lbnQucGF0aCk7CiAgICAgICAgICAgICAgICBpZihyZXN1bHQuZXJybm8gPT0gMCl7CiAgICAgICAgICAgICAgICAgICAgLy9kb3dubG9hZExpbmsgPSByZXN1bHQudXJsc1swXS51cmw7CiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKHtmaWxlbmFtZTplbGVtZW50LmZpbGVuYW1lLGxpbmtzOnJlc3VsdC51cmxzfSk7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICAvL2Rvd25sb2FkTGluayA9ICdlcnJvcic7CiAgICAgICAgICAgICAgICAgICAgbGlzdC5wdXNoKHtmaWxlbmFtZTplbGVtZW50LmZpbGVuYW1lLGxpbmtzOlt7cmFuazoxLHVybDonZXJyb3InfV19KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vbGlzdC5wdXNoKHtmaWxlbmFtZTplbGVtZW50LmZpbGVuYW1lLGRvd25sb2FkbGluazpkb3dubG9hZExpbmt9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBsaXN0OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0T3V0ZXJsaW5rQmF0Y2hMaW5rRmlyc3QobGlzdCl7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTsKICAgICAgICAgICAgJC5lYWNoKGxpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7ZmlsZW5hbWU6ZWxlbWVudC5maWxlbmFtZSxkb3dubG9hZGxpbms6ZWxlbWVudC5saW5rc1swXS51cmx9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRTaWduKCl7CiAgICAgICAgICAgIHZhciBzaWduRm5jOwogICAgICAgICAgICB0cnl7CiAgICAgICAgICAgICAgICBzaWduRm5jID0gbmV3IEZ1bmN0aW9uKCJyZXR1cm4gIiArIHl1bkRhdGEuc2lnbjIpKCk7CiAgICAgICAgICAgIH0gY2F0Y2goZSl7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gYmFzZTY0RW5jb2RlKHNpZ25GbmMoeXVuRGF0YS5zaWduNSx5dW5EYXRhLnNpZ24xKSk7CiAgICAgICAgfQoKICAgICAgICAvL+iOt+WPluW9k+WJjeebruW9lQogICAgICAgIGZ1bmN0aW9uIGdldFBhdGgoKXsKICAgICAgICAgICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoOwogICAgICAgICAgICB2YXIgcmVneCA9IC8oXnwmfFwvKXBhdGg9KFteJl0qKSgmfCQpL2k7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBoYXNoLm1hdGNoKHJlZ3gpOwogICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdFsyXSk7CiAgICAgICAgfQoKICAgICAgICAvL+iOt+WPluWIhuexu+aYvuekuueahOexu+WIq++8jOWNs+WcsOWdgOagj+S4reeahHR5cGUKICAgICAgICBmdW5jdGlvbiBnZXRDYXRlZ29yeSgpewogICAgICAgICAgICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2g7CiAgICAgICAgICAgIHZhciByZWd4ID0gLyhefCZ8XC8pdHlwZT0oW14mXSopKCZ8JCkvaTsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGhhc2gubWF0Y2gocmVneCk7CiAgICAgICAgICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0WzJdKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldFNlYXJjaEtleSgpewogICAgICAgICAgICB2YXIgaGFzaCA9IGxvY2F0aW9uLmhhc2g7CiAgICAgICAgICAgIHZhciByZWd4ID0gLyhefCZ8XC8pa2V5PShbXiZdKikoJnwkKS9pOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gaGFzaC5tYXRjaChyZWd4KTsKICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRbMl0pOwogICAgICAgIH0KCiAgICAgICAgLy/ojrflj5blvZPliY3pobXpnaIobGlzdOaIluiAhWNhdGVnb3J5KQogICAgICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRQYWdlKCl7CiAgICAgICAgICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDsKICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChoYXNoLnN1YnN0cmluZyhoYXNoLmluZGV4T2YoJyMnKSsxLGhhc2guaW5kZXhPZignLycpKSk7CiAgICAgICAgfQoKICAgICAgICAvL+iOt+WPluaWh+S7tuWIl+ihqAogICAgICAgIGZ1bmN0aW9uIGdldEZpbGVMaXN0KCl7CiAgICAgICAgICAgIHZhciBmaWxlbGlzdCA9IFtdOwogICAgICAgICAgICB2YXIgbGlzdFVybCA9IHBhbkFQSVVybCArICJsaXN0IjsKICAgICAgICAgICAgdmFyIHBhdGggPSBnZXRQYXRoKCk7CiAgICAgICAgICAgIGxvZ2lkID0gZ2V0TG9nSUQoKTsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHsKICAgICAgICAgICAgICAgIGRpcjpwYXRoLAogICAgICAgICAgICAgICAgYmRzdG9rZW46YmRzdG9rZW4sCiAgICAgICAgICAgICAgICBsb2dpZDpsb2dpZCwKICAgICAgICAgICAgICAgIG9yZGVyOidzaXplJywKICAgICAgICAgICAgICAgIGRlc2M6MCwKICAgICAgICAgICAgICAgIGNsaWVudHR5cGU6MCwKICAgICAgICAgICAgICAgIHNob3dlbXB0eTowLAogICAgICAgICAgICAgICAgd2ViOjEsCiAgICAgICAgICAgICAgICBjaGFubmVsOidjaHVubGVpJywKICAgICAgICAgICAgICAgIGFwcGlkOjI1MDUyOAogICAgICAgICAgICB9OwogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOmxpc3RVcmwsCiAgICAgICAgICAgICAgICBhc3luYzpmYWxzZSwKICAgICAgICAgICAgICAgIG1ldGhvZDonR0VUJywKICAgICAgICAgICAgICAgIGRhdGE6cGFyYW1zLAogICAgICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgZmlsZWxpc3QgPSAwPT09cmVzcG9uc2UuZXJybm8gPyByZXNwb25zZS5saXN0IDogW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmlsZWxpc3Q7CiAgICAgICAgfQoKICAgICAgICAvL+iOt+WPluWIhuexu+mhtemdouS4i+eahOaWh+S7tuWIl+ihqAogICAgICAgIGZ1bmN0aW9uIGdldENhdGVnb3J5RmlsZUxpc3QoKXsKICAgICAgICAgICAgdmFyIGZpbGVsaXN0ID0gW107CiAgICAgICAgICAgIHZhciBsaXN0VXJsID0gcGFuQVBJVXJsICsgImNhdGVnb3J5bGlzdCI7CiAgICAgICAgICAgIHZhciBjYXRlZ29yeSA9IGdldENhdGVnb3J5KCk7CiAgICAgICAgICAgIGxvZ2lkID0gZ2V0TG9nSUQoKTsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHsKICAgICAgICAgICAgICAgIGNhdGVnb3J5OmNhdGVnb3J5LAogICAgICAgICAgICAgICAgYmRzdG9rZW46YmRzdG9rZW4sCiAgICAgICAgICAgICAgICBsb2dpZDpsb2dpZCwKICAgICAgICAgICAgICAgIG9yZGVyOidzaXplJywKICAgICAgICAgICAgICAgIGRlc2M6MCwKICAgICAgICAgICAgICAgIGNsaWVudHR5cGU6MCwKICAgICAgICAgICAgICAgIHNob3dlbXB0eTowLAogICAgICAgICAgICAgICAgd2ViOjEsCiAgICAgICAgICAgICAgICBjaGFubmVsOidjaHVubGVpJywKICAgICAgICAgICAgICAgIGFwcGlkOjI1MDUyOAogICAgICAgICAgICB9OwogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOmxpc3RVcmwsCiAgICAgICAgICAgICAgICBhc3luYzpmYWxzZSwKICAgICAgICAgICAgICAgIG1ldGhvZDonR0VUJywKICAgICAgICAgICAgICAgIGRhdGE6cGFyYW1zLAogICAgICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgZmlsZWxpc3QgPSAwPT09cmVzcG9uc2UuZXJybm8gPyByZXNwb25zZS5pbmZvIDogW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmlsZWxpc3Q7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRTZWFyY2hGaWxlTGlzdCgpewogICAgICAgICAgICB2YXIgZmlsZWxpc3QgPSBbXTsKICAgICAgICAgICAgdmFyIGxpc3RVcmwgPSBwYW5BUElVcmwgKyAnc2VhcmNoJzsKICAgICAgICAgICAgbG9naWQgPSBnZXRMb2dJRCgpOwogICAgICAgICAgICBzZWFyY2hLZXkgPSBnZXRTZWFyY2hLZXkoKTsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHsKICAgICAgICAgICAgICAgIHJlY3Vyc2lvbjoxLAogICAgICAgICAgICAgICAgb3JkZXI6J3RpbWUnLAogICAgICAgICAgICAgICAgZGVzYzoxLAogICAgICAgICAgICAgICAgc2hvd2VtcHR5OjAsCiAgICAgICAgICAgICAgICB3ZWI6MSwKICAgICAgICAgICAgICAgIHBhZ2U6MSwKICAgICAgICAgICAgICAgIG51bToxMDAsCiAgICAgICAgICAgICAgICBrZXk6c2VhcmNoS2V5LAogICAgICAgICAgICAgICAgY2hhbm5lbDonY2h1bmxlaScsCiAgICAgICAgICAgICAgICBhcHBfaWQ6MjUwNTI4LAogICAgICAgICAgICAgICAgYmRzdG9rZW46YmRzdG9rZW4sCiAgICAgICAgICAgICAgICBsb2dpZDpsb2dpZCwKICAgICAgICAgICAgICAgIGNsaWVudHR5cGU6MAogICAgICAgICAgICB9OwogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOmxpc3RVcmwsCiAgICAgICAgICAgICAgICBhc3luYzpmYWxzZSwKICAgICAgICAgICAgICAgIG1ldGhvZDonR0VUJywKICAgICAgICAgICAgICAgIGRhdGE6cGFyYW1zLAogICAgICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgZmlsZWxpc3QgPSAwPT09cmVzcG9uc2UuZXJybm8gPyByZXNwb25zZS5saXN0IDogW107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmlsZWxpc3Q7CiAgICAgICAgfQoKICAgICAgICAvL+eUn+aIkOS4i+i9veaXtueahGZpZF9saXN05Y+C5pWwCiAgICAgICAgZnVuY3Rpb24gZ2V0RmlkTGlzdChsaXN0KXsKICAgICAgICAgICAgdmFyIGZpZGxpc3QgPSBudWxsOwogICAgICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDApCiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgdmFyIGZpbGVpZGxpc3QgPSBbXTsKICAgICAgICAgICAgJC5lYWNoKGxpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICBmaWxlaWRsaXN0LnB1c2goZWxlbWVudC5mc19pZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBmaWRsaXN0ID0gJ1snICsgZmlsZWlkbGlzdCArICddJzsKICAgICAgICAgICAgcmV0dXJuIGZpZGxpc3Q7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRUaW1lc3RhbXAoKXsKICAgICAgICAgICAgcmV0dXJuIHl1bkRhdGEudGltZXN0YW1wOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0QkRTdG9rZW4oKXsKICAgICAgICAgICAgcmV0dXJuIHl1bkRhdGEuTVlCRFNUT0tFTjsKICAgICAgICB9CgogICAgICAgIC8v6I635Y+W55u05o6l5LiL6L295Zyw5Z2ACiAgICAgICAgLy/ov5nkuKrlnLDlnYDkuI3mmK/nm7TmjqXkuIvovb3lnLDlnYDvvIzorr/pl67ov5nkuKrlnLDlnYDkvJrov5Tlm54zMDLvvIxyZXNwb25zZSBoZWFkZXLkuK3nmoRsb2NhdGlvbuaJjeaYr+ecn+WunuS4i+i9veWcsOWdgAogICAgICAgIC8v5pqC5pe25rKh5pyJ5om+5Yiw5o+Q5Y+W5pa55rOVCiAgICAgICAgZnVuY3Rpb24gZ2V0RG93bmxvYWRMaW5rV2l0aFBhbkFQSSh0eXBlKXsKICAgICAgICAgICAgdmFyIGRvd25sb2FkVXJsID0gcGFuQVBJVXJsICsgImRvd25sb2FkIjsKICAgICAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICAgICAgbG9naWQgPSBnZXRMb2dJRCgpOwogICAgICAgICAgICB2YXIgcGFyYW1zPSB7CiAgICAgICAgICAgICAgICBzaWduOnNpZ24sCiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6dGltZXN0YW1wLAogICAgICAgICAgICAgICAgZmlkbGlzdDpmaWRfbGlzdCwKICAgICAgICAgICAgICAgIHR5cGU6dHlwZSwKICAgICAgICAgICAgICAgIGNoYW5uZWw6J2NodW5sZWknLAogICAgICAgICAgICAgICAgd2ViOjEsCiAgICAgICAgICAgICAgICBhcHBfaWQ6MjUwNTI4LAogICAgICAgICAgICAgICAgYmRzdG9rZW46YmRzdG9rZW4sCiAgICAgICAgICAgICAgICBsb2dpZDpsb2dpZCwKICAgICAgICAgICAgICAgIGNsaWVudHR5cGU6MAogICAgICAgICAgICB9OwogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOmRvd25sb2FkVXJsLAogICAgICAgICAgICAgICAgYXN5bmM6ZmFsc2UsCiAgICAgICAgICAgICAgICBtZXRob2Q6J0dFVCcsCiAgICAgICAgICAgICAgICBkYXRhOnBhcmFtcywKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ZnVuY3Rpb24ocmVzcG9uc2UpewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGdldERvd25sb2FkTGlua1dpdGhSRVNUQVBJQmFpZHUocGF0aCl7CiAgICAgICAgICAgIHZhciBsaW5rID0gcmVzdEFQSVVybCArICdmaWxlP21ldGhvZD1kb3dubG9hZCZhcHBfaWQ9MjUwNTI4JnBhdGg9JyArIGVuY29kZVVSSUNvbXBvbmVudChwYXRoKTsKICAgICAgICAgICAgcmV0dXJuIGxpbms7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXREb3dubG9hZExpbmtXaXRoUkVTVEFQSUVTKHBhdGgpewogICAgICAgICAgICB2YXIgbGluayA9IHJlc3RBUElVcmwgKyAnZmlsZT9tZXRob2Q9ZG93bmxvYWQmYXBwX2lkPTI2NjcxOSZwYXRoPScgKyBlbmNvZGVVUklDb21wb25lbnQocGF0aCk7CiAgICAgICAgICAgIHJldHVybiBsaW5rOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZ2V0RG93bmxvYWRMaW5rV2l0aENsaWVudEFQSShwYXRoKXsKICAgICAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICAgICAgdmFyIHVybCA9IGNsaWVudEFQSVVybCArICdmaWxlP21ldGhvZD1sb2NhdGVkb3dubG9hZCZhcHBfaWQ9MjUwNTI4JnZlcj00LjAmcGF0aD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhdGgpOwogICAgICAgICAgICAkLmFqYXgoewogICAgICAgICAgICAgICAgdXJsOnVybCwKICAgICAgICAgICAgICAgIG1ldGhvZDonUE9TVCcsCiAgICAgICAgICAgICAgICB4aHJGaWVsZHM6IHsKICAgICAgICAgICAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRydWUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhc3luYzpmYWxzZSwKICAgICAgICAgICAgICAgIHN1Y2Nlc3M6ZnVuY3Rpb24ocmVzcG9uc2UpewogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6ewogICAgICAgICAgICAgICAgICAgIDQwNDpmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmKHJlc3VsdCl7CiAgICAgICAgICAgICAgICBpZihyZXN1bHQuZXJyb3JfY29kZSA9PSB1bmRlZmluZWQpewogICAgICAgICAgICAgICAgICAgIGlmKHJlc3VsdC51cmxzID09IHVuZGVmaW5lZCl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJubyA9IDI7CiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChyZXN1bHQudXJscyxmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC51cmxzW2luZGV4XS51cmwgPSBlbGVtZW50LnVybC5yZXBsYWNlKCdcXCcsJycpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmVycm5vID0gMDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9ZWxzZSBpZihyZXN1bHQuZXJyb3JfY29kZSA9PSAzMTA2Nil7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmVycm5vID0gMTsKICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5lcnJubyA9IC0xOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHt9OwogICAgICAgICAgICAgICAgcmVzdWx0LmVycm5vID0gLTE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGV4ZWNEb3dubG9hZChsaW5rKXsKICAgICAgICAgICAgc2xvZygi5LiL6L296ZO+5o6l77yaIitsaW5rKTsKICAgICAgICAgICAgJCgnI2hlbHBlcmRvd25sb2FkaWZyYW1lJykuYXR0cignc3JjJyxsaW5rKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUlmcmFtZSgpewogICAgICAgICAgICB2YXIgJGRpdiA9ICQoJzxkaXYgY2xhc3M9ImhlbHBlci1oaWRlIiBzdHlsZT0icGFkZGluZzowO21hcmdpbjowO2Rpc3BsYXk6YmxvY2siPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGlmcmFtZSA9ICQoJzxpZnJhbWUgc3JjPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGlkPSJoZWxwZXJkb3dubG9hZGlmcmFtZSIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+PC9pZnJhbWU+Jyk7CiAgICAgICAgICAgICRkaXYuYXBwZW5kKCRpZnJhbWUpOwogICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKCRkaXYpOwoKICAgICAgICB9CiAgICB9CgogICAgLy/liIbkuqvpobXpnaLnmoTkuIvovb3liqnmiYsKICAgIGZ1bmN0aW9uIFBhblNoYXJlSGVscGVyKCl7CiAgICAgICAgdmFyIHl1bkRhdGEsc2lnbix0aW1lc3RhbXAsYmRzdG9rZW4sY2hhbm5lbCxjbGllbnR0eXBlLHdlYixhcHBfaWQsbG9naWQsZW5jcnlwdCxwcm9kdWN0LHVrLHByaW1hcnlpZCxmaWRfbGlzdCxleHRyYSxzaGFyZWlkOwogICAgICAgIHZhciB2Y29kZTsKICAgICAgICB2YXIgc2hhcmVUeXBlLGJ1dHRvblRhcmdldCxjdXJyZW50UGF0aCxsaXN0X2dyaWRfc3RhdHVzLG9ic2VydmVyLGRpYWxvZyx2Y29kZURpYWxvZzsKICAgICAgICB2YXIgZmlsZUxpc3Q9W10sc2VsZWN0RmlsZUxpc3Q9W107CiAgICAgICAgdmFyIHBhbkFQSVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgIi8vIiArIGxvY2F0aW9uLmhvc3QgKyAiL2FwaS8iOwogICAgICAgIHZhciBzaGFyZUxpc3RVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArICIvLyIgKyBsb2NhdGlvbi5ob3N0ICsgIi9zaGFyZS9saXN0IjsKCiAgICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgeXVuRGF0YSA9IHVuc2FmZVdpbmRvdy55dW5EYXRhOwogICAgICAgICAgICBzbG9nKCd5dW5EYXRhOicseXVuRGF0YSk7CiAgICAgICAgICAgIGlmKHl1bkRhdGEgPT09IHVuZGVmaW5lZCB8fCB5dW5EYXRhLkZJTEVJTkZPID09IG51bGwpewogICAgICAgICAgICAgICAgc2xvZygn6aG16Z2i5pyq5q2j5bi45Yqg6L2977yM5oiW6ICF55m+5bqm5bey57uP5pu05paw77yBJyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaW5pdFBhcmFtcygpOwogICAgICAgICAgICBhZGRCdXR0b24oKTsKICAgICAgICAgICAgZGlhbG9nID0gbmV3IERpYWxvZyh7YWRkQ29weTpmYWxzZX0pOwogICAgICAgICAgICB2Y29kZURpYWxvZyA9IG5ldyBWQ29kZURpYWxvZyhyZWZyZXNoVkNvZGUsY29uZmlybUNsaWNrKTsKICAgICAgICAgICAgY3JlYXRlSWZyYW1lKCk7CgogICAgICAgICAgICBpZighaXNTaW5nbGVTaGFyZSgpKXsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyRXZlbnRMaXN0ZW5lcigpOwogICAgICAgICAgICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2xvZygn5YiG5Lqr55u05o6l5LiL6L295Yqg6L295oiQ5YqfIScpOwogICAgICAgIH07CgogICAgICAgIGZ1bmN0aW9uIGluaXRQYXJhbXMoKXsKICAgICAgICAgICAgc2hhcmVUeXBlID0gZ2V0U2hhcmVUeXBlKCk7CiAgICAgICAgICAgIHNpZ24gPSB5dW5EYXRhLlNJR047CiAgICAgICAgICAgIHRpbWVzdGFtcCA9IHl1bkRhdGEuVElNRVNUQU1QOwogICAgICAgICAgICBiZHN0b2tlbiA9IHl1bkRhdGEuTVlCRFNUT0tFTjsKICAgICAgICAgICAgY2hhbm5lbCA9ICdjaHVubGVpJzsKICAgICAgICAgICAgY2xpZW50dHlwZSA9IDA7CiAgICAgICAgICAgIHdlYiA9IDE7CiAgICAgICAgICAgIGFwcF9pZCA9IDI1MDUyODsKICAgICAgICAgICAgbG9naWQgPSBnZXRMb2dJRCgpOwogICAgICAgICAgICBlbmNyeXB0ID0gMDsKICAgICAgICAgICAgcHJvZHVjdCA9ICdzaGFyZSc7CiAgICAgICAgICAgIHByaW1hcnlpZCA9IHl1bkRhdGEuU0hBUkVfSUQ7CiAgICAgICAgICAgIHVrID0geXVuRGF0YS5TSEFSRV9VSzsKCiAgICAgICAgICAgIGlmKHNoYXJlVHlwZSA9PSAnc2VjcmV0Jyl7CiAgICAgICAgICAgICAgICBleHRyYSA9IGdldEV4dHJhKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoaXNTaW5nbGVTaGFyZSgpKXsKICAgICAgICAgICAgICAgIHZhciBvYmogPSB7fTsKICAgICAgICAgICAgICAgIGlmKHl1bkRhdGEuQ0FURUdPUlkgPT0gMil7CiAgICAgICAgICAgICAgICAgICAgb2JqLmZpbGVuYW1lID0geXVuRGF0YS5GSUxFTkFNRTsKICAgICAgICAgICAgICAgICAgICBvYmoucGF0aCA9IHl1bkRhdGEuUEFUSDsKICAgICAgICAgICAgICAgICAgICBvYmouZnNfaWQgPSB5dW5EYXRhLkZTX0lEOwogICAgICAgICAgICAgICAgICAgIG9iai5pc2RpciA9IDA7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9iai5maWxlbmFtZSA9IHl1bkRhdGEuRklMRUlORk9bMF0uc2VydmVyX2ZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBvYmoucGF0aCA9IHl1bkRhdGEuRklMRUlORk9bMF0ucGF0aCwKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmZzX2lkID0geXVuRGF0YS5GSUxFSU5GT1swXS5mc19pZCwKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmlzZGlyID15dW5EYXRhLkZJTEVJTkZPWzBdLmlzZGlyCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdC5wdXNoKG9iaik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBzaGFyZWlkID0geXVuRGF0YS5TSEFSRV9JRDsKICAgICAgICAgICAgICAgIGN1cnJlbnRQYXRoID0gZ2V0UGF0aCgpOwogICAgICAgICAgICAgICAgbGlzdF9ncmlkX3N0YXR1cyA9IGdldExpc3RHcmlkU3RhdHVzKCk7CiAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IGdldEZpbGVMaXN0KCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8v5Yik5pat5YiG5Lqr57G75Z6L77yIcHVibGlj5oiW6ICFc2VjcmV077yJCiAgICAgICAgZnVuY3Rpb24gZ2V0U2hhcmVUeXBlKCl7CiAgICAgICAgICAgIHJldHVybiB5dW5EYXRhLlNIQVJFX1BVQkxJQz09PTEgPyAncHVibGljJyA6ICdzZWNyZXQnOwogICAgICAgIH0KCiAgICAgICAgLy/liKTmlq3mmK/ljZXkuKrmlofku7bliIbkuqvov5jmmK/mlofku7blpLnmiJbogIXlpJrmlofku7bliIbkuqsKICAgICAgICBmdW5jdGlvbiBpc1NpbmdsZVNoYXJlKCl7CiAgICAgICAgICAgIHJldHVybiB5dW5EYXRhLmdldENvbnRleHQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIC8v5Yik5pat5piv5ZCm5Li66Ieq5bex55qE5YiG5Lqr6ZO+5o6lCiAgICAgICAgZnVuY3Rpb24gaXNTZWxmU2hhcmUoKXsKICAgICAgICAgICAgcmV0dXJuIHl1bkRhdGEuTVlTRUxGID09IDEgPyB0cnVlIDogZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnZXRFeHRyYSgpewogICAgICAgICAgICB2YXIgc2VLZXkgPSBkZWNvZGVVUklDb21wb25lbnQoZ2V0Q29va2llKCdCRENMTkQnKSk7CiAgICAgICAgICAgIHJldHVybiAneycgKyAnInNla2V5IjoiJyArIHNlS2V5ICsgJyInICsgIn0iOwogICAgICAgIH0KCiAgICAgICAgLy/ojrflj5blvZPliY3nm67lvZUKICAgICAgICBmdW5jdGlvbiBnZXRQYXRoKCl7CiAgICAgICAgICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDsKICAgICAgICAgICAgdmFyIHJlZ3ggPSAvKF58JnxcLylwYXRoPShbXiZdKikoJnwkKS9pOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gaGFzaC5tYXRjaChyZWd4KTsKICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyZXN1bHRbMl0pOwogICAgICAgIH0KCiAgICAgICAgLy/ojrflj5blvZPliY3nmoTop4blm77mqKHlvI8KICAgICAgICBmdW5jdGlvbiBnZXRMaXN0R3JpZFN0YXR1cygpewogICAgICAgICAgICB2YXIgc3RhdHVzID0gJ2xpc3QnOwogICAgICAgICAgICB2YXIgJHN0YXR1c19kaXYgPSAkKCdkaXYubGlzdC1ncmlkLXN3aXRjaCcpOwogICAgICAgICAgICBpZiAoJHN0YXR1c19kaXYuaGFzQ2xhc3MoJ2xpc3Qtc3dpdGNoZWQtb24nKSl7CiAgICAgICAgICAgICAgICBzdGF0dXMgPSAnbGlzdCc7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoJHN0YXR1c19kaXYuaGFzQ2xhc3MoJ2dyaWQtc3dpdGNoZWQtb24nKSkgewogICAgICAgICAgICAgICAgc3RhdHVzID0gJ2dyaWQnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzdGF0dXM7CiAgICAgICAgfQoKICAgICAgICAvL+a3u+WKoOS4i+i9veWKqeaJi+aMiemSrgogICAgICAgIGZ1bmN0aW9uIGFkZEJ1dHRvbigpewogICAgICAgICAgICBpZihpc1NpbmdsZVNoYXJlKCkpewogICAgICAgICAgICAgICAgJCgnZGl2LnNsaWRlLXNob3ctcmlnaHQnKS5jc3MoJ3dpZHRoJywnNTAwcHgnKTsKICAgICAgICAgICAgICAgICQoJ2Rpdi5mcmFtZS1tYWluJykuY3NzKCd3aWR0aCcsJzk2JScpOwogICAgICAgICAgICAgICAgJCgnZGl2LnNoYXJlLWZpbGUtdmlld2VyJykuY3NzKCd3aWR0aCcsJzc0MHB4JykuY3NzKCdtYXJnaW4tbGVmdCcsJ2F1dG8nKS5jc3MoJ21hcmdpbi1yaWdodCcsJ2F1dG8nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAkKCdkaXYuc2xpZGUtc2hvdy1yaWdodCcpLmNzcygnd2lkdGgnLCc1MDBweCcpOwogICAgICAgICAgICB2YXIgJGRyb3Bkb3duYnV0dG9uID0gJCgnPHNwYW4gY2xhc3M9ImctZHJvcGRvd24tYnV0dG9uIj48L3NwYW4+Jyk7CiAgICAgICAgICAgIHZhciAkZHJvcGRvd25idXR0b25fYSA9ICQoJzxhIGNsYXNzPSJnLWJ1dHRvbiIgZGF0YS1idXR0b24taWQ9ImIyMDAiIGRhdGEtYnV0dG9uLWluZGV4PSIyMDAiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPjwvYT4nKTsKICAgICAgICAgICAgdmFyICRkcm9wZG93bmJ1dHRvbl9hX3NwYW4gPSAkKCc8c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxlbSBjbGFzcz0iaWNvbiBpY29uLWRvd25sb2FkIiB0aXRsZT0i55m+5bqm572R55uY5LiL6L295Yqp5omLIj48L2VtPjxzcGFuIGNsYXNzPSJ0ZXh0IiBzdHlsZT0id2lkdGg6IGF1dG87Ij7kuIvovb3liqnmiYs8L3NwYW4+PC9zcGFuPicpOwogICAgICAgICAgICB2YXIgJGRyb3Bkb3duYnV0dG9uX3NwYW4gPSAkKCc8c3BhbiBjbGFzcz0ibWVudSIgc3R5bGU9IndpZHRoOmF1dG87ei1pbmRleDo0MSI+PC9zcGFuPicpOwoKICAgICAgICAgICAgdmFyICRkb3dubG9hZEJ1dHRvbiA9ICQoJzxhIGRhdGEtbWVudS1pZD0iYi1tZW51MjA3IiBjbGFzcz0iZy1idXR0b24tbWVudSIgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApOyI+55u05o6l5LiL6L29PC9hPicpOwogICAgICAgICAgICB2YXIgJGxpbmtCdXR0b24gPSAkKCc8YSBkYXRhLW1lbnUtaWQ9ImItbWVudTIwOCIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKTsiPuaYvuekuumTvuaOpTwvYT4nKTsKCiAgICAgICAgICAgICRkcm9wZG93bmJ1dHRvbl9zcGFuLmFwcGVuZCgkZG93bmxvYWRCdXR0b24pLmFwcGVuZCgkbGlua0J1dHRvbik7CiAgICAgICAgICAgICRkcm9wZG93bmJ1dHRvbl9hLmFwcGVuZCgkZHJvcGRvd25idXR0b25fYV9zcGFuKTsKICAgICAgICAgICAgJGRyb3Bkb3duYnV0dG9uLmFwcGVuZCgkZHJvcGRvd25idXR0b25fYSkuYXBwZW5kKCRkcm9wZG93bmJ1dHRvbl9zcGFuKTsKCiAgICAgICAgICAgICRkcm9wZG93bmJ1dHRvbi5ob3ZlcihmdW5jdGlvbigpewogICAgICAgICAgICAgICAgJGRyb3Bkb3duYnV0dG9uLnRvZ2dsZUNsYXNzKCdidXR0b24tb3BlbicpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICRkb3dubG9hZEJ1dHRvbi5jbGljayhkb3dubG9hZEJ1dHRvbkNsaWNrKTsKICAgICAgICAgICAgJGxpbmtCdXR0b24uY2xpY2sobGlua0J1dHRvbkNsaWNrKTsKCiAgICAgICAgICAgICQoJ2Rpdi5tb2R1bGUtc2hhcmUtdG9wLWJhciBkaXYuYmFyIGRpdi5idXR0b24tYm94JykuYXBwZW5kKCRkcm9wZG93bmJ1dHRvbik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjcmVhdGVJZnJhbWUoKXsKICAgICAgICAgICAgdmFyICRkaXYgPSAkKCc8ZGl2IGNsYXNzPSJoZWxwZXItaGlkZSIgc3R5bGU9InBhZGRpbmc6MDttYXJnaW46MDtkaXNwbGF5OmJsb2NrIj48L2Rpdj4nKTsKICAgICAgICAgICAgdmFyICRpZnJhbWUgPSAkKCc8aWZyYW1lIHNyYz0iamF2YXNjcmlwdDp2b2lkKDApIiBpZD0iaGVscGVyZG93bmxvYWRpZnJhbWUiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPjwvaWZyYW1lPicpOwogICAgICAgICAgICAkZGl2LmFwcGVuZCgkaWZyYW1lKTsKICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZCgkZGl2KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRMaXN0ZW5lcigpewogICAgICAgICAgICByZWdpc3Rlckhhc2hDaGFuZ2UoKTsKICAgICAgICAgICAgcmVnaXN0ZXJMaXN0R3JpZFN0YXR1cygpOwogICAgICAgICAgICByZWdpc3RlckNoZWNrYm94KCk7CiAgICAgICAgICAgIHJlZ2lzdGVyQWxsQ2hlY2tib3goKTsKICAgICAgICAgICAgcmVnaXN0ZXJGaWxlU2VsZWN0KCk7CiAgICAgICAgfQoKICAgICAgICAvL+ebkeinhuWcsOWdgOagjyPmoIfnrb7lj5jljJYKICAgICAgICBmdW5jdGlvbiByZWdpc3Rlckhhc2hDaGFuZ2UoKXsKICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLGZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgbGlzdF9ncmlkX3N0YXR1cyA9IGdldExpc3RHcmlkU3RhdHVzKCk7CiAgICAgICAgICAgICAgICBpZihjdXJyZW50UGF0aCA9PSBnZXRQYXRoKCkpewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhdGggPSBnZXRQYXRoKCk7CiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFNlbGVjdEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcmVmcmVzaEZpbGVMaXN0KCl7CiAgICAgICAgICAgIGZpbGVMaXN0ID0gZ2V0RmlsZUxpc3QoKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hTZWxlY3RGaWxlTGlzdCgpewogICAgICAgICAgICBzZWxlY3RGaWxlTGlzdCA9IFtdOwogICAgICAgIH0KCiAgICAgICAgLy/nm5Hop4bop4blm77lj5jljJYKICAgICAgICBmdW5jdGlvbiByZWdpc3Rlckxpc3RHcmlkU3RhdHVzKCl7CiAgICAgICAgICAgIHZhciAkYV9saXN0ID0gJCgnYVtub2RlLXR5cGU9bGlzdC1zd2l0Y2hdJyk7CiAgICAgICAgICAgICRhX2xpc3QuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGxpc3RfZ3JpZF9zdGF0dXMgPSAnbGlzdCc7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgdmFyICRhX2dyaWQgPSAkKCdhW25vZGUtdHlwZT1ncmlkLXN3aXRjaF0nKTsKICAgICAgICAgICAgJGFfZ3JpZC5jbGljayhmdW5jdGlvbigpewogICAgICAgICAgICAgICAgbGlzdF9ncmlkX3N0YXR1cyA9ICdncmlkJzsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvL+ebkeinhuaWh+S7tumAieaLqeahhgogICAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ2hlY2tib3goKXsKICAgICAgICAgICAgLy92YXIgJGNoZWNrYm94ID0gJCgnc3Bhbi5jaGVja2JveCcpOwogICAgICAgICAgICB2YXIgJGNoZWNrYm94ID0gJCgnc3Bhbi4nK3dvcmRNYXBbJ2NoZWNrYm94J10pOwogICAgICAgICAgICAkY2hlY2tib3guZWFjaChmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICQoZWxlbWVudCkuYmluZCgnY2xpY2snLGZ1bmN0aW9uKGUpewogICAgICAgICAgICAgICAgICAgIHZhciAkcGFyZW50ID0gJCh0aGlzKS5wYXJlbnQoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZW5hbWU7CiAgICAgICAgICAgICAgICAgICAgaWYobGlzdF9ncmlkX3N0YXR1cyA9PSAnbGlzdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWUgPSAkKCdkaXYuZmlsZS1uYW1lIGRpdi50ZXh0IGEnLCRwYXJlbnQpLmF0dHIoJ3RpdGxlJyk7CiAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYobGlzdF9ncmlkX3N0YXR1cyA9PSAnZ3JpZCcpewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9ICQoJ2Rpdi5maWxlLW5hbWUgYScsJHBhcmVudCkuYXR0cigndGl0bGUnKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYoJHBhcmVudC5oYXNDbGFzcygnaXRlbS1hY3RpdmUnKSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHNsb2coJ+WPlua2iOmAieS4reaWh+S7tu+8micrZmlsZW5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpPHNlbGVjdEZpbGVMaXN0Lmxlbmd0aDtpKyspewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3RbaV0uZmlsZW5hbWUgPT0gZmlsZW5hbWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEZpbGVMaXN0LnNwbGljZShpLDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIHNsb2coJ+mAieS4reaWh+S7tu+8micrZmlsZW5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goZmlsZUxpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihlbGVtZW50LnNlcnZlcl9maWxlbmFtZSA9PSBmaWxlbmFtZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6ZWxlbWVudC5zZXJ2ZXJfZmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ZWxlbWVudC5wYXRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmc19pZDplbGVtZW50LmZzX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc2RpcjplbGVtZW50LmlzZGlyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdC5wdXNoKG9iaik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVucmVnaXN0ZXJDaGVja2JveCgpewogICAgICAgICAgICAvL3ZhciAkY2hlY2tib3ggPSAkKCdzcGFuLmNoZWNrYm94Jyk7CiAgICAgICAgICAgIHZhciAkY2hlY2tib3ggPSAkKCdzcGFuLicrd29yZE1hcFsnY2hlY2tib3gnXSk7CiAgICAgICAgICAgICRjaGVja2JveC5lYWNoKGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgJChlbGVtZW50KS51bmJpbmQoJ2NsaWNrJyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy/nm5Hop4blhajpgInmoYYKICAgICAgICBmdW5jdGlvbiByZWdpc3RlckFsbENoZWNrYm94KCl7CiAgICAgICAgICAgIC8vdmFyICRjaGVja2JveCA9ICQoJ2Rpdi5jb2wtaXRlbS5jaGVjaycpOwogICAgICAgICAgICB2YXIgJGNoZWNrYm94ID0gJCgnZGl2Licrd29yZE1hcFsnY29sLWl0ZW0nXSsnLicrd29yZE1hcFsnY2hlY2snXSk7CiAgICAgICAgICAgICRjaGVja2JveC5lYWNoKGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgJChlbGVtZW50KS5iaW5kKCdjbGljaycsZnVuY3Rpb24oZSl7CiAgICAgICAgICAgICAgICAgICAgdmFyICRwYXJlbnQgPSAkKHRoaXMpLnBhcmVudCgpOwogICAgICAgICAgICAgICAgICAgIC8vaWYoJHBhcmVudC5oYXNDbGFzcygnY2hlY2tlZCcpKXsKICAgICAgICAgICAgICAgICAgICBpZigkcGFyZW50Lmhhc0NsYXNzKHdvcmRNYXBbJ2NoZWNrZWQnXSkpewogICAgICAgICAgICAgICAgICAgICAgICBzbG9nKCflj5bmtojlhajpgIknKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RmlsZUxpc3QgPSBbXTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBzbG9nKCflhajpg6jpgInkuK0nKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RmlsZUxpc3QgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGZpbGVMaXN0LGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTplbGVtZW50LnNlcnZlcl9maWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOmVsZW1lbnQucGF0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmc19pZDplbGVtZW50LmZzX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzZGlyOmVsZW1lbnQuaXNkaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdC5wdXNoKG9iaik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHVucmVnaXN0ZXJBbGxDaGVja2JveCgpewogICAgICAgICAgICAvL3ZhciAkY2hlY2tib3ggPSAkKCdkaXYuY29sLWl0ZW0uY2hlY2snKTsKICAgICAgICAgICAgdmFyICRjaGVja2JveCA9ICQoJ2Rpdi4nK3dvcmRNYXBbJ2NvbC1pdGVtJ10rJy4nK3dvcmRNYXBbJ2NoZWNrJ10pOwogICAgICAgICAgICAkY2hlY2tib3guZWFjaChmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICQoZWxlbWVudCkudW5iaW5kKCdjbGljaycpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8v55uR6KeG5Y2V5Liq5paH5Lu26YCJ5LitCiAgICAgICAgZnVuY3Rpb24gcmVnaXN0ZXJGaWxlU2VsZWN0KCl7CiAgICAgICAgICAgIC8vdmFyICRkZCA9ICQoJ2Rpdi5saXN0LXZpZXcgZGQnKTsKICAgICAgICAgICAgdmFyICRkZCA9ICQoJ2Rpdi4nK3dvcmRNYXBbJ2xpc3QtdmlldyddKycgZGQnKTsKICAgICAgICAgICAgJGRkLmVhY2goZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmJpbmQoJ2NsaWNrJyxmdW5jdGlvbihlKXsKICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZU5hbWUgPSBlLnRhcmdldC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgIGlmKG5vZGVOYW1lICE9ICdzcGFuJyAmJiBub2RlTmFtZSAhPSAnYScgJiYgbm9kZU5hbWUgIT0gJ2VtJykgewogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RGaWxlTGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSAkKCdkaXYuZmlsZS1uYW1lIGRpdi50ZXh0IGEnLCQodGhpcykpLmF0dHIoJ3RpdGxlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNsb2coJ+mAieS4reaWh+S7tu+8micgKyBmaWxlbmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChmaWxlTGlzdCxmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuc2VydmVyX2ZpbGVuYW1lID09IGZpbGVuYW1lKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTplbGVtZW50LnNlcnZlcl9maWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDplbGVtZW50LnBhdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZzX2lkOmVsZW1lbnQuZnNfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzZGlyOmVsZW1lbnQuaXNkaXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdEZpbGVMaXN0LnB1c2gob2JqKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdW5yZWdpc3RlckZpbGVTZWxlY3QoKXsKICAgICAgICAgICAgLy92YXIgJGRkID0gJCgnZGl2Lmxpc3QtdmlldyBkZCcpOwogICAgICAgICAgICB2YXIgJGRkID0gJCgnZGl2Licrd29yZE1hcFsnbGlzdC12aWV3J10rJyBkZCcpOwogICAgICAgICAgICAkZGQuZWFjaChmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICQoZWxlbWVudCkudW5iaW5kKCdjbGljaycpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8v55uR6KeG5paH5Lu25YiX6KGo5pi+56S65Y+Y5YyWCiAgICAgICAgZnVuY3Rpb24gY3JlYXRlT2JzZXJ2ZXIoKXsKICAgICAgICAgICAgdmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcjsKICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7CiAgICAgICAgICAgICAgICAnY2hpbGRMaXN0JzogdHJ1ZQogICAgICAgICAgICB9OwogICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucyl7CiAgICAgICAgICAgICAgICB1bnJlZ2lzdGVyQ2hlY2tib3goKTsKICAgICAgICAgICAgICAgIHVucmVnaXN0ZXJBbGxDaGVja2JveCgpOwogICAgICAgICAgICAgICAgdW5yZWdpc3RlckZpbGVTZWxlY3QoKTsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ2hlY2tib3goKTsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyQWxsQ2hlY2tib3goKTsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyRmlsZVNlbGVjdCgpOyAKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIC8vdmFyIGxpc3RfdmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5saXN0LXZpZXcnKTsKICAgICAgICAgICAgLy92YXIgZ3JpZF92aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmdyaWQtdmlldycpOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIGxpc3RfdmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nK3dvcmRNYXBbJ2xpc3QtdmlldyddKTsKICAgICAgICAgICAgdmFyIGdyaWRfdmlldyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy4nK3dvcmRNYXBbJ2dyaWQtdmlldyddKTsKCiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUobGlzdF92aWV3LG9wdGlvbnMpOwogICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGdyaWRfdmlldyxvcHRpb25zKTsKICAgICAgICB9CgogICAgICAgIC8v6I635Y+W5paH5Lu25L+h5oGv5YiX6KGoCiAgICAgICAgZnVuY3Rpb24gZ2V0RmlsZUxpc3QoKXsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICAgICAgICBpZihnZXRQYXRoKCkgPT0gJy8nKXsKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHl1bkRhdGEuRklMRUlORk87CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBsb2dpZCA9IGdldExvZ0lEKCk7CiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0gewogICAgICAgICAgICAgICAgICAgIHVrOnVrLAogICAgICAgICAgICAgICAgICAgIHNoYXJlaWQ6c2hhcmVpZCwKICAgICAgICAgICAgICAgICAgICBvcmRlcjonb3RoZXInLAogICAgICAgICAgICAgICAgICAgIGRlc2M6MSwKICAgICAgICAgICAgICAgICAgICBzaG93ZW1wdHk6MCwKICAgICAgICAgICAgICAgICAgICB3ZWI6d2ViLAogICAgICAgICAgICAgICAgICAgIGRpcjpnZXRQYXRoKCksCiAgICAgICAgICAgICAgICAgICAgdDpNYXRoLnJhbmRvbSgpLAogICAgICAgICAgICAgICAgICAgIGJkc3Rva2VuOmJkc3Rva2VuLAogICAgICAgICAgICAgICAgICAgIGNoYW5uZWw6Y2hhbm5lbCwKICAgICAgICAgICAgICAgICAgICBjbGllbnR0eXBlOmNsaWVudHR5cGUsCiAgICAgICAgICAgICAgICAgICAgYXBwX2lkOmFwcF9pZCwKICAgICAgICAgICAgICAgICAgICBsb2dpZDpsb2dpZAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOnNoYXJlTGlzdFVybCwKICAgICAgICAgICAgICAgICAgICBtZXRob2Q6J0dFVCcsCiAgICAgICAgICAgICAgICAgICAgYXN5bmM6ZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgZGF0YTpwYXJhbXMsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJlc3BvbnNlLmVycm5vID09PSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlLmxpc3Q7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZG93bmxvYWRCdXR0b25DbGljaygpewogICAgICAgICAgICBzbG9nKCfpgInkuK3mlofku7bliJfooajvvJonLHNlbGVjdEZpbGVMaXN0KTsKICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09PSAwKXsKICAgICAgICAgICAgICAgIGFsZXJ0KCfojrflj5bmlofku7ZJROWksei0pe+8jOivt+mHjeivlScpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJ1dHRvblRhcmdldCA9ICdkb3dubG9hZCc7CiAgICAgICAgICAgIHZhciBkb3dubG9hZExpbmsgPSBnZXREb3dubG9hZExpbmsoKTsKCiAgICAgICAgICAgIGlmKGRvd25sb2FkTGluay5lcnJubyA9PSAtMjApIHsKICAgICAgICAgICAgICAgIHZjb2RlID0gZ2V0VkNvZGUoKTsKICAgICAgICAgICAgICAgIGlmKHZjb2RlLmVycm5vICE9PSAwKXsKICAgICAgICAgICAgICAgICAgICBhbGVydCgn6I635Y+W6aqM6K+B56CB5aSx6LSl77yBJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmNvZGVEaWFsb2cub3Blbih2Y29kZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZihkb3dubG9hZExpbmsuZXJybm8gPT0gMTEyKXsKICAgICAgICAgICAgICAgIGFsZXJ0KCfpobXpnaLov4fmnJ/vvIzor7fliLfmlrDph43or5UnKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfSBlbHNlIGlmIChkb3dubG9hZExpbmsuZXJybm8gPT09IDApIHsKICAgICAgICAgICAgICAgIHZhciBsaW5rOwogICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09IDEgJiYgc2VsZWN0RmlsZUxpc3RbMF0uaXNkaXIgPT09IDApCiAgICAgICAgICAgICAgICAgICAgbGluayA9IGRvd25sb2FkTGluay5saXN0WzBdLmRsaW5rOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGxpbmsgPSBkb3dubG9hZExpbmsuZGxpbms7CiAgICAgICAgICAgICAgICBleGVjRG93bmxvYWQobGluayk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhbGVydCgn6I635Y+W5LiL6L296ZO+5o6l5aSx6LSl77yBJyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8v6I635Y+W6aqM6K+B56CBCiAgICAgICAgZnVuY3Rpb24gZ2V0VkNvZGUoKXsKICAgICAgICAgICAgdmFyIHVybCA9IHBhbkFQSVVybCArICdnZXR2Y29kZSc7CiAgICAgICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgICAgIGxvZ2lkID0gZ2V0TG9nSUQoKTsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHsKICAgICAgICAgICAgICAgIHByb2Q6J3BhbicsCiAgICAgICAgICAgICAgICB0Ok1hdGgucmFuZG9tKCksCiAgICAgICAgICAgICAgICBiZHN0b2tlbjpiZHN0b2tlbiwKICAgICAgICAgICAgICAgIGNoYW5uZWw6Y2hhbm5lbCwKICAgICAgICAgICAgICAgIGNsaWVudHR5cGU6Y2xpZW50dHlwZSwKICAgICAgICAgICAgICAgIHdlYjp3ZWIsCiAgICAgICAgICAgICAgICBhcHBfaWQ6YXBwX2lkLAogICAgICAgICAgICAgICAgbG9naWQ6bG9naWQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDp1cmwsCiAgICAgICAgICAgICAgICBtZXRob2Q6J0dFVCcsCiAgICAgICAgICAgICAgICBhc3luYzpmYWxzZSwKICAgICAgICAgICAgICAgIGRhdGE6cGFyYW1zLAogICAgICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KCiAgICAgICAgLy/liLfmlrDpqozor4HnoIEKICAgICAgICBmdW5jdGlvbiByZWZyZXNoVkNvZGUoKXsKICAgICAgICAgICAgdmNvZGUgPSBnZXRWQ29kZSgpOwogICAgICAgICAgICAkKCcjZGlhbG9nLWltZycpLmF0dHIoJ3NyYycsdmNvZGUuaW1nKTsKICAgICAgICB9CgogICAgICAgIC8v6aqM6K+B56CB56Gu6K6k5o+Q5LqkCiAgICAgICAgZnVuY3Rpb24gY29uZmlybUNsaWNrKCl7CiAgICAgICAgICAgIHZhciB2YWwgPSAkKCcjZGlhbG9nLWlucHV0JykudmFsKCk7CiAgICAgICAgICAgIGlmKHZhbC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICQoJyNkaWFsb2ctZXJyJykudGV4dCgn6K+36L6T5YWl6aqM6K+B56CBJyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0gZWxzZSBpZih2YWwubGVuZ3RoIDwgNCkgewogICAgICAgICAgICAgICAgJCgnI2RpYWxvZy1lcnInKS50ZXh0KCfpqozor4HnoIHovpPlhaXplJnor6/vvIzor7fph43mlrDovpPlhaUnKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfSAKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGdldERvd25sb2FkTGlua1dpdGhWQ29kZSh2YWwpOwogICAgICAgICAgICBpZihyZXN1bHQuZXJybm8gPT0gLTIwKXsKICAgICAgICAgICAgICAgIHZjb2RlRGlhbG9nLmNsb3NlKCk7CiAgICAgICAgICAgICAgICAkKCcjZGlhbG9nLWVycicpLnRleHQoJ+mqjOivgeeggei+k+WFpemUmeivr++8jOivt+mHjeaWsOi+k+WFpScpOwogICAgICAgICAgICAgICAgcmVmcmVzaFZDb2RlKCk7CiAgICAgICAgICAgICAgICBpZighdmNvZGUgfHwgdmNvZGUuZXJybm8gIT09IDApewogICAgICAgICAgICAgICAgICAgIGFsZXJ0KCfojrflj5bpqozor4HnoIHlpLHotKXvvIEnKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2Y29kZURpYWxvZy5vcGVuKCk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0LmVycm5vID09PSAwKSB7CiAgICAgICAgICAgICAgICB2Y29kZURpYWxvZy5jbG9zZSgpOwogICAgICAgICAgICAgICAgdmFyIGxpbms7CiAgICAgICAgICAgICAgICBpZihzZWxlY3RGaWxlTGlzdC5sZW5ndGggPT0xICYmIHNlbGVjdEZpbGVMaXN0WzBdLmlzZGlyID09PSAwKQogICAgICAgICAgICAgICAgICAgIGxpbmsgPSByZXN1bHQubGlzdFswXS5kbGluazsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBsaW5rID0gcmVzdWx0LmRsaW5rOwogICAgICAgICAgICAgICAgaWYoYnV0dG9uVGFyZ2V0ID09ICdkb3dubG9hZCcpewogICAgICAgICAgICAgICAgICAgIGV4ZWNEb3dubG9hZChsaW5rKTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uVGFyZ2V0ID09ICdsaW5rJykgewogICAgICAgICAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9ICcnOwogICAgICAgICAgICAgICAgICAgICQuZWFjaChzZWxlY3RGaWxlTGlzdCxmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09IDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGVsZW1lbnQuZmlsZW5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpbmRleCA9PTApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWUgPSBlbGVtZW50LmZpbGVuYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZmlsZW5hbWUgKyAnLCcgKyBlbGVtZW50LmZpbGVuYW1lOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmtMaXN0ID0gewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTpmaWxlbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgdXJsczpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dXJsOmxpbmsscmFuazoxfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB2YXIgdGlwID0gIuaYvuekuuiOt+WPlueahOmTvuaOpe+8jOWPr+S7peS9v+eUqOWPs+mUrui/hembt+S4i+i9ve+8jOWkjeWItuaXoOeUqO+8jOmcgOimgeS8oOmAkmNvb2tpZSI7CiAgICAgICAgICAgICAgICAgICAgZGlhbG9nLm9wZW4oe3RpdGxlOifkuIvovb3pk77mjqUnLHR5cGU6J2xpbmsnLGxpc3Q6bGlua0xpc3QsdGlwOnRpcH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYWxlcnQoJ+WPkeeUn+mUmeivr++8gScpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvL+eUn+aIkOS4i+i9veeUqOeahGZpZF9saXN05Y+C5pWwCiAgICAgICAgZnVuY3Rpb24gZ2V0RmlkTGlzdCgpewogICAgICAgICAgICB2YXIgZmlkbGlzdCA9IFtdOwogICAgICAgICAgICAkLmVhY2goc2VsZWN0RmlsZUxpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICBmaWRsaXN0LnB1c2goZWxlbWVudC5mc19pZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gJ1snICsgZmlkbGlzdCArICddJzsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGxpbmtCdXR0b25DbGljaygpewogICAgICAgICAgICBzbG9nKCfpgInkuK3mlofku7bliJfooajvvJonLHNlbGVjdEZpbGVMaXN0KTsKICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09PSAwKXsKICAgICAgICAgICAgICAgIGFsZXJ0KCfmsqHmnInpgInkuK3mlofku7bvvIzor7fph43or5UnKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBidXR0b25UYXJnZXQgPSAnbGluayc7CiAgICAgICAgICAgIHZhciBkb3dubG9hZExpbmsgPSBnZXREb3dubG9hZExpbmsoKTsKCiAgICAgICAgICAgIGlmKGRvd25sb2FkTGluay5lcnJubyA9PSAtMjApIHsKICAgICAgICAgICAgICAgIHZjb2RlID0gZ2V0VkNvZGUoKTsKICAgICAgICAgICAgICAgIGlmKCF2Y29kZSB8fCB2Y29kZS5lcnJubyAhPT0gMCl7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+iOt+WPlumqjOivgeeggeWksei0pe+8gScpOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZjb2RlRGlhbG9nLm9wZW4odmNvZGUpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGRvd25sb2FkTGluay5lcnJubyA9PSAxMTIpIHsKICAgICAgICAgICAgICAgIGFsZXJ0KCfpobXpnaLov4fmnJ/vvIzor7fliLfmlrDph43or5UnKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfSBlbHNlIGlmIChkb3dubG9hZExpbmsuZXJybm8gPT09IDApIHsKICAgICAgICAgICAgICAgIHZhciBsaW5rOwogICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09IDEgJiYgc2VsZWN0RmlsZUxpc3RbMF0uaXNkaXIgPT09IDApCiAgICAgICAgICAgICAgICAgICAgbGluayA9IGRvd25sb2FkTGluay5saXN0WzBdLmRsaW5rOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGxpbmsgPSBkb3dubG9hZExpbmsuZGxpbms7CiAgICAgICAgICAgICAgICBpZihzZWxlY3RGaWxlTGlzdC5sZW5ndGggPT0gMSkKICAgICAgICAgICAgICAgICAgICAkKCcjZGlhbG9nLWRvd25sb2FkbGluaycpLmF0dHIoJ2hyZWYnLGxpbmspLnRleHQobGluayk7CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgJCgnI2RpYWxvZy1kb3dubG9hZGxpbmsnKS5hdHRyKCdocmVmJyxsaW5rKS50ZXh0KGxpbmspOwogICAgICAgICAgICAgICAgdmFyIGZpbGVuYW1lID0gJyc7CiAgICAgICAgICAgICAgICAkLmVhY2goc2VsZWN0RmlsZUxpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3QubGVuZ3RoID09IDEpCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZWxlbWVudC5maWxlbmFtZTsKICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICBpZihpbmRleCA9PTApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IGVsZW1lbnQuZmlsZW5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZmlsZW5hbWUgKyAnLCcgKyBlbGVtZW50LmZpbGVuYW1lOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdmFyIGxpbmtMaXN0ID0gewogICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOmZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgIHVybHM6WwogICAgICAgICAgICAgICAgICAgICAgICB7dXJsOmxpbmsscmFuazoxfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgdGlwID0gIuaYvuekuuiOt+WPlueahOmTvuaOpe+8jOWPr+S7peS9v+eUqOWPs+mUrui/hembt+S4i+i9ve+8jOWkjeWItuaXoOeUqO+8jOmcgOimgeS8oOmAkmNvb2tpZSI7CiAgICAgICAgICAgICAgICBkaWFsb2cub3Blbih7dGl0bGU6J+S4i+i9vemTvuaOpScsdHlwZTonbGluaycsbGlzdDpsaW5rTGlzdCx0aXA6dGlwfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhbGVydCgn6I635Y+W5LiL6L296ZO+5o6l5aSx6LSl77yBJyk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8v6I635Y+W5LiL6L296ZO+5o6lCiAgICAgICAgZnVuY3Rpb24gZ2V0RG93bmxvYWRMaW5rKCl7CiAgICAgICAgICAgIHZhciByZXN1bHQ7CiAgICAgICAgICAgIGlmKGlzU2luZ2xlU2hhcmUpewogICAgICAgICAgICAgICAgZmlkX2xpc3QgPSBnZXRGaWRMaXN0KCk7CiAgICAgICAgICAgICAgICBsb2dpZCA9IGdldExvZ0lEKCk7CiAgICAgICAgICAgICAgICB2YXIgdXJsID0gcGFuQVBJVXJsICsgJ3NoYXJlZG93bmxvYWQ/c2lnbj0nICsgc2lnbiArICcmdGltZXN0YW1wPScgKyB0aW1lc3RhbXAgKyAnJmJkc3Rva2VuPScgKyBiZHN0b2tlbiArICcmY2hhbm5lbD0nICsgY2hhbm5lbCArICcmY2xpZW50dHlwZT0nICsgY2xpZW50dHlwZSArICcmd2ViPScrIHdlYiArICcmYXBwX2lkPScgKyBhcHBfaWQgKyAnJmxvZ2lkPScgKyBsb2dpZDsKICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7CiAgICAgICAgICAgICAgICAgICAgZW5jcnlwdDplbmNyeXB0LAogICAgICAgICAgICAgICAgICAgIHByb2R1Y3Q6cHJvZHVjdCwKICAgICAgICAgICAgICAgICAgICB1azp1aywKICAgICAgICAgICAgICAgICAgICBwcmltYXJ5aWQ6cHJpbWFyeWlkLAogICAgICAgICAgICAgICAgICAgIGZpZF9saXN0OmZpZF9saXN0CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgaWYoc2hhcmVUeXBlID09ICdzZWNyZXQnKXsKICAgICAgICAgICAgICAgICAgICBwYXJhbXMuZXh0cmEgPSBleHRyYTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKHNlbGVjdEZpbGVMaXN0WzBdLmlzZGlyID09IDEgfHwgc2VsZWN0RmlsZUxpc3QubGVuZ3RoID4gMSl7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnR5cGUgPSAnYmF0Y2gnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6dXJsLAogICAgICAgICAgICAgICAgICAgIG1ldGhvZDonUE9TVCcsCiAgICAgICAgICAgICAgICAgICAgYXN5bmM6ZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgZGF0YTpwYXJhbXMsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQoKICAgICAgICAvL+aciemqjOivgeeggei+k+WFpeaXtuiOt+WPluS4i+i9vemTvuaOpQogICAgICAgIGZ1bmN0aW9uIGdldERvd25sb2FkTGlua1dpdGhWQ29kZSh2Y29kZUlucHV0KXsKICAgICAgICAgICAgdmFyIHJlc3VsdDsKICAgICAgICAgICAgaWYoaXNTaW5nbGVTaGFyZSl7CiAgICAgICAgICAgICAgICBmaWRfbGlzdCA9IGdldEZpZExpc3QoKTsKICAgICAgICAgICAgICAgIHZhciB1cmwgPSBwYW5BUElVcmwgKyAnc2hhcmVkb3dubG9hZD9zaWduPScgKyBzaWduICsgJyZ0aW1lc3RhbXA9JyArIHRpbWVzdGFtcCArICcmYmRzdG9rZW49JyArIGJkc3Rva2VuICsgJyZjaGFubmVsPScgKyBjaGFubmVsICsgJyZjbGllbnR0eXBlPScgKyBjbGllbnR0eXBlICsgJyZ3ZWI9Jysgd2ViICsgJyZhcHBfaWQ9JyArIGFwcF9pZCArICcmbG9naWQ9JyArIGxvZ2lkOwogICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHsKICAgICAgICAgICAgICAgICAgICBlbmNyeXB0OmVuY3J5cHQsCiAgICAgICAgICAgICAgICAgICAgcHJvZHVjdDpwcm9kdWN0LAogICAgICAgICAgICAgICAgICAgIHZjb2RlX2lucHV0OnZjb2RlSW5wdXQsCiAgICAgICAgICAgICAgICAgICAgdmNvZGVfc3RyOnZjb2RlLnZjb2RlLAogICAgICAgICAgICAgICAgICAgIHVrOnVrLAogICAgICAgICAgICAgICAgICAgIHByaW1hcnlpZDpwcmltYXJ5aWQsCiAgICAgICAgICAgICAgICAgICAgZmlkX2xpc3Q6ZmlkX2xpc3QKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpZihzaGFyZVR5cGUgPT0gJ3NlY3JldCcpewogICAgICAgICAgICAgICAgICAgIHBhcmFtcy5leHRyYSA9IGV4dHJhOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYoc2VsZWN0RmlsZUxpc3RbMF0uaXNkaXIgPT0gMSB8fCBzZWxlY3RGaWxlTGlzdC5sZW5ndGggPiAxICl7CiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLnR5cGUgPSAnYmF0Y2gnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6dXJsLAogICAgICAgICAgICAgICAgICAgIG1ldGhvZDonUE9TVCcsCiAgICAgICAgICAgICAgICAgICAgYXN5bmM6ZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgZGF0YTpwYXJhbXMsCiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczpmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3BvbnNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBleGVjRG93bmxvYWQobGluayl7CiAgICAgICAgICAgIHNsb2coJ+S4i+i9vemTvuaOpe+8micrbGluayk7CiAgICAgICAgICAgICQoJyNoZWxwZXJkb3dubG9hZGlmcmFtZScpLmF0dHIoJ3NyYycsbGluayk7CiAgICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIGJhc2U2NEVuY29kZSh0KXsKICAgICAgICB2YXIgYSwgciwgZSwgbiwgaSwgcywgbyA9ICJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvIjsKICAgICAgICBmb3IgKGUgPSB0Lmxlbmd0aCxyID0gMCxhID0gIiI7IGUgPiByOyApIHsKICAgICAgICAgICAgaWYgKG4gPSAyNTUgJiB0LmNoYXJDb2RlQXQocisrKSxyID09IGUpIHsKICAgICAgICAgICAgICAgIGEgKz0gby5jaGFyQXQobiA+PiAyKTsKICAgICAgICAgICAgICAgIGEgKz0gby5jaGFyQXQoKDMgJiBuKSA8PCA0KTsKICAgICAgICAgICAgICAgIGEgKz0gIj09IjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChpID0gdC5jaGFyQ29kZUF0KHIrKyksciA9PSBlKSB7CiAgICAgICAgICAgICAgICBhICs9IG8uY2hhckF0KG4gPj4gMik7CiAgICAgICAgICAgICAgICBhICs9IG8uY2hhckF0KCgzICYgbikgPDwgNCB8ICgyNDAgJiBpKSA+PiA0KTsKICAgICAgICAgICAgICAgIGEgKz0gby5jaGFyQXQoKDE1ICYgaSkgPDwgMik7CiAgICAgICAgICAgICAgICBhICs9ICI9IjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHMgPSB0LmNoYXJDb2RlQXQocisrKTsKICAgICAgICAgICAgYSArPSBvLmNoYXJBdChuID4+IDIpOwogICAgICAgICAgICBhICs9IG8uY2hhckF0KCgzICYgbikgPDwgNCB8ICgyNDAgJiBpKSA+PiA0KTsKICAgICAgICAgICAgYSArPSBvLmNoYXJBdCgoMTUgJiBpKSA8PCAyIHwgKDE5MiAmIHMpID4+IDYpOwogICAgICAgICAgICBhICs9IG8uY2hhckF0KDYzICYgcyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBhOwogICAgfQoKICAgIGZ1bmN0aW9uIGRldGVjdFBhZ2UoKXsKICAgICAgICB2YXIgcmVneCA9IC9bXC9dLitbXC9dL2c7CiAgICAgICAgdmFyIHBhZ2UgPSBsb2NhdGlvbi5wYXRobmFtZS5tYXRjaChyZWd4KTsKICAgICAgICByZXR1cm4gcGFnZVswXS5yZXBsYWNlKC9cLy9nLCcnKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDb29raWUoZSkgewogICAgICAgIHZhciBvLCB0OwogICAgICAgIHZhciBuID0gZG9jdW1lbnQsYz1kZWNvZGVVUkk7CiAgICAgICAgcmV0dXJuIG4uY29va2llLmxlbmd0aCA+IDAgJiYgKG8gPSBuLmNvb2tpZS5pbmRleE9mKGUgKyAiPSIpLC0xICE9IG8pID8gKG8gPSBvICsgZS5sZW5ndGggKyAxLHQgPSBuLmNvb2tpZS5pbmRleE9mKCI7IiwgbyksLTEgPT0gdCAmJiAodCA9IG4uY29va2llLmxlbmd0aCksYyhuLmNvb2tpZS5zdWJzdHJpbmcobywgdCkpKSA6ICIiOwogICAgfQoKICAgIGZ1bmN0aW9uIGdldExvZ0lEKCl7CiAgICAgICAgdmFyIG5hbWUgPSAiQkFJRFVJRCI7CiAgICAgICAgdmFyIHUgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL37vvIFAI++/pSXigKbigKYmIjsKICAgICAgICB2YXIgZCA9IC9bXHVEODAwLVx1REJGRl1bXHVEQzAwLVx1REZGRkZdfFteXHgwMC1ceDdGXS9nOwogICAgICAgIHZhciBmID0gU3RyaW5nLmZyb21DaGFyQ29kZTsKICAgICAgICBmdW5jdGlvbiBsKGUpewogICAgICAgICAgICBpZiAoZS5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGUuY2hhckNvZGVBdCgwKTsKICAgICAgICAgICAgICAgIHJldHVybiAxMjggPiBuID8gZSA6IDIwNDggPiBuID8gZigxOTIgfCBuID4+PiA2KSArIGYoMTI4IHwgNjMgJiBuKSA6IGYoMjI0IHwgbiA+Pj4gMTIgJiAxNSkgKyBmKDEyOCB8IG4gPj4+IDYgJiA2MykgKyBmKDEyOCB8IDYzICYgbik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG4gPSA2NTUzNiArIDEwMjQgKiAoZS5jaGFyQ29kZUF0KDApIC0gNTUyOTYpICsgKGUuY2hhckNvZGVBdCgxKSAtIDU2MzIwKTsKICAgICAgICAgICAgcmV0dXJuIGYoMjQwIHwgbiA+Pj4gMTggJiA3KSArIGYoMTI4IHwgbiA+Pj4gMTIgJiA2MykgKyBmKDEyOCB8IG4gPj4+IDYgJiA2MykgKyBmKDEyOCB8IDYzICYgbik7CiAgICAgICAgfQogICAgICAgIGZ1bmN0aW9uIGcoZSl7CiAgICAgICAgICAgIHJldHVybiAoZSArICIiICsgTWF0aC5yYW5kb20oKSkucmVwbGFjZShkLCBsKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gbShlKXsKICAgICAgICAgICAgdmFyIG4gPSBbMCwgMiwgMV1bZS5sZW5ndGggJSAzXTsKICAgICAgICAgICAgdmFyIHQgPSBlLmNoYXJDb2RlQXQoMCkgPDwgMTYgfCAoZS5sZW5ndGggPiAxID8gZS5jaGFyQ29kZUF0KDEpIDogMCkgPDwgOCB8IChlLmxlbmd0aCA+IDIgPyBlLmNoYXJDb2RlQXQoMikgOiAwKTsKICAgICAgICAgICAgdmFyIG8gPSBbdS5jaGFyQXQodCA+Pj4gMTgpLCB1LmNoYXJBdCh0ID4+PiAxMiAmIDYzKSwgbiA+PSAyID8gIj0iIDogdS5jaGFyQXQodCA+Pj4gNiAmIDYzKSwgbiA+PSAxID8gIj0iIDogdS5jaGFyQXQoNjMgJiB0KV07CiAgICAgICAgICAgIHJldHVybiBvLmpvaW4oIiIpOwogICAgICAgIH0KICAgICAgICBmdW5jdGlvbiBoKGUpewogICAgICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC9bXHNcU117MSwzfS9nLCBtKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gcCgpewogICAgICAgICAgICByZXR1cm4gaChnKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkpKTsKICAgICAgICB9CiAgICAgICAgZnVuY3Rpb24gdyhlLG4pewogICAgICAgICAgICByZXR1cm4gbiA/IHAoU3RyaW5nKGUpKS5yZXBsYWNlKC9bK1wvXS9nLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIisiID09IGUgPyAiLSIgOiAiXyI7CiAgICAgICAgICAgIH0pLnJlcGxhY2UoLz0vZywgIiIpIDogcChTdHJpbmcoZSkpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdyhnZXRDb29raWUobmFtZSkpOwogICAgfQoKICAgIGZ1bmN0aW9uIERpYWxvZygpewogICAgICAgIHZhciBsaW5rTGlzdCA9IFtdOwogICAgICAgIHZhciBzaG93UGFyYW1zOwogICAgICAgIHZhciBkaWFsb2csc2hhZG93OwogICAgICAgIGZ1bmN0aW9uIGNyZWF0ZURpYWxvZygpewogICAgICAgICAgICB2YXIgc2NyZWVuV2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoOwogICAgICAgICAgICB2YXIgZGlhbG9nTGVmdCA9IHNjcmVlbldpZHRoPjgwMCA/IChzY3JlZW5XaWR0aC04MDApLzIgOiAwOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19kaXYgPSAkKCc8ZGl2IGNsYXNzPSJkaWFsb2ciIHN0eWxlPSJ3aWR0aDogODAwcHg7IHRvcDogMHB4OyBib3R0b206IGF1dG87IGxlZnQ6ICcrZGlhbG9nTGVmdCsncHg7IHJpZ2h0OiBhdXRvOyBkaXNwbGF5OiBoaWRkZW47IHZpc2liaWxpdHk6IHZpc2libGU7IHotaW5kZXg6IDUyOyI+PC9kaXY+Jyk7CiAgICAgICAgICAgIHZhciAkZGlhbG9nX2hlYWRlciA9ICQoJzxkaXYgY2xhc3M9ImRpYWxvZy1oZWFkZXIiPjxoMz48c3BhbiBjbGFzcz0iZGlhbG9nLXRpdGxlIiBzdHlsZT0iZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6NzQwcHg7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93LXg6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXMiPjwvc3Bhbj48L2gzPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19jb250cm9sID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWNvbnRyb2wiPjxzcGFuIGNsYXNzPSJkaWFsb2ctaWNvbiBkaWFsb2ctY2xvc2UiPsOXPC9zcGFuPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19ib2R5ID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWJvZHkiIHN0eWxlPSJtYXgtaGVpZ2h0OjQ1MHB4O292ZXJmbG93LXk6YXV0bztwYWRkaW5nOjAgMjBweDsiPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ190aXAgPSAkKCc8ZGl2IGNsYXNzPSJkaWFsb2ctdGlwIiBzdHlsZT0icGFkZGluZy1sZWZ0OjIwcHg7YmFja2dyb3VuZC1jb2xvcjojZmFmMmQzO2JvcmRlci10b3A6IDFweCBzb2xpZCAjYzRkYmZlOyI+PHA+PC9wPjwvZGl2PicpOwoKICAgICAgICAgICAgJGRpYWxvZ19kaXYuYXBwZW5kKCRkaWFsb2dfaGVhZGVyLmFwcGVuZCgkZGlhbG9nX2NvbnRyb2wpKS5hcHBlbmQoJGRpYWxvZ19ib2R5KTsKCiAgICAgICAgICAgIC8vdmFyICRkaWFsb2dfdGV4dGFyZWEgPSAkKCc8dGV4dGFyZWEgY2xhc3M9ImRpYWxvZy10ZXh0YXJlYSIgc3R5bGU9ImRpc3BsYXk6bm9uZTt3aWR0aCI+PC90ZXh0YXJlYT4nKTsKICAgICAgICAgICAgdmFyICRkaWFsb2dfcmFkaW9fZGl2ID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLXJhZGlvIiBzdHlsZT0iZGlzcGxheTpub25lO3dpZHRoOjc2MHB4O3BhZGRpbmctbGVmdDoyMHB4O3BhZGRpbmctcmlnaHQ6MjBweCI+PC9kaXY+Jyk7CiAgICAgICAgICAgIHZhciAkZGlhbG9nX3JhZGlvX211bHRpID0gJCgnPGlucHV0IHR5cGU9InJhZGlvIiBuYW1lPSJzaG93bW9kZSIgY2hlY2tlZD0iY2hlY2tlZCIgdmFsdWU9Im11bHRpIj48c3Bhbj7lpJrooYw8L3NwYW4+Jyk7CiAgICAgICAgICAgIHZhciAkZGlhbG9nX3JhZGlvX3NpbmdsZSA9ICQoJzxpbnB1dCB0eXBlPSJyYWRpbyIgbmFtZT0ic2hvd21vZGUiIHZhbHVlPSJzaW5nbGUiPjxzcGFuPuWNleihjDwvc3Bhbj4nKTsKICAgICAgICAgICAgJGRpYWxvZ19yYWRpb19kaXYuYXBwZW5kKCRkaWFsb2dfcmFkaW9fbXVsdGkpLmFwcGVuZCgkZGlhbG9nX3JhZGlvX3NpbmdsZSk7CiAgICAgICAgICAgICRkaWFsb2dfZGl2LmFwcGVuZCgkZGlhbG9nX3JhZGlvX2Rpdik7CiAgICAgICAgICAgICQoJ2lucHV0W3R5cGU9cmFkaW9dW25hbWU9c2hvd21vZGVdJywkZGlhbG9nX3JhZGlvX2RpdikuY2hhbmdlKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlOwogICAgICAgICAgICAgICAgdmFyICR0ZXh0YXJlYSA9ICQoJ2Rpdi5kaWFsb2ctYm9keSB0ZXh0YXJlYVtuYW1lPWRpYWxvZy10ZXh0YXJlYV0nLGRpYWxvZyk7CiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9ICR0ZXh0YXJlYS52YWwoKTsKICAgICAgICAgICAgICAgIGlmKHZhbHVlID09ICdtdWx0aScpewogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1xzKy9nLCdcbicpOwogICAgICAgICAgICAgICAgICAgICR0ZXh0YXJlYS5jc3MoJ2hlaWdodCcsJzMwMHB4Jyk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYodmFsdWUgPT0gJ3NpbmdsZScpewogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1xuKy9nLCcgJyk7CiAgICAgICAgICAgICAgICAgICAgJHRleHRhcmVhLmNzcygnaGVpZ2h0JywnJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkdGV4dGFyZWEudmFsKGNvbnRlbnQpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciAkZGlhbG9nX2J1dHRvbiA9ICQoJzxkaXYgY2xhc3M9ImRpYWxvZy1idXR0b24iIHN0eWxlPSJkaXNwbGF5Om5vbmUiPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19idXR0b25fZGl2ID0gJCgnPGRpdiBzdHlsZT0iZGlzcGxheTp0YWJsZTttYXJnaW46YXV0byI+PC9kaXY+JykKICAgICAgICAgICAgdmFyICRkaWFsb2dfY29weV9idXR0b24gPSAkKCc8YnV0dG9uIGlkPSJkaWFsb2ctY29weS1idXR0b24iIHN0eWxlPSJkaXNwbGF5Om5vbmUiPuWkjeWItjwvYnV0dG9uPicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19lZGl0X2J1dHRvbiA9ICQoJzxidXR0b24gaWQ9ImRpYWxvZy1lZGl0LWJ1dHRvbiIgc3R5bGU9ImRpc3BsYXk6bm9uZSI+57yW6L6RPC9idXR0b24+Jyk7CiAgICAgICAgICAgIHZhciAkZGlhbG9nX2V4aXRfYnV0dG9uID0gJCgnPGJ1dHRvbiBpZD0iZGlhbG9nLWV4aXQtYnV0dG9uIiBzdHlsZT0iZGlzcGxheTpub25lIj7pgIDlh7o8L2J1dHRvbj4nKTsKCiAgICAgICAgICAgICRkaWFsb2dfYnV0dG9uX2Rpdi5hcHBlbmQoJGRpYWxvZ19jb3B5X2J1dHRvbikuYXBwZW5kKCRkaWFsb2dfZWRpdF9idXR0b24pLmFwcGVuZCgkZGlhbG9nX2V4aXRfYnV0dG9uKTsKICAgICAgICAgICAgJGRpYWxvZ19idXR0b24uYXBwZW5kKCRkaWFsb2dfYnV0dG9uX2Rpdik7CiAgICAgICAgICAgICRkaWFsb2dfZGl2LmFwcGVuZCgkZGlhbG9nX2J1dHRvbik7CgogICAgICAgICAgICAkZGlhbG9nX2NvcHlfYnV0dG9uLmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9ICcnOwogICAgICAgICAgICAgICAgaWYoc2hvd1BhcmFtcy50eXBlID09ICdiYXRjaCcpewogICAgICAgICAgICAgICAgICAgICQuZWFjaChsaW5rTGlzdCxmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC5kb3dubG9hZGxpbmsgPT0gJ2Vycm9yJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaW5kZXggPT0gbGlua0xpc3QubGVuZ3RoLTEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudCArIGVsZW1lbnQuZG93bmxvYWRsaW5rOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gIGNvbnRlbnQgKyBlbGVtZW50LmRvd25sb2FkbGluayArICdcbic7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYoc2hvd1BhcmFtcy50eXBlID09ICdsaW5rJyl7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKGxpbmtMaXN0LGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICBpZihlbGVtZW50LnVybCA9PSAnZXJyb3InKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICBpZihpbmRleCA9PSBsaW5rTGlzdC5sZW5ndGgtMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50ICsgZWxlbWVudC51cmw7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAgY29udGVudCArIGVsZW1lbnQudXJsICsgJ1xuJzsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIEdNX3NldENsaXBib2FyZChjb250ZW50LCd0ZXh0Jyk7CiAgICAgICAgICAgICAgICBhbGVydCgn5bey5bCG6ZO+5o6l5aSN5Yi25Yiw5Ymq6LS05p2/77yBJyk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJGRpYWxvZ19lZGl0X2J1dHRvbi5jbGljayhmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyICRkaWFsb2dfdGV4dGFyZWEgPSAkKCdkaXYuZGlhbG9nLWJvZHkgdGV4dGFyZWFbbmFtZT1kaWFsb2ctdGV4dGFyZWFdJyxkaWFsb2cpOwogICAgICAgICAgICAgICAgdmFyICRkaWFsb2dfaXRlbSA9ICQoJ2Rpdi5kaWFsb2ctYm9keSBkaXYnLGRpYWxvZyk7CiAgICAgICAgICAgICAgICAkZGlhbG9nX2l0ZW0uaGlkZSgpOwogICAgICAgICAgICAgICAgJGRpYWxvZ19jb3B5X2J1dHRvbi5oaWRlKCk7CiAgICAgICAgICAgICAgICAkZGlhbG9nX2VkaXRfYnV0dG9uLmhpZGUoKTsKICAgICAgICAgICAgICAgICRkaWFsb2dfdGV4dGFyZWEuc2hvdygpOwogICAgICAgICAgICAgICAgJGRpYWxvZ19yYWRpb19kaXYuc2hvdygpOwogICAgICAgICAgICAgICAgJGRpYWxvZ19leGl0X2J1dHRvbi5zaG93KCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJGRpYWxvZ19leGl0X2J1dHRvbi5jbGljayhmdW5jdGlvbigpewogICAgICAgICAgICAgICAgdmFyICRkaWFsb2dfdGV4dGFyZWEgPSAkKCdkaXYuZGlhbG9nLWJvZHkgdGV4dGFyZWFbbmFtZT1kaWFsb2ctdGV4dGFyZWFdJyxkaWFsb2cpOwogICAgICAgICAgICAgICAgdmFyICRkaWFsb2dfaXRlbSA9ICQoJ2Rpdi5kaWFsb2ctYm9keSBkaXYnLGRpYWxvZyk7CiAgICAgICAgICAgICAgICAkZGlhbG9nX3RleHRhcmVhLmhpZGUoKTsKICAgICAgICAgICAgICAgICRkaWFsb2dfcmFkaW9fZGl2LmhpZGUoKTsKICAgICAgICAgICAgICAgICRkaWFsb2dfaXRlbS5zaG93KCk7CiAgICAgICAgICAgICAgICAkZGlhbG9nX2V4aXRfYnV0dG9uLmhpZGUoKTsKICAgICAgICAgICAgICAgICRkaWFsb2dfY29weV9idXR0b24uc2hvdygpOwogICAgICAgICAgICAgICAgJGRpYWxvZ19lZGl0X2J1dHRvbi5zaG93KCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJGRpYWxvZ19kaXYuYXBwZW5kKCRkaWFsb2dfdGlwKTsKICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZCgkZGlhbG9nX2Rpdik7CiAgICAgICAgICAgICRkaWFsb2dfZGl2LmRpYWxvZ0RyYWcoKTsKICAgICAgICAgICAgJGRpYWxvZ19jb250cm9sLmNsaWNrKGRpYWxvZ0NvbnRyb2wpOwogICAgICAgICAgICByZXR1cm4gJGRpYWxvZ19kaXY7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjcmVhdGVTaGFkb3coKXsKICAgICAgICAgICAgdmFyICRzaGFkb3cgPSAkKCc8ZGl2IGNsYXNzPSJkaWFsb2ctc2hhZG93IiBzdHlsZT0icG9zaXRpb246IGZpeGVkOyBsZWZ0OiAwcHg7IHRvcDogMHB4OyB6LWluZGV4OiA1MDsgYmFja2dyb3VuZDogcmdiKDAsIDAsIDApIG5vbmUgcmVwZWF0IHNjcm9sbCAwJSAwJTsgb3BhY2l0eTogMC41OyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBkaXNwbGF5OiBub25lOyI+PC9kaXY+Jyk7CiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoJHNoYWRvdyk7CiAgICAgICAgICAgIHJldHVybiAkc2hhZG93OwogICAgICAgIH0KCiAgICAgICAgdGhpcy5vcGVuID0gZnVuY3Rpb24ocGFyYW1zKXsKICAgICAgICAgICAgc2hvd1BhcmFtcyA9IHBhcmFtczsKICAgICAgICAgICAgbGlua0xpc3QgPSBbXTsKICAgICAgICAgICAgaWYocGFyYW1zLnR5cGUgPT0gJ2xpbmsnKXsKICAgICAgICAgICAgICAgIGxpbmtMaXN0ID0gcGFyYW1zLmxpc3QudXJsczsKICAgICAgICAgICAgICAgICQoJ2Rpdi5kaWFsb2ctaGVhZGVyIGgzIHNwYW4uZGlhbG9nLXRpdGxlJyxkaWFsb2cpLnRleHQocGFyYW1zLnRpdGxlICsgIu+8miIgK3BhcmFtcy5saXN0LmZpbGVuYW1lKTsKICAgICAgICAgICAgICAgICQuZWFjaChwYXJhbXMubGlzdC51cmxzLGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgICAgIHZhciAkZGl2ID0gJCgnPGRpdj48ZGl2IHN0eWxlPSJ3aWR0aDozMHB4O2Zsb2F0OmxlZnQiPicrZWxlbWVudC5yYW5rKyc6PC9kaXY+PGRpdiBzdHlsZT0id2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzIj48YSBocmVmPSInK2VsZW1lbnQudXJsKyciPicrZWxlbWVudC51cmwrJzwvYT48L2Rpdj48L2Rpdj4nKTsKICAgICAgICAgICAgICAgICAgICAkKCdkaXYuZGlhbG9nLWJvZHknLGRpYWxvZykuYXBwZW5kKCRkaXYpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSBpZihwYXJhbXMudHlwZSA9PSAnYmF0Y2gnKXsKICAgICAgICAgICAgICAgIGxpbmtMaXN0ID0gcGFyYW1zLmxpc3Q7CiAgICAgICAgICAgICAgICAkKCdkaXYuZGlhbG9nLWhlYWRlciBoMyBzcGFuLmRpYWxvZy10aXRsZScsZGlhbG9nKS50ZXh0KHBhcmFtcy50aXRsZSk7CiAgICAgICAgICAgICAgICBpZihwYXJhbXMuc2hvd2FsbCl7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHBhcmFtcy5saXN0LGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGl0ZW1fZGl2ID0gJCgnPGRpdiBjbGFzcz0iaXRlbS1jb250YWluZXIiIHN0eWxlPSJvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXAiPjwvZGl2PicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGl0ZW1fbmFtZSA9ICQoJzxkaXYgc3R5bGU9IndpZHRoOjEwMHB4O2Zsb2F0OmxlZnQ7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXMiIHRpdGxlPSInK2VsZW1lbnQuZmlsZW5hbWUrJyI+JytlbGVtZW50LmZpbGVuYW1lKyc8L2Rpdj4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyICRpdGVtX3NlcCA9ICQoJzxkaXYgc3R5bGU9IndpZHRoOjEycHg7ZmxvYXQ6bGVmdCI+PHNwYW4+77yaPC9zcGFuPjwvZGl2PicpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGl0ZW1fbGlua19kaXYgPSAkKCc8ZGl2IGNsYXNzPSJpdGVtLWxpbmsiIHN0eWxlPSJmbG9hdDpsZWZ0O3dpZHRoOjYxOHB4OyI+PC9kaXY+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaXRlbV9maXJzdCA9ICQoJzxkaXYgY2xhc3M9Iml0ZW0tZmlyc3QiIHN0eWxlPSJvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpcyI+PGEgaHJlZj0iJytlbGVtZW50LmRvd25sb2FkbGluaysnIj4nK2VsZW1lbnQuZG93bmxvYWRsaW5rKyc8L2E+PC9kaXY+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtX2xpbmtfZGl2LmFwcGVuZCgkaXRlbV9maXJzdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChwYXJhbXMuYWxsbGlzdFtpbmRleF0ubGlua3MsZnVuY3Rpb24obixpdGVtKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuZG93bmxvYWRsaW5rID09IGl0ZW0udXJsKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaXRlbSA9ICQoJzxkaXYgY2xhc3M9Iml0ZW0tZXgiIHN0eWxlPSJkaXNwbGF5Om5vbmU7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXMiPjxhIGhyZWY9IicraXRlbS51cmwrJyI+JytpdGVtLnVybCsnPC9hPjwvZGl2PicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGl0ZW1fbGlua19kaXYuYXBwZW5kKCRpdGVtKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkaXRlbV9leCA9ICQoJzxkaXYgc3R5bGU9IndpZHRoOjE1cHg7ZmxvYXQ6bGVmdDtjdXJzb3I6cG9pbnRlcjt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MTZweCI+PHNwYW4+Kzwvc3Bhbj48L2Rpdj4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGl0ZW1fZGl2LmFwcGVuZCgkaXRlbV9uYW1lKS5hcHBlbmQoJGl0ZW1fc2VwKS5hcHBlbmQoJGl0ZW1fbGlua19kaXYpLmFwcGVuZCgkaXRlbV9leCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRpdGVtX2V4LmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHBhcmVudCA9ICQodGhpcykucGFyZW50KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcGFyZW50LnRvZ2dsZUNsYXNzKCdzaG93YWxsJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkcGFyZW50Lmhhc0NsYXNzKCdzaG93YWxsJykpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykudGV4dCgnLScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJ2Rpdi5pdGVtLWxpbmsgZGl2Lml0ZW0tZXgnLCRwYXJlbnQpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS50ZXh0KCcrJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnZGl2Lml0ZW0tbGluayBkaXYuaXRlbS1leCcsJHBhcmVudCkuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnZGl2LmRpYWxvZy1ib2R5JyxkaWFsb2cpLmFwcGVuZCgkaXRlbV9kaXYpOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHBhcmFtcy5saXN0LGZ1bmN0aW9uKGluZGV4LGVsZW1lbnQpewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgJGRpdiA9ICQoJzxkaXYgc3R5bGU9Im92ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcCI+PGRpdiBzdHlsZT0id2lkdGg6MTAwcHg7ZmxvYXQ6bGVmdDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpcyIgdGl0bGU9IicrZWxlbWVudC5maWxlbmFtZSsnIj4nK2VsZW1lbnQuZmlsZW5hbWUrJzwvZGl2PjxzcGFuPu+8mjwvc3Bhbj48YSBocmVmPSInK2VsZW1lbnQuZG93bmxvYWRsaW5rKyciPicrZWxlbWVudC5kb3dubG9hZGxpbmsrJzwvYT48L2Rpdj4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnZGl2LmRpYWxvZy1ib2R5JyxkaWFsb2cpLmFwcGVuZCgkZGl2KTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYocGFyYW1zLnRpcCl7CiAgICAgICAgICAgICAgICAkKCdkaXYuZGlhbG9nLXRpcCBwJyxkaWFsb2cpLnRleHQocGFyYW1zLnRpcCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKHBhcmFtcy5zaG93Y29weSl7CiAgICAgICAgICAgICAgICAkKCdkaXYuZGlhbG9nLWJ1dHRvbicsZGlhbG9nKS5zaG93KCk7CiAgICAgICAgICAgICAgICAkKCdkaXYuZGlhbG9nLWJ1dHRvbiBidXR0b24jZGlhbG9nLWNvcHktYnV0dG9uJyxkaWFsb2cpLnNob3coKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZihwYXJhbXMuc2hvd2VkaXQpewogICAgICAgICAgICAgICAgJCgnZGl2LmRpYWxvZy1idXR0b24nLGRpYWxvZykuc2hvdygpOwogICAgICAgICAgICAgICAgJCgnZGl2LmRpYWxvZy1idXR0b24gYnV0dG9uI2RpYWxvZy1lZGl0LWJ1dHRvbicsZGlhbG9nKS5zaG93KCk7CiAgICAgICAgICAgICAgICB2YXIgJGRpYWxvZ190ZXh0YXJlYSA9ICQoJzx0ZXh0YXJlYSBuYW1lPSJkaWFsb2ctdGV4dGFyZWEiIHN0eWxlPSJkaXNwbGF5Om5vbmU7cmVzaXplOm5vbmU7d2lkdGg6NzU4cHg7aGVpZ2h0OjMwMHB4O3doaXRlLXNwYWNlOnByZTt3b3JkLXdyYXA6bm9ybWFsO292ZXJmbG93LXg6c2Nyb2xsIj48L3RleHRhcmVhPicpOwogICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSAnJzsKICAgICAgICAgICAgICAgIGlmKHNob3dQYXJhbXMudHlwZSA9PSAnYmF0Y2gnKXsKICAgICAgICAgICAgICAgICAgICAkLmVhY2gobGlua0xpc3QsZnVuY3Rpb24oaW5kZXgsZWxlbWVudCl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuZG93bmxvYWRsaW5rID09ICdlcnJvcicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID09IGxpbmtMaXN0Lmxlbmd0aC0xKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQgKyBlbGVtZW50LmRvd25sb2FkbGluazsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCA9ICBjb250ZW50ICsgZWxlbWVudC5kb3dubG9hZGxpbmsgKyAnXG4nOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmKHNob3dQYXJhbXMudHlwZSA9PSAnbGluaycpewogICAgICAgICAgICAgICAgICAgICQuZWFjaChsaW5rTGlzdCxmdW5jdGlvbihpbmRleCxlbGVtZW50KXsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC51cmwgPT0gJ2Vycm9yJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoaW5kZXggPT0gbGlua0xpc3QubGVuZ3RoLTEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gY29udGVudCArIGVsZW1lbnQudXJsOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gIGNvbnRlbnQgKyBlbGVtZW50LnVybCArICdcbic7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkZGlhbG9nX3RleHRhcmVhLnZhbChjb250ZW50KTsKICAgICAgICAgICAgICAgICQoJ2Rpdi5kaWFsb2ctYm9keScsZGlhbG9nKS5hcHBlbmQoJGRpYWxvZ190ZXh0YXJlYSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHNoYWRvdy5zaG93KCk7CiAgICAgICAgICAgIGRpYWxvZy5zaG93KCk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmNsb3NlID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgZGlhbG9nQ29udHJvbCgpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gZGlhbG9nQ29udHJvbCgpewogICAgICAgICAgICAkKCdkaXYuZGlhbG9nLWJvZHknLGRpYWxvZykuY2hpbGRyZW4oKS5yZW1vdmUoKTsKICAgICAgICAgICAgJCgnZGl2LmRpYWxvZy1oZWFkZXIgaDMgc3Bhbi5kaWFsb2ctdGl0bGUnLGRpYWxvZykudGV4dCgnJyk7CiAgICAgICAgICAgICQoJ2Rpdi5kaWFsb2ctdGlwIHAnLGRpYWxvZykudGV4dCgnJyk7CiAgICAgICAgICAgICQoJ2Rpdi5kaWFsb2ctYnV0dG9uJyxkaWFsb2cpLmhpZGUoKTsKICAgICAgICAgICAgJCgnZGl2LmRpYWxvZy1yYWRpbyBpbnB1dFt0eXBlPXJhZGlvXVtuYW1lPXNob3dtb2RlXVt2YWx1ZT1tdWx0aV0nLGRpYWxvZykucHJvcCgnY2hlY2tlZCcsdHJ1ZSk7CiAgICAgICAgICAgICQoJ2Rpdi5kaWFsb2ctcmFkaW8nLGRpYWxvZykuaGlkZSgpOwogICAgICAgICAgICAkKCdkaXYuZGlhbG9nLWJ1dHRvbiBidXR0b24jZGlhbG9nLWNvcHktYnV0dG9uJyxkaWFsb2cpLmhpZGUoKTsKICAgICAgICAgICAgJCgnZGl2LmRpYWxvZy1idXR0b24gYnV0dG9uI2RpYWxvZy1lZGl0LWJ1dHRvbicsZGlhbG9nKS5oaWRlKCk7CiAgICAgICAgICAgICQoJ2Rpdi5kaWFsb2ctYnV0dG9uIGJ1dHRvbiNkaWFsb2ctZXhpdC1idXR0b24nLGRpYWxvZykuaGlkZSgpOwogICAgICAgICAgICBkaWFsb2cuaGlkZSgpOwogICAgICAgICAgICBzaGFkb3cuaGlkZSgpOwogICAgICAgIH0KCiAgICAgICAgZGlhbG9nID0gY3JlYXRlRGlhbG9nKCk7CiAgICAgICAgc2hhZG93ID0gY3JlYXRlU2hhZG93KCk7CiAgICB9CgogICAgZnVuY3Rpb24gVkNvZGVEaWFsb2cocmVmcmVzaFZDb2RlLGNvbmZpcm1DbGljayl7CiAgICAgICAgdmFyIGRpYWxvZyxzaGFkb3c7CiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRGlhbG9nKCl7CiAgICAgICAgICAgIHZhciBzY3JlZW5XaWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7CiAgICAgICAgICAgIHZhciBkaWFsb2dMZWZ0ID0gc2NyZWVuV2lkdGg+NTIwID8gKHNjcmVlbldpZHRoLTUyMCkvMiA6IDA7CiAgICAgICAgICAgIHZhciAkZGlhbG9nX2RpdiA9ICQoJzxkaXYgY2xhc3M9ImRpYWxvZyIgaWQ9ImRpYWxvZy12Y29kZSIgc3R5bGU9IndpZHRoOjUyMHB4O3RvcDowcHg7Ym90dG9tOmF1dG87bGVmdDonK2RpYWxvZ0xlZnQrJ3B4O3JpZ2h0OmF1dG87ZGlzcGxheTpub25lO3Zpc2liaWxpdHk6dmlzaWJsZTt6LWluZGV4OjUyIj48L2Rpdj4nKTsKICAgICAgICAgICAgdmFyICRkaWFsb2dfaGVhZGVyID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWhlYWRlciI+PGgzPjxzcGFuIGNsYXNzPSJkaWFsb2ctaGVhZGVyLXRpdGxlIj48ZW0gY2xhc3M9InNlbGVjdC10ZXh0Ij7mj5DnpLo8L2VtPjwvc3Bhbj48L2gzPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19jb250cm9sID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWNvbnRyb2wiPjxzcGFuIGNsYXNzPSJkaWFsb2ctaWNvbiBkaWFsb2ctY2xvc2UgaWNvbiBpY29uLWNsb3NlIj48c3BhbiBjbGFzcz0ic2ljb24iPng8L3NwYW4+PC9zcGFuPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19ib2R5ID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWJvZHkiPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19ib2R5X2RpdiA9ICQoJzxkaXYgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6MjJweCI+PC9kaXY+Jyk7CiAgICAgICAgICAgIHZhciAkZGlhbG9nX2JvZHlfZG93bmxvYWRfdmVyaWZ5ID0gJCgnPGRpdiBjbGFzcz0iZG93bmxvYWQtdmVyaWZ5IiBzdHlsZT0ibWFyZ2luLXRvcDoxMHB4O3BhZGRpbmc6MCAyOHB4O3RleHQtYWxpZ246bGVmdDtmb250LXNpemU6MTJweDsiPjwvZGl2PicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ192ZXJpZnlfYm9keSA9ICQoJzxkaXYgY2xhc3M9InZlcmlmeS1ib2R5Ij7or7fovpPlhaXpqozor4HnoIHvvJo8L2Rpdj4nKTsKICAgICAgICAgICAgdmFyICRkaWFsb2dfaW5wdXQgPSAkKCc8aW5wdXQgaWQ9ImRpYWxvZy1pbnB1dCIgdHlwZT0idGV4dCIgc3R5bGU9InBhZGRpbmc6M3B4O3dpZHRoOjg1cHg7aGVpZ2h0OjIzcHg7Ym9yZGVyOjFweCBzb2xpZCAjYzZjNmM2O2JhY2tncm91bmQtY29sb3I6d2hpdGU7dmVydGljYWwtYWxpZ246bWlkZGxlOyIgY2xhc3M9ImlucHV0LWNvZGUiIG1heGxlbmd0aD0iNCI+Jyk7CiAgICAgICAgICAgIHZhciAkZGlhbG9nX2ltZyA9ICQoJzxpbWcgaWQ9ImRpYWxvZy1pbWciIGNsYXNzPSJpbWctY29kZSIgc3R5bGU9Im1hcmdpbi1sZWZ0OjEwcHg7dmVydGljYWwtYWxpZ246bWlkZGxlOyIgYWx0PSLngrnlh7vmjaLkuIDlvKAiIHNyYz0iIiB3aWR0aD0iMTAwIiBoZWlnaHQ9IjMwIj4nKTsKICAgICAgICAgICAgdmFyICRkaWFsb2dfcmVmcmVzaCA9ICQoJzxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgc3R5bGU9InRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7IiBjbGFzcz0idW5kZXJsaW5lIj7mjaLkuIDlvKA8L2E+Jyk7CiAgICAgICAgICAgIHZhciAkZGlhbG9nX2VyciA9ICQoJzxkaXYgaWQ9ImRpYWxvZy1lcnIiIHN0eWxlPSJwYWRkaW5nLWxlZnQ6ODRweDtoZWlnaHQ6MThweDtjb2xvcjojZDgwMDAwIiBjbGFzcz0idmVyaWZ5LWVycm9yIj48L2Rpdj4nKTsKICAgICAgICAgICAgdmFyICRkaWFsb2dfZm9vdGVyID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWZvb3RlciBnLWNsZWFyZml4Ij48L2Rpdj4nKTsKICAgICAgICAgICAgdmFyICRkaWFsb2dfY29uZmlybV9idXR0b24gPSAkKCc8YSBjbGFzcz0iZy1idXR0b24gZy1idXR0b24tYmx1ZSIgZGF0YS1idXR0b24taWQ9IiIgZGF0YS1idXR0b24taW5kZXggaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBzdHlsZT0icGFkZGluZy1sZWZ0OjM2cHgiPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCIgc3R5bGU9InBhZGRpbmctcmlnaHQ6MzZweDsiPjxzcGFuIGNsYXNzPSJ0ZXh0IiBzdHlsZT0id2lkdGg6YXV0bzsiPuehruWumjwvc3Bhbj48L3NwYW4+PC9hPicpOwogICAgICAgICAgICB2YXIgJGRpYWxvZ19jYW5jZWxfYnV0dG9uID0gJCgnPGEgY2xhc3M9ImctYnV0dG9uIiBkYXRhLWJ1dHRvbi1pZD0iIiBkYXRhLWJ1dHRvbi1pbmRleCBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBzdHlsZT0icGFkZGluZy1sZWZ0OiAzNnB4OyI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0IiBzdHlsZT0icGFkZGluZy1yaWdodDogMzZweDsiPjxzcGFuIGNsYXNzPSJ0ZXh0IiBzdHlsZT0id2lkdGg6IGF1dG87Ij7lj5bmtog8L3NwYW4+PC9zcGFuPjwvYT4nKTsKCiAgICAgICAgICAgICRkaWFsb2dfaGVhZGVyLmFwcGVuZCgkZGlhbG9nX2NvbnRyb2wpOwogICAgICAgICAgICAkZGlhbG9nX3ZlcmlmeV9ib2R5LmFwcGVuZCgkZGlhbG9nX2lucHV0KS5hcHBlbmQoJGRpYWxvZ19pbWcpLmFwcGVuZCgkZGlhbG9nX3JlZnJlc2gpOwogICAgICAgICAgICAkZGlhbG9nX2JvZHlfZG93bmxvYWRfdmVyaWZ5LmFwcGVuZCgkZGlhbG9nX3ZlcmlmeV9ib2R5KS5hcHBlbmQoJGRpYWxvZ19lcnIpOwogICAgICAgICAgICAkZGlhbG9nX2JvZHlfZGl2LmFwcGVuZCgkZGlhbG9nX2JvZHlfZG93bmxvYWRfdmVyaWZ5KTsKICAgICAgICAgICAgJGRpYWxvZ19ib2R5LmFwcGVuZCgkZGlhbG9nX2JvZHlfZGl2KTsKICAgICAgICAgICAgJGRpYWxvZ19mb290ZXIuYXBwZW5kKCRkaWFsb2dfY29uZmlybV9idXR0b24pLmFwcGVuZCgkZGlhbG9nX2NhbmNlbF9idXR0b24pOwogICAgICAgICAgICAkZGlhbG9nX2Rpdi5hcHBlbmQoJGRpYWxvZ19oZWFkZXIpLmFwcGVuZCgkZGlhbG9nX2JvZHkpLmFwcGVuZCgkZGlhbG9nX2Zvb3Rlcik7CiAgICAgICAgICAgICQoJ2JvZHknKS5hcHBlbmQoJGRpYWxvZ19kaXYpOwoKICAgICAgICAgICAgJGRpYWxvZ19kaXYuZGlhbG9nRHJhZygpOwoKICAgICAgICAgICAgJGRpYWxvZ19jb250cm9sLmNsaWNrKGRpYWxvZ0NvbnRyb2wpOwogICAgICAgICAgICAkZGlhbG9nX2ltZy5jbGljayhyZWZyZXNoVkNvZGUpOwogICAgICAgICAgICAkZGlhbG9nX3JlZnJlc2guY2xpY2socmVmcmVzaFZDb2RlKTsKICAgICAgICAgICAgJGRpYWxvZ19pbnB1dC5rZXlwcmVzcyhmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICBpZihldmVudC53aGljaCA9PSAxMykKICAgICAgICAgICAgICAgICAgICBjb25maXJtQ2xpY2soKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICRkaWFsb2dfY29uZmlybV9idXR0b24uY2xpY2soY29uZmlybUNsaWNrKTsKICAgICAgICAgICAgJGRpYWxvZ19jYW5jZWxfYnV0dG9uLmNsaWNrKGRpYWxvZ0NvbnRyb2wpOwogICAgICAgICAgICAkZGlhbG9nX2lucHV0LmNsaWNrKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAkKCcjZGlhbG9nLWVycicpLnRleHQoJycpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuICRkaWFsb2dfZGl2OwogICAgICAgIH0KICAgICAgICB0aGlzLm9wZW4gPSBmdW5jdGlvbih2Y29kZSl7CiAgICAgICAgICAgIGlmKHZjb2RlKQogICAgICAgICAgICAgICAgJCgnI2RpYWxvZy1pbWcnKS5hdHRyKCdzcmMnLHZjb2RlLmltZyk7CiAgICAgICAgICAgIGRpYWxvZy5zaG93KCk7CiAgICAgICAgICAgIHNoYWRvdy5zaG93KCk7CiAgICAgICAgfQogICAgICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbigpewogICAgICAgICAgICBkaWFsb2dDb250cm9sKCk7CiAgICAgICAgfQogICAgICAgIGRpYWxvZyA9IGNyZWF0ZURpYWxvZygpOwogICAgICAgIHNoYWRvdyA9ICQoJ2Rpdi5kaWFsb2ctc2hhZG93Jyk7CiAgICAgICAgZnVuY3Rpb24gZGlhbG9nQ29udHJvbCgpewogICAgICAgICAgICAkKCcjZGlhbG9nLWltZycsZGlhbG9nKS5hdHRyKCdzcmMnLCcnKTsKICAgICAgICAgICAgJCgnI2RpYWxvZy1lcnInKS50ZXh0KCcnKTsKICAgICAgICAgICAgZGlhbG9nLmhpZGUoKTsKICAgICAgICAgICAgc2hhZG93LmhpZGUoKTsKICAgICAgICB9CiAgICB9CgogICAgJC5mbi5kaWFsb2dEcmFnID0gZnVuY3Rpb24oKXsKICAgICAgICB2YXIgbW91c2VJbml0WCxtb3VzZUluaXRZLGRpYWxvZ0luaXRYLGRpYWxvZ0luaXRZOwogICAgICAgIHZhciBzY3JlZW5XaWR0aCA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg7CiAgICAgICAgdmFyICRwYXJlbnQgPSB0aGlzOwogICAgICAgICQoJ2Rpdi5kaWFsb2ctaGVhZGVyJyx0aGlzKS5tb3VzZWRvd24oZnVuY3Rpb24oZXZlbnQpewogICAgICAgICAgICBtb3VzZUluaXRYID0gcGFyc2VJbnQoZXZlbnQucGFnZVgpOwogICAgICAgICAgICBtb3VzZUluaXRZID0gcGFyc2VJbnQoZXZlbnQucGFnZVkpOwogICAgICAgICAgICBkaWFsb2dJbml0WCA9IHBhcnNlSW50KCRwYXJlbnQuY3NzKCdsZWZ0JykucmVwbGFjZSgncHgnLCcnKSk7CiAgICAgICAgICAgIGRpYWxvZ0luaXRZID0gcGFyc2VJbnQoJHBhcmVudC5jc3MoJ3RvcCcpLnJlcGxhY2UoJ3B4JywnJykpOwogICAgICAgICAgICAkKHRoaXMpLm1vdXNlbW92ZShmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICAgICB2YXIgdGVtcFggPSBkaWFsb2dJbml0WCArIHBhcnNlSW50KGV2ZW50LnBhZ2VYKSAtIG1vdXNlSW5pdFg7CiAgICAgICAgICAgICAgICB2YXIgdGVtcFkgPSBkaWFsb2dJbml0WSArIHBhcnNlSW50KGV2ZW50LnBhZ2VZKSAtIG1vdXNlSW5pdFk7CiAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUludCgkcGFyZW50LmNzcygnd2lkdGgnKS5yZXBsYWNlKCdweCcsJycpKTsKICAgICAgICAgICAgICAgIHRlbXBYID0gdGVtcFg8MCA/IDAgOiB0ZW1wWD5zY3JlZW5XaWR0aC13aWR0aCA/IHNjcmVlbldpZHRoLXdpZHRoIDogdGVtcFg7CiAgICAgICAgICAgICAgICB0ZW1wWSA9IHRlbXBZPDAgPyAwIDogdGVtcFk7CiAgICAgICAgICAgICAgICAkcGFyZW50LmNzcygnbGVmdCcsdGVtcFgrJ3B4JykuY3NzKCd0b3AnLHRlbXBZKydweCcpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgICAkKCdkaXYuZGlhbG9nLWhlYWRlcicsdGhpcykubW91c2V1cChmdW5jdGlvbihldmVudCl7CiAgICAgICAgICAgICQodGhpcykudW5iaW5kKCdtb3VzZW1vdmUnKTsKICAgICAgICB9KTsKICAgIH0KCn0pKCk7"}]}